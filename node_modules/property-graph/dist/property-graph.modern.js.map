{"version":3,"file":"property-graph.modern.js","sources":["../src/event-dispatcher.ts","../src/graph-edge.ts","../src/graph.ts","../src/refs.ts","../src/graph-node.ts"],"sourcesContent":["import type { Graph } from './graph.js';\nimport type { GraphNode } from './graph-node.js';\nimport type { GraphEdge } from './graph-edge.js';\n\nexport interface BaseEvent {\n\ttype: string;\n\t[attachment: string]: unknown;\n}\n\nexport interface GraphEvent extends BaseEvent {\n\ttarget: Graph<GraphNode>;\n}\n\nexport interface GraphNodeEvent extends BaseEvent {\n\ttarget: GraphNode;\n}\n\nexport interface GraphEdgeEvent extends BaseEvent {\n\ttarget: GraphEdge<GraphNode, GraphNode>;\n}\n\nexport type EventListener<E> = (event: E) => void;\n\nexport class EventDispatcher<T extends BaseEvent> {\n\tprivate _listeners: Record<string, EventListener<T>[]> = {};\n\n\taddEventListener(type: string, listener: EventListener<T>): this {\n\t\tconst listeners = this._listeners;\n\n\t\tif (listeners[type] === undefined) {\n\t\t\tlisteners[type] = [] as EventListener<T>[];\n\t\t}\n\n\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\tlisteners[type].push(listener);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tremoveEventListener(type: string, listener: EventListener<T>): this {\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdispatchEvent(event: T): this {\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[event.type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\tarray[i].call(this, event as T);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdispose(): void {\n\t\tfor (const key in this._listeners) {\n\t\t\tdelete this._listeners[key];\n\t\t}\n\t}\n}\n","import { GraphNode } from './graph-node.js';\n\n/**\n * Represents a connection between two {@link GraphNode} resources in a {@link Graph}.\n *\n * The left node is considered the owner, and the right node the resource. The\n * owner is responsible for being able find and remove a reference to a resource, given\n * that link. The resource does not hold a reference to the link or to the owner,\n * although that reverse lookup can be done on the graph.\n */\nexport class GraphEdge<Parent extends GraphNode, Child extends GraphNode> {\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _name: string,\n\t\tprivate readonly _parent: Parent,\n\t\tprivate _child: Child,\n\t\tprivate _attributes: Record<string, unknown> = {},\n\t) {\n\t\tif (!_parent.isOnGraph(_child)) {\n\t\t\tthrow new Error('Cannot connect disconnected graphs.');\n\t\t}\n\t}\n\n\t/** Name (attribute name from parent {@link GraphNode}). */\n\tgetName(): string {\n\t\treturn this._name;\n\t}\n\n\t/** Owner node. */\n\tgetParent(): Parent {\n\t\treturn this._parent;\n\t}\n\n\t/** Resource node. */\n\tgetChild(): Child {\n\t\treturn this._child;\n\t}\n\n\t/**\n\t * Sets the child node.\n\t *\n\t * @internal Only {@link Graph} implementations may safely call this method directly. Use\n\t * \t{@link Property.swap} or {@link Graph.swapChild} instead.\n\t */\n\tsetChild(child: Child): this {\n\t\tthis._child = child;\n\t\treturn this;\n\t}\n\n\t/** Attributes of the graph node relationship. */\n\tgetAttributes(): Record<string, unknown> {\n\t\treturn this._attributes;\n\t}\n\n\t/** Destroys a (currently intact) edge, updating both the graph and the owner. */\n\tdispose(): void {\n\t\tif (this._disposed) return;\n\t\t// @ts-expect-error GraphEdge doesn't know types of parent GraphNode.\n\t\tthis._parent._destroyRef(this);\n\t\tthis._disposed = true;\n\t}\n\n\t/** Whether this link has been destroyed. */\n\tisDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n}\n","import { EventDispatcher, GraphEdgeEvent, GraphEvent, GraphNodeEvent } from './event-dispatcher.js';\nimport { GraphEdge } from './graph-edge.js';\nimport { GraphNode } from './graph-node.js';\n\n/**\n * A graph manages a network of {@link GraphNode} nodes, connected\n * by {@link @Link} edges.\n */\nexport class Graph<T extends GraphNode> extends EventDispatcher<GraphEvent | GraphNodeEvent | GraphEdgeEvent> {\n\tprivate _emptySet: Set<GraphEdge<T, T>> = new Set();\n\n\tprivate _edges: Set<GraphEdge<T, T>> = new Set();\n\tprivate _parentEdges: Map<T, Set<GraphEdge<T, T>>> = new Map();\n\tprivate _childEdges: Map<T, Set<GraphEdge<T, T>>> = new Map();\n\n\t/** Returns a list of all parent->child edges on this graph. */\n\tpublic listEdges(): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._edges);\n\t}\n\n\t/** Returns a list of all edges on the graph having the given node as their child. */\n\tpublic listParentEdges(node: T): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._childEdges.get(node) || this._emptySet);\n\t}\n\n\t/** Returns a list of parent nodes for the given child node. */\n\tpublic listParents(node: T): T[] {\n\t\tconst parentSet = new Set<T>();\n\t\tfor (const edge of this.listParentEdges(node)) {\n\t\t\tparentSet.add(edge.getParent());\n\t\t}\n\t\treturn Array.from(parentSet);\n\t}\n\n\t/** Returns a list of all edges on the graph having the given node as their parent. */\n\tpublic listChildEdges(node: T): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._parentEdges.get(node) || this._emptySet);\n\t}\n\n\t/** Returns a list of child nodes for the given parent node. */\n\tpublic listChildren(node: T): T[] {\n\t\tconst childSet = new Set<T>();\n\t\tfor (const edge of this.listChildEdges(node)) {\n\t\t\tchildSet.add(edge.getChild());\n\t\t}\n\t\treturn Array.from(childSet);\n\t}\n\n\tpublic disconnectParents(node: T, filter?: (n: T) => boolean): this {\n\t\tfor (const edge of this.listParentEdges(node)) {\n\t\t\tif (!filter || filter(edge.getParent())) {\n\t\t\t\tedge.dispose();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Internal.\n\t */\n\n\t/**\n\t * Creates a {@link GraphEdge} connecting two {@link GraphNode} instances. Edge is returned\n\t * for the caller to store.\n\t * @param a Owner\n\t * @param b Resource\n\t * @hidden\n\t * @internal\n\t */\n\tpublic _createEdge<A extends T, B extends T>(\n\t\tname: string,\n\t\ta: A,\n\t\tb: B,\n\t\tattributes?: Record<string, unknown>,\n\t): GraphEdge<A, B> {\n\t\tconst edge = new GraphEdge(name, a, b, attributes);\n\t\tthis._edges.add(edge);\n\n\t\tconst parent = edge.getParent();\n\t\tif (!this._parentEdges.has(parent)) this._parentEdges.set(parent, new Set());\n\t\tthis._parentEdges.get(parent)!.add(edge);\n\n\t\tconst child = edge.getChild();\n\t\tif (!this._childEdges.has(child)) this._childEdges.set(child, new Set());\n\t\tthis._childEdges.get(child)!.add(edge);\n\n\t\treturn edge;\n\t}\n\n\t/**\n\t * Detaches a {@link GraphEdge} from the {@link Graph}. Before calling this\n\t * method, ensure that the GraphEdge has first been detached from any\n\t * associated {@link GraphNode} attributes.\n\t * @hidden\n\t * @internal\n\t */\n\tpublic _destroyEdge(edge: GraphEdge<T, T>): this {\n\t\tthis._edges.delete(edge);\n\t\tthis._parentEdges.get(edge.getParent())!.delete(edge);\n\t\tthis._childEdges.get(edge.getChild())!.delete(edge);\n\t\treturn this;\n\t}\n}\n","import { GraphEdge } from './graph-edge.js';\nimport { GraphNode } from './graph-node.js';\n\nexport type Ref<T extends GraphNode = GraphNode> = GraphEdge<GraphNode, T>;\n\n/**\n * An ordered collection of {@link Ref Refs}, allowing duplicates. Removing\n * a Ref is an O(n) operation â€” use {@link RefSet} for faster removal, if\n * duplicates are not required.\n */\nexport class RefList<T extends GraphNode = GraphNode> {\n\tlist: Ref<T>[] = [];\n\tconstructor(refs?: Ref<T>[]) {\n\t\tif (refs) {\n\t\t\tfor (const ref of refs) {\n\t\t\t\tthis.list.push(ref);\n\t\t\t}\n\t\t}\n\t}\n\tadd(ref: Ref<T>): void {\n\t\tthis.list.push(ref);\n\t}\n\tremove(ref: Ref<T>): void {\n\t\tconst index = this.list.indexOf(ref);\n\t\tif (index >= 0) this.list.splice(index, 1);\n\t}\n\tremoveChild(child: T): Ref<T>[] {\n\t\tconst refs = [] as Ref<T>[];\n\t\tfor (const ref of this.list) {\n\t\t\tif (ref.getChild() === child) {\n\t\t\t\trefs.push(ref);\n\t\t\t}\n\t\t}\n\t\tfor (const ref of refs) {\n\t\t\tthis.remove(ref);\n\t\t}\n\t\treturn refs;\n\t}\n\tlistRefsByChild(child: T): Ref<T>[] {\n\t\tconst refs = [] as Ref<T>[];\n\t\tfor (const ref of this.list) {\n\t\t\tif (ref.getChild() === child) {\n\t\t\t\trefs.push(ref);\n\t\t\t}\n\t\t}\n\t\treturn refs;\n\t}\n\tvalues(): Ref<T>[] {\n\t\treturn this.list;\n\t}\n}\n\n/**\n * An ordered collection of {@link Ref Refs}, without duplicates. Adding or\n * removing a Ref is typically O(1) or O(log(n)), and faster than\n * {@link RefList}. If support for duplicates is required, use {@link RefList}.\n */\nexport class RefSet<T extends GraphNode = GraphNode> {\n\tset = new Set<Ref<T>>();\n\tmap = new Map<T, Ref<T>>();\n\tconstructor(refs?: Ref<T>[]) {\n\t\tif (refs) {\n\t\t\tfor (const ref of refs) {\n\t\t\t\tthis.add(ref);\n\t\t\t}\n\t\t}\n\t}\n\tadd(ref: Ref<T>): void {\n\t\tconst child = ref.getChild();\n\t\tthis.removeChild(child);\n\n\t\tthis.set.add(ref);\n\t\tthis.map.set(child, ref);\n\t}\n\tremove(ref: Ref<T>): void {\n\t\tthis.set.delete(ref);\n\t\tthis.map.delete(ref.getChild());\n\t}\n\tremoveChild(child: T): Ref<T> | null {\n\t\tconst ref = this.map.get(child) || null;\n\t\tif (ref) this.remove(ref);\n\t\treturn ref;\n\t}\n\tgetRefByChild(child: T): Ref<T> | null {\n\t\treturn this.map.get(child) || null;\n\t}\n\tvalues(): Ref<T>[] {\n\t\treturn Array.from(this.set);\n\t}\n}\n\n/**\n * Map (or dictionary) from string keys to {@link Ref Refs}.\n */\nexport class RefMap<T extends GraphNode = GraphNode> {\n\tmap: { [key: string]: Ref<T> } = {};\n\tconstructor(map?: Record<string, Ref<T>>) {\n\t\tif (map) {\n\t\t\tObject.assign(this.map, map);\n\t\t}\n\t}\n\tset(key: string, child: Ref<T>): void {\n\t\tthis.map[key] = child;\n\t}\n\tdelete(key: string): void {\n\t\tdelete this.map[key];\n\t}\n\tget(key: string): Ref<T> | null {\n\t\treturn this.map[key] || null;\n\t}\n\tkeys(): string[] {\n\t\treturn Object.keys(this.map);\n\t}\n\tvalues(): Ref<T>[] {\n\t\treturn Object.values(this.map);\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n\tLiteralKeys,\n\tNullable,\n\tRefCollectionValue,\n\tRefKeys,\n\tRefListKeys,\n\tRefMapKeys,\n\tRefMapValue,\n\tRefSetKeys,\n} from './constants.js';\nimport { BaseEvent, EventDispatcher, GraphNodeEvent } from './event-dispatcher.js';\nimport { Graph } from './graph.js';\nimport { GraphEdge } from './graph-edge.js';\nimport { Ref, RefList, RefMap, RefSet } from './refs.js';\n\n// References:\n// - https://stackoverflow.com/a/70163679/1314762\n// - https://stackoverflow.com/a/70201805/1314762\n\ntype GraphNodeAttributesInternal<Parent extends GraphNode, Attributes extends object> = {\n\t[Key in keyof Attributes]: Attributes[Key] extends GraphNode\n\t\t? GraphEdge<Parent, Attributes[Key]>\n\t\t: Attributes[Key] extends GraphNode[]\n\t\t\t? GraphEdge<Parent, Attributes[Key][number]>[]\n\t\t\t: Attributes[Key] extends { [key: string]: GraphNode }\n\t\t\t\t? Record<string, GraphEdge<Parent, Attributes[Key][string]>>\n\t\t\t\t: Attributes[Key];\n};\n\nexport const $attributes = Symbol('attributes');\nexport const $immutableKeys = Symbol('immutableKeys');\n\n/**\n * Represents a node in a {@link Graph}.\n */\nexport abstract class GraphNode<Attributes extends object = object> extends EventDispatcher<GraphNodeEvent> {\n\tprivate _disposed = false;\n\n\t/**\n\t * Internal graph used to search and maintain references.\n\t * @hidden\n\t */\n\tprotected readonly graph: Graph<GraphNode>;\n\n\t/**\n\t * Attributes (literal values and GraphNode references) associated with this instance. For each\n\t * GraphNode reference, the attributes stores a {@link GraphEdge}. List and Map references are\n\t * stored as arrays and dictionaries of edges.\n\t * @internal\n\t */\n\tprotected readonly [$attributes]: GraphNodeAttributesInternal<this, Attributes>;\n\n\t/**\n\t * Attributes included with `getDefaultAttributes` are considered immutable, and cannot be\n\t * modifed by `.setRef()`, `.copy()`, or other GraphNode methods. Both the edges and the\n\t * properties will be disposed with the parent GraphNode.\n\t *\n\t * Currently, only single-edge references (getRef/setRef) are supported as immutables.\n\t *\n\t * @internal\n\t */\n\tprotected readonly [$immutableKeys]: Set<string>;\n\n\tconstructor(graph: Graph<GraphNode>) {\n\t\tsuper();\n\t\tthis.graph = graph;\n\t\tthis[$immutableKeys] = new Set();\n\t\tthis[$attributes] = this._createAttributes();\n\t}\n\n\t/**\n\t * Returns default attributes for the graph node. Subclasses having any attributes (either\n\t * literal values or references to other graph nodes) must override this method. Literal\n\t * attributes should be given their default values, if any. References should generally be\n\t * initialized as empty (Ref â†’ null, RefList â†’ [], RefMap â†’ {}) and then modified by setters.\n\t *\n\t * Any single-edge references (setRef) returned by this method will be considered immutable,\n\t * to be owned by and disposed with the parent node. Multi-edge references (addRef, removeRef,\n\t * setRefMap) cannot be returned as default attributes.\n\t */\n\tprotected getDefaults(): Nullable<Attributes> {\n\t\treturn {} as Nullable<Attributes>;\n\t}\n\n\t/**\n\t * Constructs and returns an object used to store a graph nodes attributes. Compared to the\n\t * default Attributes interface, this has two distinctions:\n\t *\n\t * 1. Slots for GraphNode<T> objects are replaced with slots for GraphEdge<this, GraphNode<T>>\n\t * 2. GraphNode<T> objects provided as defaults are considered immutable\n\t *\n\t * @internal\n\t */\n\tprivate _createAttributes(): GraphNodeAttributesInternal<this, Attributes> {\n\t\tconst defaultAttributes = this.getDefaults();\n\t\tconst attributes = {} as GraphNodeAttributesInternal<this, Attributes>;\n\t\tfor (const key in defaultAttributes) {\n\t\t\tconst value = defaultAttributes[key] as any;\n\t\t\t// TODO(design): With Ref, RefList, and RefMap types, should users\n\t\t\t// be able to pass them all here? Listeners must be added.\n\t\t\tif (value instanceof GraphNode) {\n\t\t\t\tconst ref = this.graph._createEdge(key, this, value);\n\t\t\t\tthis[$immutableKeys].add(key);\n\t\t\t\tattributes[key] = ref as any;\n\t\t\t} else {\n\t\t\t\tattributes[key] = value as any;\n\t\t\t}\n\t\t}\n\t\treturn attributes;\n\t}\n\n\t/** @internal Returns true if two nodes are on the same {@link Graph}. */\n\tpublic isOnGraph(other: GraphNode): boolean {\n\t\treturn this.graph === other.graph;\n\t}\n\n\t/** Returns true if the node has been permanently removed from the graph. */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Removes both inbound references to and outbound references from this object. At the end\n\t * of the process the object holds no references, and nothing holds references to it. A\n\t * disposed object is not reusable.\n\t */\n\tpublic dispose(): void {\n\t\tif (this._disposed) return;\n\t\tthis.graph.listChildEdges(this).forEach((edge) => edge.dispose());\n\t\tthis.graph.disconnectParents(this);\n\t\tthis._disposed = true;\n\t\tthis.dispatchEvent({ type: 'dispose' });\n\t}\n\n\t/**\n\t * Removes all inbound references to this object. At the end of the process the object is\n\t * considered 'detached': it may hold references to child resources, but nothing holds\n\t * references to it. A detached object may be re-attached.\n\t */\n\tpublic detach(): this {\n\t\tthis.graph.disconnectParents(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transfers this object's references from the old node to the new one. The old node is fully\n\t * detached from this parent at the end of the process.\n\t *\n\t * @hidden\n\t */\n\tpublic swap(prevValue: GraphNode, nextValue: GraphNode): this {\n\t\tfor (const attribute in this[$attributes]) {\n\t\t\tconst value = this[$attributes][attribute] as Ref | RefList | RefSet | RefMap;\n\t\t\tif (value instanceof GraphEdge) {\n\t\t\t\tconst ref = value as Ref;\n\t\t\t\tif (ref.getChild() === prevValue) {\n\t\t\t\t\tthis.setRef(attribute as any, nextValue, ref.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (value instanceof RefList) {\n\t\t\t\tfor (const ref of value.listRefsByChild(prevValue)) {\n\t\t\t\t\tconst refAttributes = ref.getAttributes();\n\t\t\t\t\tthis.removeRef(attribute as any, prevValue as any);\n\t\t\t\t\tthis.addRef(attribute as any, nextValue as any, refAttributes);\n\t\t\t\t}\n\t\t\t} else if (value instanceof RefSet) {\n\t\t\t\tconst ref = value.getRefByChild(prevValue);\n\t\t\t\tif (ref) {\n\t\t\t\t\tconst refAttributes = ref.getAttributes();\n\t\t\t\t\tthis.removeRef(attribute as any, prevValue as any);\n\t\t\t\t\tthis.addRef(attribute as any, nextValue as any, refAttributes);\n\t\t\t\t}\n\t\t\t} else if (value instanceof RefMap) {\n\t\t\t\tfor (const key of value.keys()) {\n\t\t\t\t\tconst ref = value.get(key)!;\n\t\t\t\t\tif (ref.getChild() === prevValue) {\n\t\t\t\t\t\tthis.setRefMap(attribute as any, key, nextValue as any, ref.getAttributes());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Literal attributes.\n\t */\n\n\t/** @hidden */\n\tprotected get<K extends LiteralKeys<Attributes>>(attribute: K): Attributes[K] {\n\t\treturn this[$attributes][attribute] as Attributes[K];\n\t}\n\n\t/** @hidden */\n\tprotected set<K extends LiteralKeys<Attributes>>(attribute: K, value: Attributes[K]): this {\n\t\t(this[$attributes][attribute] as Attributes[K]) = value;\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/**********************************************************************************************\n\t * Ref: 1:1 graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected getRef<K extends RefKeys<Attributes>>(attribute: K): (GraphNode & Attributes[K]) | null {\n\t\tconst ref = this[$attributes][attribute] as Ref;\n\t\treturn ref ? (ref.getChild() as GraphNode & Attributes[K]) : null;\n\t}\n\n\t/** @hidden */\n\tprotected setRef<K extends RefKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: (GraphNode & Attributes[K]) | null,\n\t\tattributes?: Record<string, unknown>,\n\t): this {\n\t\tif (this[$immutableKeys].has(attribute as string)) {\n\t\t\tthrow new Error(`Cannot overwrite immutable attribute, \"${attribute as string}\".`);\n\t\t}\n\n\t\tconst prevRef = this[$attributes][attribute] as Ref;\n\t\tif (prevRef) prevRef.dispose(); // TODO(cleanup): Possible duplicate event.\n\n\t\tif (!value) return this;\n\n\t\tconst ref = this.graph._createEdge(attribute as string, this, value, attributes);\n\t\t(this[$attributes][attribute] as Ref) = ref;\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/**********************************************************************************************\n\t * RefList: 1:many graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected listRefs<K extends RefListKeys<Attributes> | RefSetKeys<Attributes>>(\n\t\tattribute: K,\n\t): RefCollectionValue<Attributes[K]>[] {\n\t\tconst refs = this.assertRefList(attribute);\n\t\treturn refs.values().map((ref) => ref.getChild()) as RefCollectionValue<Attributes[K]>[];\n\t}\n\n\t/** @hidden */\n\tprotected addRef<K extends RefListKeys<Attributes> | RefSetKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: RefCollectionValue<Attributes[K]>,\n\t\tattributes?: Record<string, unknown>,\n\t): this {\n\t\tconst ref = this.graph._createEdge(attribute as string, this, value, attributes);\n\t\tconst refs = this.assertRefList(attribute);\n\t\trefs.add(ref);\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/** @hidden */\n\tprotected removeRef<K extends RefListKeys<Attributes> | RefSetKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: RefCollectionValue<Attributes[K]>,\n\t): this {\n\t\tconst refs = this.assertRefList(attribute);\n\n\t\tif (refs instanceof RefList) {\n\t\t\tfor (const ref of refs.listRefsByChild(value)) {\n\t\t\t\tref.dispose();\n\t\t\t}\n\t\t} else {\n\t\t\tconst ref = refs.getRefByChild(value);\n\t\t\tif (ref) ref.dispose();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tprivate assertRefList<K extends RefListKeys<Attributes> | RefSetKeys<Attributes>>(attribute: K): RefList | RefSet {\n\t\tconst refs = this[$attributes][attribute];\n\n\t\tif (refs instanceof RefList || refs instanceof RefSet) {\n\t\t\treturn refs;\n\t\t}\n\n\t\t// TODO(v3) Remove warning.\n\t\tthrow new Error(`Expected RefList or RefSet for attribute \"${attribute as string}\"`);\n\t}\n\n\t/**********************************************************************************************\n\t * RefMap: Named 1:many (map) graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected listRefMapKeys<K extends RefMapKeys<Attributes>>(attribute: K): string[] {\n\t\treturn this.assertRefMap(attribute).keys();\n\t}\n\n\t/** @hidden */\n\tprotected listRefMapValues<K extends RefMapKeys<Attributes>, V extends RefMapValue<Attributes[K]>>(\n\t\tattribute: K,\n\t): V[] {\n\t\treturn this.assertRefMap(attribute)\n\t\t\t.values()\n\t\t\t.map((ref: any) => ref.getChild());\n\t}\n\n\t/** @hidden */\n\tprotected getRefMap<K extends RefMapKeys<Attributes>, V extends RefMapValue<Attributes[K]>>(\n\t\tattribute: K,\n\t\tkey: string,\n\t): V | null {\n\t\tconst refMap = this.assertRefMap(attribute);\n\t\tconst ref = refMap.get(key as string);\n\t\treturn ref ? (ref.getChild() as V) : null;\n\t}\n\n\t/** @hidden */\n\tprotected setRefMap<K extends RefMapKeys<Attributes>, V extends RefMapValue<Attributes[K]>>(\n\t\tattribute: K,\n\t\tkey: string,\n\t\tvalue: V | null,\n\t\tmetadata?: Record<string, unknown>,\n\t): this {\n\t\tconst refMap = this.assertRefMap(attribute);\n\n\t\tconst prevRef = refMap.get(key as string);\n\t\tif (prevRef) prevRef.dispose(); // TODO(cleanup): Possible duplicate event.\n\n\t\tif (!value) return this;\n\n\t\tmetadata = Object.assign(metadata || {}, { key: key });\n\t\tconst ref = this.graph._createEdge(attribute as string, this, value, { ...metadata, key });\n\t\trefMap.set(key as string, ref);\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute, key });\n\t}\n\n\t/** @hidden */\n\tprivate assertRefMap<K extends RefMapKeys<Attributes>>(attribute: K): RefMap {\n\t\tconst map = this[$attributes][attribute];\n\n\t\tif (map instanceof RefMap) {\n\t\t\treturn map;\n\t\t}\n\n\t\t// TODO(v3) Remove warning.\n\t\tthrow new Error(`Expected RefMap for attribute \"${attribute as string}\"`);\n\t}\n\n\t/**********************************************************************************************\n\t * Events.\n\t */\n\n\t/**\n\t * Dispatches an event on the GraphNode, and on the associated\n\t * Graph. Event types on the graph are prefixed, `\"node:[type]\"`.\n\t */\n\tdispatchEvent(event: BaseEvent): this {\n\t\tsuper.dispatchEvent({ ...event, target: this });\n\t\tthis.graph.dispatchEvent({ ...event, target: this, type: `node:${event.type}` });\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Internal.\n\t */\n\n\t/** @hidden */\n\t_destroyRef<\n\t\tK extends RefKeys<Attributes> | RefListKeys<Attributes> | RefSetKeys<Attributes> | RefMapKeys<Attributes>,\n\t>(ref: GraphEdge<this, GraphNode & Attributes[K]>): void {\n\t\tconst attribute = ref.getName() as K;\n\t\tif (this[$attributes][attribute] === ref) {\n\t\t\t(this[$attributes][attribute as RefKeys<Attributes>] as Ref | null) = null;\n\t\t\t// TODO(design): See _createAttributes().\n\t\t\tif (this[$immutableKeys].has(attribute as string)) ref.getChild().dispose();\n\t\t} else if (this[$attributes][attribute] instanceof RefList) {\n\t\t\t(this[$attributes][attribute as RefListKeys<Attributes>] as RefList).remove(ref);\n\t\t} else if (this[$attributes][attribute] instanceof RefSet) {\n\t\t\t(this[$attributes][attribute as RefSetKeys<Attributes>] as RefSet).remove(ref);\n\t\t} else if (this[$attributes][attribute] instanceof RefMap) {\n\t\t\tconst refMap = this[$attributes][attribute as RefMapKeys<Attributes>] as RefMap;\n\t\t\tfor (const key of refMap.keys()) {\n\t\t\t\tif (refMap.get(key) === ref) {\n\t\t\t\t\trefMap.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tthis.graph._destroyEdge(ref);\n\t\tthis.dispatchEvent({ type: 'change', attribute });\n\t}\n}\n"],"names":["EventDispatcher","_listeners","addEventListener","type","listener","listeners","undefined","indexOf","push","removeEventListener","listenerArray","index","splice","dispatchEvent","event","array","slice","i","l","length","call","dispose","key","GraphEdge","constructor","_name","_parent","_child","_attributes","_disposed","isOnGraph","Error","getName","getParent","getChild","setChild","child","getAttributes","_destroyRef","isDisposed","Graph","_emptySet","Set","_edges","_parentEdges","Map","_childEdges","listEdges","Array","from","listParentEdges","node","get","listParents","parentSet","edge","add","listChildEdges","listChildren","childSet","disconnectParents","filter","_createEdge","name","a","b","attributes","parent","has","set","_destroyEdge","delete","RefList","refs","list","ref","remove","removeChild","listRefsByChild","values","RefSet","map","getRefByChild","RefMap","Object","assign","keys","$attributes","Symbol","$immutableKeys","GraphNode","graph","_createAttributes","getDefaults","defaultAttributes","value","other","forEach","detach","swap","prevValue","nextValue","attribute","setRef","refAttributes","removeRef","addRef","setRefMap","getRef","prevRef","listRefs","assertRefList","listRefMapKeys","assertRefMap","listRefMapValues","getRefMap","refMap","metadata","target"],"mappings":"MAuBaA;;SACJC,aAAiD;;;AAEzDC,EAAAA,gBAAgB,CAACC,IAAD,EAAeC,QAAf;AACf,UAAMC,SAAS,GAAG,KAAKJ,UAAvB;;AAEA,QAAII,SAAS,CAACF,IAAD,CAAT,KAAoBG,SAAxB,EAAmC;AAClCD,MAAAA,SAAS,CAACF,IAAD,CAAT,GAAkB,EAAlB;AACA;;AAED,QAAIE,SAAS,CAACF,IAAD,CAAT,CAAgBI,OAAhB,CAAwBH,QAAxB,MAAsC,CAAC,CAA3C,EAA8C;AAC7CC,MAAAA,SAAS,CAACF,IAAD,CAAT,CAAgBK,IAAhB,CAAqBJ,QAArB;AACA;;AAED,WAAO,IAAP;AACA;;AAEDK,EAAAA,mBAAmB,CAACN,IAAD,EAAeC,QAAf;AAClB,UAAMC,SAAS,GAAG,KAAKJ,UAAvB;AACA,UAAMS,aAAa,GAAGL,SAAS,CAACF,IAAD,CAA/B;;AAEA,QAAIO,aAAa,KAAKJ,SAAtB,EAAiC;AAChC,YAAMK,KAAK,GAAGD,aAAa,CAACH,OAAd,CAAsBH,QAAtB,CAAd;;AAEA,UAAIO,KAAK,KAAK,CAAC,CAAf,EAAkB;AACjBD,QAAAA,aAAa,CAACE,MAAd,CAAqBD,KAArB,EAA4B,CAA5B;AACA;AACD;;AAED,WAAO,IAAP;AACA;;AAEDE,EAAAA,aAAa,CAACC,KAAD;AACZ,UAAMT,SAAS,GAAG,KAAKJ,UAAvB;AACA,UAAMS,aAAa,GAAGL,SAAS,CAACS,KAAK,CAACX,IAAP,CAA/B;;AAEA,QAAIO,aAAa,KAAKJ,SAAtB,EAAiC;AAChC;AACA,YAAMS,KAAK,GAAGL,aAAa,CAACM,KAAd,CAAoB,CAApB,CAAd;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC7CF,QAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,IAAT,CAAc,IAAd,EAAoBN,KAApB;AACA;AACD;;AAED,WAAO,IAAP;AACA;;AAEDO,EAAAA,OAAO;AACN,SAAK,MAAMC,GAAX,IAAkB,KAAKrB,UAAvB,EAAmC;AAClC,aAAO,KAAKA,UAAL,CAAgBqB,GAAhB,CAAP;AACA;AACD;;;;ACzEF;;;;;;;;MAQaC;AAGZC,EAAAA,YACkBC,OACAC,SACTC,QACAC,cAAuC;SAH9BH;SACAC;SACTC;SACAC;SANDC,YAAY;AAGF,cAAA,GAAAJ,KAAA;AACA,gBAAA,GAAAC,OAAA;AACT,eAAA,GAAAC,MAAA;AACA,oBAAA,GAAAC,WAAA;;AAER,QAAI,CAACF,OAAO,CAACI,SAAR,CAAkBH,MAAlB,CAAL,EAAgC;AAC/B,YAAM,IAAII,KAAJ,CAAU,qCAAV,CAAN;AACA;AACD;AAED;;;AACAC,EAAAA,OAAO;AACN,WAAO,KAAKP,KAAZ;AACA;AAED;;;AACAQ,EAAAA,SAAS;AACR,WAAO,KAAKP,OAAZ;AACA;AAED;;;AACAQ,EAAAA,QAAQ;AACP,WAAO,KAAKP,MAAZ;AACA;AAED;;;;;;;;AAMAQ,EAAAA,QAAQ,CAACC,KAAD;AACP,SAAKT,MAAL,GAAcS,KAAd;AACA,WAAO,IAAP;AACA;AAED;;;AACAC,EAAAA,aAAa;AACZ,WAAO,KAAKT,WAAZ;AACA;AAED;;;AACAP,EAAAA,OAAO;AACN,QAAI,KAAKQ,SAAT,EAAoB;;AAEpB,SAAKH,OAAL,CAAaY,WAAb,CAAyB,IAAzB;;AACA,SAAKT,SAAL,GAAiB,IAAjB;AACA;AAED;;;AACAU,EAAAA,UAAU;AACT,WAAO,KAAKV,SAAZ;AACA;;;;AC9DF;;;;;MAIaW,cAAmCxC;;;SACvCyC,YAAkC,IAAIC,GAAJ;SAElCC,SAA+B,IAAID,GAAJ;SAC/BE,eAA6C,IAAIC,GAAJ;SAC7CC,cAA4C,IAAID,GAAJ;;;AAEpD;AACOE,EAAAA,SAAS;AACf,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKN,MAAhB,CAAP;AACA;AAED;;;AACOO,EAAAA,eAAe,CAACC,IAAD;AACrB,WAAOH,KAAK,CAACC,IAAN,CAAW,KAAKH,WAAL,CAAiBM,GAAjB,CAAqBD,IAArB,KAA8B,KAAKV,SAA9C,CAAP;AACA;AAED;;;AACOY,EAAAA,WAAW,CAACF,IAAD;AACjB,UAAMG,SAAS,GAAG,IAAIZ,GAAJ,EAAlB;;AACA,SAAK,MAAMa,IAAX,IAAmB,KAAKL,eAAL,CAAqBC,IAArB,CAAnB,EAA+C;AAC9CG,MAAAA,SAAS,CAACE,GAAV,CAAcD,IAAI,CAACtB,SAAL,EAAd;AACA;;AACD,WAAOe,KAAK,CAACC,IAAN,CAAWK,SAAX,CAAP;AACA;AAED;;;AACOG,EAAAA,cAAc,CAACN,IAAD;AACpB,WAAOH,KAAK,CAACC,IAAN,CAAW,KAAKL,YAAL,CAAkBQ,GAAlB,CAAsBD,IAAtB,KAA+B,KAAKV,SAA/C,CAAP;AACA;AAED;;;AACOiB,EAAAA,YAAY,CAACP,IAAD;AAClB,UAAMQ,QAAQ,GAAG,IAAIjB,GAAJ,EAAjB;;AACA,SAAK,MAAMa,IAAX,IAAmB,KAAKE,cAAL,CAAoBN,IAApB,CAAnB,EAA8C;AAC7CQ,MAAAA,QAAQ,CAACH,GAAT,CAAaD,IAAI,CAACrB,QAAL,EAAb;AACA;;AACD,WAAOc,KAAK,CAACC,IAAN,CAAWU,QAAX,CAAP;AACA;;AAEMC,EAAAA,iBAAiB,CAACT,IAAD,EAAUU,MAAV;AACvB,SAAK,MAAMN,IAAX,IAAmB,KAAKL,eAAL,CAAqBC,IAArB,CAAnB,EAA+C;AAC9C,UAAI,CAACU,MAAD,IAAWA,MAAM,CAACN,IAAI,CAACtB,SAAL,EAAD,CAArB,EAAyC;AACxCsB,QAAAA,IAAI,CAAClC,OAAL;AACA;AACD;;AACD,WAAO,IAAP;AACA;AAED;;;;AAIA;;;;;;;;;;AAQOyC,EAAAA,WAAW,CACjBC,IADiB,EAEjBC,CAFiB,EAGjBC,CAHiB,EAIjBC,UAJiB;AAMjB,UAAMX,IAAI,GAAG,IAAIhC,SAAJ,CAAcwC,IAAd,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,UAA1B,CAAb;;AACA,SAAKvB,MAAL,CAAYa,GAAZ,CAAgBD,IAAhB;;AAEA,UAAMY,MAAM,GAAGZ,IAAI,CAACtB,SAAL,EAAf;AACA,QAAI,CAAC,KAAKW,YAAL,CAAkBwB,GAAlB,CAAsBD,MAAtB,CAAL,EAAoC,KAAKvB,YAAL,CAAkByB,GAAlB,CAAsBF,MAAtB,EAA8B,IAAIzB,GAAJ,EAA9B;;AACpC,SAAKE,YAAL,CAAkBQ,GAAlB,CAAsBe,MAAtB,EAA+BX,GAA/B,CAAmCD,IAAnC;;AAEA,UAAMnB,KAAK,GAAGmB,IAAI,CAACrB,QAAL,EAAd;AACA,QAAI,CAAC,KAAKY,WAAL,CAAiBsB,GAAjB,CAAqBhC,KAArB,CAAL,EAAkC,KAAKU,WAAL,CAAiBuB,GAAjB,CAAqBjC,KAArB,EAA4B,IAAIM,GAAJ,EAA5B;;AAClC,SAAKI,WAAL,CAAiBM,GAAjB,CAAqBhB,KAArB,EAA6BoB,GAA7B,CAAiCD,IAAjC;;AAEA,WAAOA,IAAP;AACA;AAED;;;;;;;;;AAOOe,EAAAA,YAAY,CAACf,IAAD;AAClB,SAAKZ,MAAL,CAAY4B,MAAZ,CAAmBhB,IAAnB;;AACA,SAAKX,YAAL,CAAkBQ,GAAlB,CAAsBG,IAAI,CAACtB,SAAL,EAAtB,EAAyCsC,MAAzC,CAAgDhB,IAAhD;;AACA,SAAKT,WAAL,CAAiBM,GAAjB,CAAqBG,IAAI,CAACrB,QAAL,EAArB,EAAuCqC,MAAvC,CAA8ChB,IAA9C;;AACA,WAAO,IAAP;AACA;;;;;;;;;;;;;;;;;;;;;;AChGF;;;;;MAKaiB;AAEZhD,EAAAA,YAAYiD;SADZC,OAAiB;;AAEhB,QAAID,IAAJ,EAAU;AACT,WAAK,MAAME,GAAX,IAAkBF,IAAlB,EAAwB;AACvB,aAAKC,IAAL,CAAUlE,IAAV,CAAemE,GAAf;AACA;AACD;AACD;;AACDnB,EAAAA,GAAG,CAACmB,GAAD;AACF,SAAKD,IAAL,CAAUlE,IAAV,CAAemE,GAAf;AACA;;AACDC,EAAAA,MAAM,CAACD,GAAD;AACL,UAAMhE,KAAK,GAAG,KAAK+D,IAAL,CAAUnE,OAAV,CAAkBoE,GAAlB,CAAd;AACA,QAAIhE,KAAK,IAAI,CAAb,EAAgB,KAAK+D,IAAL,CAAU9D,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB;AAChB;;AACDkE,EAAAA,WAAW,CAACzC,KAAD;AACV,UAAMqC,IAAI,GAAG,EAAb;;AACA,SAAK,MAAME,GAAX,IAAkB,KAAKD,IAAvB,EAA6B;AAC5B,UAAIC,GAAG,CAACzC,QAAJ,OAAmBE,KAAvB,EAA8B;AAC7BqC,QAAAA,IAAI,CAACjE,IAAL,CAAUmE,GAAV;AACA;AACD;;AACD,SAAK,MAAMA,GAAX,IAAkBF,IAAlB,EAAwB;AACvB,WAAKG,MAAL,CAAYD,GAAZ;AACA;;AACD,WAAOF,IAAP;AACA;;AACDK,EAAAA,eAAe,CAAC1C,KAAD;AACd,UAAMqC,IAAI,GAAG,EAAb;;AACA,SAAK,MAAME,GAAX,IAAkB,KAAKD,IAAvB,EAA6B;AAC5B,UAAIC,GAAG,CAACzC,QAAJ,OAAmBE,KAAvB,EAA8B;AAC7BqC,QAAAA,IAAI,CAACjE,IAAL,CAAUmE,GAAV;AACA;AACD;;AACD,WAAOF,IAAP;AACA;;AACDM,EAAAA,MAAM;AACL,WAAO,KAAKL,IAAZ;AACA;;;AAGF;;;;;;MAKaM;AAGZxD,EAAAA,YAAYiD;SAFZJ,MAAM,IAAI3B,GAAJ;SACNuC,MAAM,IAAIpC,GAAJ;;AAEL,QAAI4B,IAAJ,EAAU;AACT,WAAK,MAAME,GAAX,IAAkBF,IAAlB,EAAwB;AACvB,aAAKjB,GAAL,CAASmB,GAAT;AACA;AACD;AACD;;AACDnB,EAAAA,GAAG,CAACmB,GAAD;AACF,UAAMvC,KAAK,GAAGuC,GAAG,CAACzC,QAAJ,EAAd;AACA,SAAK2C,WAAL,CAAiBzC,KAAjB;AAEA,SAAKiC,GAAL,CAASb,GAAT,CAAamB,GAAb;AACA,SAAKM,GAAL,CAASZ,GAAT,CAAajC,KAAb,EAAoBuC,GAApB;AACA;;AACDC,EAAAA,MAAM,CAACD,GAAD;AACL,SAAKN,GAAL,CAASE,MAAT,CAAgBI,GAAhB;AACA,SAAKM,GAAL,CAASV,MAAT,CAAgBI,GAAG,CAACzC,QAAJ,EAAhB;AACA;;AACD2C,EAAAA,WAAW,CAACzC,KAAD;AACV,UAAMuC,GAAG,GAAG,KAAKM,GAAL,CAAS7B,GAAT,CAAahB,KAAb,KAAuB,IAAnC;AACA,QAAIuC,GAAJ,EAAS,KAAKC,MAAL,CAAYD,GAAZ;AACT,WAAOA,GAAP;AACA;;AACDO,EAAAA,aAAa,CAAC9C,KAAD;AACZ,WAAO,KAAK6C,GAAL,CAAS7B,GAAT,CAAahB,KAAb,KAAuB,IAA9B;AACA;;AACD2C,EAAAA,MAAM;AACL,WAAO/B,KAAK,CAACC,IAAN,CAAW,KAAKoB,GAAhB,CAAP;AACA;;;AAGF;;;;MAGac;AAEZ3D,EAAAA,YAAYyD;SADZA,MAAiC;;AAEhC,QAAIA,GAAJ,EAAS;AACRG,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKJ,GAAnB,EAAwBA,GAAxB;AACA;AACD;;AACDZ,EAAAA,GAAG,CAAC/C,GAAD,EAAcc,KAAd;AACF,SAAK6C,GAAL,CAAS3D,GAAT,IAAgBc,KAAhB;AACA;;AACDmC,EAAAA,MAAM,CAACjD,GAAD;AACL,WAAO,KAAK2D,GAAL,CAAS3D,GAAT,CAAP;AACA;;AACD8B,EAAAA,GAAG,CAAC9B,GAAD;AACF,WAAO,KAAK2D,GAAL,CAAS3D,GAAT,KAAiB,IAAxB;AACA;;AACDgE,EAAAA,IAAI;AACH,WAAOF,MAAM,CAACE,IAAP,CAAY,KAAKL,GAAjB,CAAP;AACA;;AACDF,EAAAA,MAAM;AACL,WAAOK,MAAM,CAACL,MAAP,CAAc,KAAKE,GAAnB,CAAP;AACA;;;;MCrFWM,WAAW,GAAGC,MAAM,CAAC,YAAD;MACpBC,cAAc,GAAGD,MAAM,CAAC,eAAD;AAEpC;;;;MAGsBE,kBAAsD1F;AAG3E;;;;;AAMA;;;;;;;AAQA;;;;;;;;;AAWAwB,EAAAA,YAAYmE;AACX;SA5BO9D,YAAY;SAMD8D;SAQCJ;SAWAE;AAInB,SAAKE,KAAL,GAAaA,KAAb;AACA,SAAKF,cAAL,IAAuB,IAAI/C,GAAJ,EAAvB;AACA,SAAK6C,WAAL,IAAoB,KAAKK,iBAAL,EAApB;AACA;AAED;;;;;;;;;;;;AAUUC,EAAAA,WAAW;AACpB,WAAO,EAAP;AACA;AAED;;;;;;;;;;;AASQD,EAAAA,iBAAiB;AACxB,UAAME,iBAAiB,GAAG,KAAKD,WAAL,EAA1B;AACA,UAAM3B,UAAU,GAAG,EAAnB;;AACA,SAAK,MAAM5C,GAAX,IAAkBwE,iBAAlB,EAAqC;AACpC,YAAMC,KAAK,GAAGD,iBAAiB,CAACxE,GAAD,CAA/B,CADoC;AAGpC;;AACA,UAAIyE,KAAK,YAAYL,SAArB,EAAgC;AAC/B,cAAMf,GAAG,GAAG,KAAKgB,KAAL,CAAW7B,WAAX,CAAuBxC,GAAvB,EAA4B,IAA5B,EAAkCyE,KAAlC,CAAZ;;AACA,aAAKN,cAAL,EAAqBjC,GAArB,CAAyBlC,GAAzB;AACA4C,QAAAA,UAAU,CAAC5C,GAAD,CAAV,GAAkBqD,GAAlB;AACA,OAJD,MAIO;AACNT,QAAAA,UAAU,CAAC5C,GAAD,CAAV,GAAkByE,KAAlB;AACA;AACD;;AACD,WAAO7B,UAAP;AACA;AAED;;;AACOpC,EAAAA,SAAS,CAACkE,KAAD;AACf,WAAO,KAAKL,KAAL,KAAeK,KAAK,CAACL,KAA5B;AACA;AAED;;;AACOpD,EAAAA,UAAU;AAChB,WAAO,KAAKV,SAAZ;AACA;AAED;;;;;;;AAKOR,EAAAA,OAAO;AACb,QAAI,KAAKQ,SAAT,EAAoB;AACpB,SAAK8D,KAAL,CAAWlC,cAAX,CAA0B,IAA1B,EAAgCwC,OAAhC,CAAyC1C,IAAD,IAAUA,IAAI,CAAClC,OAAL,EAAlD;AACA,SAAKsE,KAAL,CAAW/B,iBAAX,CAA6B,IAA7B;AACA,SAAK/B,SAAL,GAAiB,IAAjB;AACA,SAAKhB,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE;AAAR,KAAnB;AACA;AAED;;;;;;;AAKO+F,EAAAA,MAAM;AACZ,SAAKP,KAAL,CAAW/B,iBAAX,CAA6B,IAA7B;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMOuC,EAAAA,IAAI,CAACC,SAAD,EAAuBC,SAAvB;AACV,SAAK,MAAMC,SAAX,IAAwB,KAAKf,WAAL,CAAxB,EAA2C;AAC1C,YAAMQ,KAAK,GAAG,KAAKR,WAAL,EAAkBe,SAAlB,CAAd;;AACA,UAAIP,KAAK,YAAYxE,SAArB,EAAgC;AAC/B,cAAMoD,GAAG,GAAGoB,KAAZ;;AACA,YAAIpB,GAAG,CAACzC,QAAJ,OAAmBkE,SAAvB,EAAkC;AACjC,eAAKG,MAAL,CAAYD,SAAZ,EAA8BD,SAA9B,EAAyC1B,GAAG,CAACtC,aAAJ,EAAzC;AACA;AACD,OALD,MAKO,IAAI0D,KAAK,YAAYvB,OAArB,EAA8B;AACpC,aAAK,MAAMG,GAAX,IAAkBoB,KAAK,CAACjB,eAAN,CAAsBsB,SAAtB,CAAlB,EAAoD;AACnD,gBAAMI,aAAa,GAAG7B,GAAG,CAACtC,aAAJ,EAAtB;AACA,eAAKoE,SAAL,CAAeH,SAAf,EAAiCF,SAAjC;AACA,eAAKM,MAAL,CAAYJ,SAAZ,EAA8BD,SAA9B,EAAgDG,aAAhD;AACA;AACD,OANM,MAMA,IAAIT,KAAK,YAAYf,MAArB,EAA6B;AACnC,cAAML,GAAG,GAAGoB,KAAK,CAACb,aAAN,CAAoBkB,SAApB,CAAZ;;AACA,YAAIzB,GAAJ,EAAS;AACR,gBAAM6B,aAAa,GAAG7B,GAAG,CAACtC,aAAJ,EAAtB;AACA,eAAKoE,SAAL,CAAeH,SAAf,EAAiCF,SAAjC;AACA,eAAKM,MAAL,CAAYJ,SAAZ,EAA8BD,SAA9B,EAAgDG,aAAhD;AACA;AACD,OAPM,MAOA,IAAIT,KAAK,YAAYZ,MAArB,EAA6B;AACnC,aAAK,MAAM7D,GAAX,IAAkByE,KAAK,CAACT,IAAN,EAAlB,EAAgC;AAC/B,gBAAMX,GAAG,GAAGoB,KAAK,CAAC3C,GAAN,CAAU9B,GAAV,CAAZ;;AACA,cAAIqD,GAAG,CAACzC,QAAJ,OAAmBkE,SAAvB,EAAkC;AACjC,iBAAKO,SAAL,CAAeL,SAAf,EAAiChF,GAAjC,EAAsC+E,SAAtC,EAAwD1B,GAAG,CAACtC,aAAJ,EAAxD;AACA;AACD;AACD;AACD;;AACD,WAAO,IAAP;AACA;AAED;;;;AAIA;;;AACUe,EAAAA,GAAG,CAAoCkD,SAApC;AACZ,WAAO,KAAKf,WAAL,EAAkBe,SAAlB,CAAP;AACA;AAED;;;AACUjC,EAAAA,GAAG,CAAoCiC,SAApC,EAAkDP,KAAlD;AACX,SAAKR,WAAL,EAAkBe,SAAlB,IAAiDP,KAAjD;AACD,WAAO,KAAKlF,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBmG,MAAAA;AAAlB,KAAnB,CAAP;AACA;AAED;;;;AAIA;;;AACUM,EAAAA,MAAM,CAAgCN,SAAhC;AACf,UAAM3B,GAAG,GAAG,KAAKY,WAAL,EAAkBe,SAAlB,CAAZ;AACA,WAAO3B,GAAG,GAAIA,GAAG,CAACzC,QAAJ,EAAJ,GAAmD,IAA7D;AACA;AAED;;;AACUqE,EAAAA,MAAM,CACfD,SADe,EAEfP,KAFe,EAGf7B,UAHe;AAKf,QAAI,KAAKuB,cAAL,EAAqBrB,GAArB,CAAyBkC,SAAzB,CAAJ,EAAmD;AAClD,YAAM,IAAIvE,KAAJ,2CAAoDuE,aAApD,CAAN;AACA;;AAED,UAAMO,OAAO,GAAG,KAAKtB,WAAL,EAAkBe,SAAlB,CAAhB;AACA,QAAIO,OAAJ,EAAaA,OAAO,CAACxF,OAAR;;AAEb,QAAI,CAAC0E,KAAL,EAAY,OAAO,IAAP;;AAEZ,UAAMpB,GAAG,GAAG,KAAKgB,KAAL,CAAW7B,WAAX,CAAuBwC,SAAvB,EAA4C,IAA5C,EAAkDP,KAAlD,EAAyD7B,UAAzD,CAAZ;;AACC,SAAKqB,WAAL,EAAkBe,SAAlB,IAAuC3B,GAAvC;AAED,WAAO,KAAK9D,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBmG,MAAAA;AAAlB,KAAnB,CAAP;AACA;AAED;;;;AAIA;;;AACUQ,EAAAA,QAAQ,CACjBR,SADiB;AAGjB,UAAM7B,IAAI,GAAG,KAAKsC,aAAL,CAAmBT,SAAnB,CAAb;AACA,WAAO7B,IAAI,CAACM,MAAL,GAAcE,GAAd,CAAmBN,GAAD,IAASA,GAAG,CAACzC,QAAJ,EAA3B,CAAP;AACA;AAED;;;AACUwE,EAAAA,MAAM,CACfJ,SADe,EAEfP,KAFe,EAGf7B,UAHe;AAKf,UAAMS,GAAG,GAAG,KAAKgB,KAAL,CAAW7B,WAAX,CAAuBwC,SAAvB,EAA4C,IAA5C,EAAkDP,KAAlD,EAAyD7B,UAAzD,CAAZ;;AACA,UAAMO,IAAI,GAAG,KAAKsC,aAAL,CAAmBT,SAAnB,CAAb;AACA7B,IAAAA,IAAI,CAACjB,GAAL,CAASmB,GAAT;AAEA,WAAO,KAAK9D,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBmG,MAAAA;AAAlB,KAAnB,CAAP;AACA;AAED;;;AACUG,EAAAA,SAAS,CAClBH,SADkB,EAElBP,KAFkB;AAIlB,UAAMtB,IAAI,GAAG,KAAKsC,aAAL,CAAmBT,SAAnB,CAAb;;AAEA,QAAI7B,IAAI,YAAYD,OAApB,EAA6B;AAC5B,WAAK,MAAMG,GAAX,IAAkBF,IAAI,CAACK,eAAL,CAAqBiB,KAArB,CAAlB,EAA+C;AAC9CpB,QAAAA,GAAG,CAACtD,OAAJ;AACA;AACD,KAJD,MAIO;AACN,YAAMsD,GAAG,GAAGF,IAAI,CAACS,aAAL,CAAmBa,KAAnB,CAAZ;AACA,UAAIpB,GAAJ,EAASA,GAAG,CAACtD,OAAJ;AACT;;AAED,WAAO,IAAP;AACA;AAED;;;AACQ0F,EAAAA,aAAa,CAA6DT,SAA7D;AACpB,UAAM7B,IAAI,GAAG,KAAKc,WAAL,EAAkBe,SAAlB,CAAb;;AAEA,QAAI7B,IAAI,YAAYD,OAAhB,IAA2BC,IAAI,YAAYO,MAA/C,EAAuD;AACtD,aAAOP,IAAP;AACA;;;AAGD,UAAM,IAAI1C,KAAJ,8CAAuDuE,YAAvD,CAAN;AACA;AAED;;;;AAIA;;;AACUU,EAAAA,cAAc,CAAmCV,SAAnC;AACvB,WAAO,KAAKW,YAAL,CAAkBX,SAAlB,EAA6BhB,IAA7B,EAAP;AACA;AAED;;;AACU4B,EAAAA,gBAAgB,CACzBZ,SADyB;AAGzB,WAAO,KAAKW,YAAL,CAAkBX,SAAlB,EACLvB,MADK,GAELE,GAFK,CAEAN,GAAD,IAAcA,GAAG,CAACzC,QAAJ,EAFb,CAAP;AAGA;AAED;;;AACUiF,EAAAA,SAAS,CAClBb,SADkB,EAElBhF,GAFkB;AAIlB,UAAM8F,MAAM,GAAG,KAAKH,YAAL,CAAkBX,SAAlB,CAAf;AACA,UAAM3B,GAAG,GAAGyC,MAAM,CAAChE,GAAP,CAAW9B,GAAX,CAAZ;AACA,WAAOqD,GAAG,GAAIA,GAAG,CAACzC,QAAJ,EAAJ,GAA2B,IAArC;AACA;AAED;;;AACUyE,EAAAA,SAAS,CAClBL,SADkB,EAElBhF,GAFkB,EAGlByE,KAHkB,EAIlBsB,QAJkB;AAMlB,UAAMD,MAAM,GAAG,KAAKH,YAAL,CAAkBX,SAAlB,CAAf;AAEA,UAAMO,OAAO,GAAGO,MAAM,CAAChE,GAAP,CAAW9B,GAAX,CAAhB;AACA,QAAIuF,OAAJ,EAAaA,OAAO,CAACxF,OAAR;;AAEb,QAAI,CAAC0E,KAAL,EAAY,OAAO,IAAP;AAEZsB,IAAAA,QAAQ,GAAGjC,MAAM,CAACC,MAAP,CAAcgC,QAAQ,IAAI,EAA1B,EAA8B;AAAE/F,MAAAA,GAAG,EAAEA;AAAP,KAA9B,CAAX;;AACA,UAAMqD,GAAG,GAAG,KAAKgB,KAAL,CAAW7B,WAAX,CAAuBwC,SAAvB,EAA4C,IAA5C,EAAkDP,KAAlD,eAA8DsB,QAA9D;AAAwE/F,MAAAA;AAAxE,OAAZ;;AACA8F,IAAAA,MAAM,CAAC/C,GAAP,CAAW/C,GAAX,EAA0BqD,GAA1B;AAEA,WAAO,KAAK9D,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBmG,MAAAA,SAAlB;AAA6BhF,MAAAA;AAA7B,KAAnB,CAAP;AACA;AAED;;;AACQ2F,EAAAA,YAAY,CAAmCX,SAAnC;AACnB,UAAMrB,GAAG,GAAG,KAAKM,WAAL,EAAkBe,SAAlB,CAAZ;;AAEA,QAAIrB,GAAG,YAAYE,MAAnB,EAA2B;AAC1B,aAAOF,GAAP;AACA;;;AAGD,UAAM,IAAIlD,KAAJ,mCAA4CuE,YAA5C,CAAN;AACA;AAED;;;;AAIA;;;;;;AAIAzF,EAAAA,aAAa,CAACC,KAAD;AACZ,UAAMD,aAAN,cAAyBC,KAAzB;AAAgCwG,MAAAA,MAAM,EAAE;AAAxC;AACA,SAAK3B,KAAL,CAAW9E,aAAX,cAA8BC,KAA9B;AAAqCwG,MAAAA,MAAM,EAAE,IAA7C;AAAmDnH,MAAAA,IAAI,UAAUW,KAAK,CAACX;AAAvE;AACA,WAAO,IAAP;AACA;AAED;;;;AAIA;;;AACAmC,EAAAA,WAAW,CAETqC,GAFS;AAGV,UAAM2B,SAAS,GAAG3B,GAAG,CAAC3C,OAAJ,EAAlB;;AACA,QAAI,KAAKuD,WAAL,EAAkBe,SAAlB,MAAiC3B,GAArC,EAA0C;AACxC,WAAKY,WAAL,EAAkBe,SAAlB,IAAqE,IAArE,CADwC;;AAGzC,UAAI,KAAKb,cAAL,EAAqBrB,GAArB,CAAyBkC,SAAzB,CAAJ,EAAmD3B,GAAG,CAACzC,QAAJ,GAAeb,OAAf;AACnD,KAJD,MAIO,IAAI,KAAKkE,WAAL,EAAkBe,SAAlB,aAAwC9B,OAA5C,EAAqD;AAC1D,WAAKe,WAAL,EAAkBe,SAAlB,EAAoE1B,MAApE,CAA2ED,GAA3E;AACD,KAFM,MAEA,IAAI,KAAKY,WAAL,EAAkBe,SAAlB,aAAwCtB,MAA5C,EAAoD;AACzD,WAAKO,WAAL,EAAkBe,SAAlB,EAAkE1B,MAAlE,CAAyED,GAAzE;AACD,KAFM,MAEA,IAAI,KAAKY,WAAL,EAAkBe,SAAlB,aAAwCnB,MAA5C,EAAoD;AAC1D,YAAMiC,MAAM,GAAG,KAAK7B,WAAL,EAAkBe,SAAlB,CAAf;;AACA,WAAK,MAAMhF,GAAX,IAAkB8F,MAAM,CAAC9B,IAAP,EAAlB,EAAiC;AAChC,YAAI8B,MAAM,CAAChE,GAAP,CAAW9B,GAAX,MAAoBqD,GAAxB,EAA6B;AAC5ByC,UAAAA,MAAM,CAAC7C,MAAP,CAAcjD,GAAd;AACA;AACD;AACD,KAPM,MAOA;AACN;AACA;;AACD,SAAKqE,KAAL,CAAWrB,YAAX,CAAwBK,GAAxB;;AACA,SAAK9D,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBmG,MAAAA;AAAlB,KAAnB;AACA;;;;;;"}