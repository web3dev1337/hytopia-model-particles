{"version":3,"file":"functions.modern.js","sources":["../src/utils.ts","../src/center.ts","../src/list-node-scenes.ts","../src/clear-node-parent.ts","../../../node_modules/gl-matrix/esm/common.js","../../../node_modules/gl-matrix/esm/mat4.js","../../../node_modules/gl-matrix/esm/mat3.js","../../../node_modules/gl-matrix/esm/vec3.js","../src/dedup.ts","../../../node_modules/gl-matrix/esm/vec4.js","../src/get-texture-color-space.ts","../src/list-texture-info.ts","../src/list-texture-slots.ts","../src/prune.ts","../src/hash-table.ts","../src/get-vertex-count.ts","../src/compact-primitive.ts","../src/weld.ts","../src/transform-primitive.ts","../src/transform-mesh.ts","../src/clear-node-transform.ts","../src/convert-primitive-mode.ts","../src/dequantize.ts","../src/document-utils.ts","../src/draco.ts","../src/flatten.ts","../src/get-bounds.ts","../src/inspect.ts","../src/instance.ts","../src/join-primitives.ts","../src/join.ts","../src/list-texture-channels.ts","../src/reorder.ts","../src/sort-primitive-weights.ts","../src/quantize.ts","../src/meshopt.ts","../src/metal-rough.ts","../src/unweld.ts","../src/normals.ts","../src/palette.ts","../src/partition.ts","../../../node_modules/keyframe-resample/dist/keyframe-resample-browser.modern.js","../src/resample.ts","../src/sequence.ts","../src/simplify.ts","../src/sparse.ts","../src/texture-compress.ts","../src/tangents.ts","../src/uninstance.ts","../src/unlit.ts","../src/unpartition.ts","../src/vertex-color-space.ts"],"sourcesContent":["import type { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport {\n\tAccessor,\n\tDocument,\n\tGLTF,\n\tPrimitive,\n\tProperty,\n\tPropertyType,\n\tTexture,\n\tTransform,\n\tTransformContext,\n\tvec2,\n} from '@gltf-transform/core';\n\nconst { POINTS, LINES, LINE_STRIP, LINE_LOOP, TRIANGLES, TRIANGLE_STRIP, TRIANGLE_FAN } = Primitive.Mode;\n\n/**\n * Prepares a function used in an {@link Document#transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n * @hidden\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\n/** @hidden */\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/**\n * Performs a shallow merge on an 'options' object and a 'defaults' object.\n * Equivalent to `{...defaults, ...options}` _except_ that `undefined` values\n * in the 'options' object are ignored.\n *\n * @hidden\n */\nexport function assignDefaults<Defaults, Options>(defaults: Defaults, options: Options): Defaults & Options {\n\tconst result = { ...defaults } as Defaults & Partial<Options>;\n\tfor (const key in options) {\n\t\tif (options[key] !== undefined) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tresult[key] = options[key] as any;\n\t\t}\n\t}\n\treturn result as Defaults & Options;\n}\n\n/**\n * Maps pixels from source to target textures, with a per-pixel callback.\n * @hidden\n */\nexport async function rewriteTexture(\n\tsource: Texture,\n\ttarget: Texture,\n\tfn: (pixels: NdArray, i: number, j: number) => void,\n): Promise<Texture | null> {\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor (let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor (let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\n/** @hidden */\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn indices ? indices.getCount() : position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices ? indices.getCount() / 2 : position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn indices ? indices.getCount() : position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn indices ? indices.getCount() - 1 : position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices ? indices.getCount() / 3 : position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn indices ? indices.getCount() - 2 : position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\n/** @hidden */\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n\n/** @hidden */\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nconst _longFormatter = new Intl.NumberFormat(undefined, { maximumFractionDigits: 0 });\n\n/** @hidden */\nexport function formatLong(x: number): string {\n\treturn _longFormatter.format(x);\n}\n\n/** @hidden */\nexport function formatDelta(a: number, b: number, decimals = 2): string {\n\tconst prefix = a > b ? '–' : '+';\n\tconst suffix = '%';\n\treturn prefix + ((Math.abs(a - b) / a) * 100).toFixed(decimals) + suffix;\n}\n\n/** @hidden */\nexport function formatDeltaOp(a: number, b: number) {\n\treturn `${formatLong(a)} → ${formatLong(b)} (${formatDelta(a, b)})`;\n}\n\n/**\n * Returns a list of all unique vertex attributes on the given primitive and\n * its morph targets.\n * @hidden\n */\nexport function deepListAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n\n/** @hidden */\nexport function deepSwapAttribute(prim: Primitive, src: Accessor, dst: Accessor): void {\n\tprim.swap(src, dst);\n\tfor (const target of prim.listTargets()) {\n\t\ttarget.swap(src, dst);\n\t}\n}\n\n/** @hidden */\nexport function shallowEqualsArray(a: ArrayLike<unknown> | null, b: ArrayLike<unknown> | null) {\n\tif (a == null && b == null) return true;\n\tif (a == null || b == null) return false;\n\tif (a.length !== b.length) return false;\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) return false;\n\t}\n\treturn true;\n}\n\n/** Clones an {@link Accessor} without creating a copy of its underlying TypedArray data. */\nexport function shallowCloneAccessor(document: Document, accessor: Accessor): Accessor {\n\treturn document\n\t\t.createAccessor(accessor.getName())\n\t\t.setArray(accessor.getArray())\n\t\t.setType(accessor.getType())\n\t\t.setBuffer(accessor.getBuffer())\n\t\t.setNormalized(accessor.getNormalized())\n\t\t.setSparse(accessor.getSparse());\n}\n\n/** @hidden */\nexport function createIndices(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\tconst array = createIndicesEmpty(count, maxIndex);\n\tfor (let i = 0; i < array.length; i++) array[i] = i;\n\treturn array;\n}\n\n/** @hidden */\nexport function createIndicesEmpty(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\treturn maxIndex <= 65534 ? new Uint16Array(count) : new Uint32Array(count);\n}\n\n/** @hidden */\nexport function isUsed(prop: Property): boolean {\n\treturn prop.listParents().some((parent) => parent.propertyType !== PropertyType.ROOT);\n}\n\n/** @hidden */\nexport function isEmptyObject(object: Record<string, unknown>): boolean {\n\tfor (const key in object) return false;\n\treturn true;\n}\n\n/**\n * Creates a unique key associated with the structure and draw call characteristics of\n * a {@link Primitive}, independent of its vertex content. Helper method, used to\n * identify candidate Primitives for joining.\n * @hidden\n */\nexport function createPrimGroupKey(prim: Primitive): string {\n\tconst document = Document.fromGraph(prim.getGraph())!;\n\tconst material = prim.getMaterial();\n\tconst materialIndex = document.getRoot().listMaterials().indexOf(material!);\n\tconst mode = BASIC_MODE_MAPPING[prim.getMode()];\n\tconst indices = !!prim.getIndices();\n\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.sort()\n\t\t.map((semantic) => {\n\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\tconst componentType = attribute.getComponentType();\n\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t})\n\t\t.join('+');\n\n\tconst targets = prim\n\t\t.listTargets()\n\t\t.map((target) => {\n\t\t\treturn target\n\t\t\t\t.listSemantics()\n\t\t\t\t.sort()\n\t\t\t\t.map((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\t\t\tconst componentType = attribute.getComponentType();\n\t\t\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t\t\t})\n\t\t\t\t.join('+');\n\t\t})\n\t\t.join('~');\n\n\treturn `${materialIndex}|${mode}|${indices}|${attributes}|${targets}`;\n}\n\n/**\n * Scales `size` NxN dimensions to fit within `limit` NxN dimensions, without\n * changing aspect ratio. If `size` <= `limit` in all dimensions, returns `size`.\n * @hidden\n */\nexport function fitWithin(size: vec2, limit: vec2): vec2 {\n\tconst [maxWidth, maxHeight] = limit;\n\tconst [srcWidth, srcHeight] = size;\n\n\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) return size;\n\n\tlet dstWidth = srcWidth;\n\tlet dstHeight = srcHeight;\n\n\tif (dstWidth > maxWidth) {\n\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\tdstWidth = maxWidth;\n\t}\n\n\tif (dstHeight > maxHeight) {\n\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\tdstHeight = maxHeight;\n\t}\n\n\treturn [dstWidth, dstHeight];\n}\n\ntype ResizePreset = 'nearest-pot' | 'ceil-pot' | 'floor-pot';\n\n/**\n * Scales `size` NxN dimensions to the specified power of two.\n * @hidden\n */\nexport function fitPowerOfTwo(size: vec2, method: ResizePreset): vec2 {\n\tif (isPowerOfTwo(size[0]) && isPowerOfTwo(size[1])) {\n\t\treturn size;\n\t}\n\n\tswitch (method) {\n\t\tcase 'nearest-pot':\n\t\t\treturn size.map(nearestPowerOfTwo) as vec2;\n\t\tcase 'ceil-pot':\n\t\t\treturn size.map(ceilPowerOfTwo) as vec2;\n\t\tcase 'floor-pot':\n\t\t\treturn size.map(floorPowerOfTwo) as vec2;\n\t}\n}\n\nfunction isPowerOfTwo(value: number): boolean {\n\tif (value <= 2) return true;\n\treturn (value & (value - 1)) === 0 && value !== 0;\n}\n\nfunction nearestPowerOfTwo(value: number): number {\n\tif (value <= 4) return 4;\n\n\tconst lo = floorPowerOfTwo(value);\n\tconst hi = ceilPowerOfTwo(value);\n\n\tif (hi - value > value - lo) return lo;\n\treturn hi;\n}\n\nexport function floorPowerOfTwo(value: number): number {\n\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n}\n\nexport function ceilPowerOfTwo(value: number): number {\n\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\n/**\n * Mapping from any glTF primitive mode to its equivalent basic mode, as returned by\n * {@link convertPrimitiveMode}.\n * @hidden\n */\nexport const BASIC_MODE_MAPPING = {\n\t[POINTS]: POINTS,\n\t[LINES]: LINES,\n\t[LINE_STRIP]: LINES,\n\t[LINE_LOOP]: LINES,\n\t[TRIANGLES]: TRIANGLES,\n\t[TRIANGLE_STRIP]: TRIANGLES,\n\t[TRIANGLE_FAN]: TRIANGLES,\n} as Record<GLTF.MeshPrimitiveMode, GLTF.MeshPrimitiveMode>;\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { getBounds } from '@gltf-transform/core';\nimport { assignDefaults, createTransform } from './utils.js';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = { pivot: 'center' };\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n *\n * @category Transforms\n */\nexport function center(_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = assignDefaults(CENTER_DEFAULTS, _options);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot()\n\t\t\t.listScenes()\n\t\t\t.forEach((scene, index) => {\n\t\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\t\tlet pivot: vec3;\n\t\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\t\tconst bbox = getBounds(scene);\n\t\t\t\t\tpivot = [\n\t\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t\t];\n\t\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t\t} else {\n\t\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\t\tif (isAnimated) {\n\t\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\t\tscene.addChild(offsetNode);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\t\tchild.setTranslation([t[0] + offset[0], t[1] + offset[1], t[2] + offset[2]]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Node, Scene } from '@gltf-transform/core';\n\n/**\n * Finds the parent {@link Scene Scenes} associated with the given {@link Node}.\n * In most cases a Node is associated with only one Scene, but it is possible\n * for a Node to be located in two or more Scenes, or none at all.\n *\n * Example:\n *\n * ```typescript\n * import { listNodeScenes } from '@gltf-transform/functions';\n *\n * const node = document.getRoot().listNodes()\n *  .find((node) => node.getName() === 'MyNode');\n *\n * const scenes = listNodeScenes(node);\n * ```\n */\nexport function listNodeScenes(node: Node): Scene[] {\n\tconst visited = new Set<Node>();\n\n\tlet child = node;\n\tlet parent: Node | null;\n\n\twhile ((parent = child.getParentNode() as Node | null)) {\n\t\tif (visited.has(parent)) {\n\t\t\tthrow new Error('Circular dependency in scene graph.');\n\t\t}\n\t\tvisited.add(parent);\n\t\tchild = parent;\n\t}\n\n\treturn child.listParents().filter((parent) => parent instanceof Scene) as Scene[];\n}\n","import type { Node } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/**\n * Clears the parent of the given {@link Node}, leaving it attached\n * directly to its {@link Scene}. Inherited transforms will be applied\n * to the Node. This operation changes the Node's local transform,\n * but leaves its world transform unchanged.\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeParent } from '@gltf-transform/functions';\n *\n * scene.traverse((node) => { ... }); // Scene → … → Node\n *\n * clearNodeParent(node);\n *\n * scene.traverse((node) => { ... }); // Scene → Node\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeParent(node: Node): Node {\n\tconst scenes = listNodeScenes(node);\n\tconst parent = node.getParentNode();\n\n\tif (!parent) return node;\n\n\t// Apply inherited transforms to local matrix. Skinned meshes are not affected\n\t// by the node parent's transform, and can be ignored. Updates to IBMs and TRS\n\t// animations are out of scope in this context.\n\tnode.setMatrix(node.getWorldMatrix());\n\n\t// Add to Scene roots.\n\tparent.removeChild(node);\n\tfor (const scene of scenes) scene.addChild(node);\n\n\treturn node;\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import {\n\tAccessor,\n\tBufferUtils,\n\tDocument,\n\tMaterial,\n\tMesh,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tSkin,\n\tTexture,\n\tTransform,\n} from '@gltf-transform/core';\nimport { assignDefaults, createTransform, shallowEqualsArray } from './utils.js';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** Keep properties with unique names, even if they are duplicates. */\n\tkeepUniqueNames?: boolean;\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tkeepUniqueNames: false,\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.SKIN,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n *\n * @category Transforms\n */\nexport function dedup(_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = assignDefaults(DEDUP_DEFAULTS, _options);\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst logger = document.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(document);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(document, options);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(document, options);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(document, options);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) dedupSkins(document, options);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dedupAccessors(document: Document): void {\n\tconst logger = document.getLogger();\n\n\t// Find all accessors used for mesh and animation data.\n\tconst indicesMap = new Map<string, Set<Accessor>>();\n\tconst attributeMap = new Map<string, Set<Accessor>>();\n\tconst inputMap = new Map<string, Set<Accessor>>();\n\tconst outputMap = new Map<string, Set<Accessor>>();\n\n\tconst meshes = document.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => hashAccessor(accessor, attributeMap));\n\t\t\thashAccessor(primitive.getIndices(), indicesMap);\n\t\t});\n\t});\n\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\thashAccessor(sampler.getInput(), inputMap);\n\t\t\thashAccessor(sampler.getOutput(), outputMap);\n\t\t}\n\t}\n\n\t// Add accessor to the appropriate hash group. Hashes are _non-unique_,\n\t// intended to quickly compare everything accept the underlying array.\n\tfunction hashAccessor(accessor: Accessor | null, group: Map<string, Set<Accessor>>): void {\n\t\tif (!accessor) return;\n\n\t\tconst hash = [\n\t\t\taccessor.getCount(),\n\t\t\taccessor.getType(),\n\t\t\taccessor.getComponentType(),\n\t\t\taccessor.getNormalized(),\n\t\t\taccessor.getSparse(),\n\t\t].join(':');\n\n\t\tlet hashSet = group.get(hash);\n\t\tif (!hashSet) group.set(hash, (hashSet = new Set<Accessor>()));\n\t\thashSet.add(accessor);\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[], duplicates: Map<Accessor, Accessor>): void {\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicates.has(a)) continue;\n\n\t\t\tfor (let j = i + 1; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t\t// Just compare the arrays — everything else was covered by the\n\t\t\t\t// hash. Comparing uint8 views is faster than comparing the\n\t\t\t\t// original typed arrays.\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicates.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlet total = 0;\n\tconst duplicates = new Map<Accessor, Accessor>();\n\tfor (const group of [attributeMap, indicesMap, inputMap, outputMap]) {\n\t\tfor (const hashGroup of group.values()) {\n\t\t\ttotal += hashGroup.size;\n\t\t\tdetectDuplicates(Array.from(hashGroup), duplicates);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${total} accessors.`);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicates.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicates.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicates.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicates.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicates.has(input)) {\n\t\t\t\tsampler.swap(input, duplicates.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicates.has(output)) {\n\t\t\t\tsampler.swap(output, duplicates.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\n\tArray.from(duplicates.keys()).forEach((accessor) => accessor.dispose());\n}\n\nfunction dedupMeshes(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor | Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tlet meshKey = '';\n\t\tif (options.keepUniqueNames) meshKey += src.getName() + ';';\n\t\tmeshKey += srcKeyItems.join(';');\n\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${numMeshes - uniqueMeshes.size} of ${numMeshes} meshes.`);\n}\n\nfunction dedupImages(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\t\t\tif (options.keepUniqueNames && a.getName() !== b.getName()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${root.listTextures().length} textures.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates = new Map<Material, Material>();\n\tconst modifierCache = new Map<Material, boolean>();\n\tconst skip = new Set<string>();\n\n\tif (!options.keepUniqueNames) {\n\t\tskip.add('name');\n\t}\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++) {\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\t\tif (hasModifier(a, modifierCache)) continue;\n\n\t\tfor (let j = i + 1; j < materials.length; j++) {\n\t\t\tconst b = materials[j];\n\n\t\t\tif (duplicates.has(b)) continue;\n\t\t\tif (hasModifier(b, modifierCache)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${materials.length} materials.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupSkins(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst skins = root.listSkins();\n\tconst duplicates = new Map<Skin, Skin>();\n\tconst skip = new Set(['joints']);\n\n\tif (!options.keepUniqueNames) {\n\t\tskip.add('name');\n\t}\n\n\tfor (let i = 0; i < skins.length; i++) {\n\t\tconst a = skins[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < skins.length; j++) {\n\t\t\tconst b = skins[j];\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// Check joints with shallow equality, not deep equality.\n\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RecursiveSkeletons\n\t\t\tif (a.equals(b, skip) && shallowEqualsArray(a.listJoints(), b.listJoints())) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${skins.length} skins.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(prim: Primitive | PrimitiveTarget, refs: Map<Accessor | Material, number>): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n\n/**\n * Detects dependencies modified by a parent reference, to conservatively prevent merging. When\n * implementing extensions like KHR_animation_pointer, the 'modifyChild' attribute should be added\n * to graph edges connecting the animation channel to the animated target property.\n *\n * NOTICE: Implementation is conservative, and could prevent merging two materials sharing the\n * same animated \"Clearcoat\" ExtensionProperty. While that scenario is possible for an in-memory\n * glTF Transform graph, valid glTF input files do not have that risk.\n */\nfunction hasModifier(prop: Property, cache: Map<Property, boolean>): boolean {\n\tif (cache.has(prop)) return cache.get(prop)!;\n\n\tconst graph = prop.getGraph();\n\tconst visitedNodes = new Set<Property>();\n\tconst edgeQueue = graph.listParentEdges(prop);\n\n\t// Search dependency subtree for 'modifyChild' attribute.\n\twhile (edgeQueue.length > 0) {\n\t\tconst edge = edgeQueue.pop()!;\n\t\tif (edge.getAttributes().modifyChild === true) {\n\t\t\tcache.set(prop, true);\n\t\t\treturn true;\n\t\t}\n\n\t\tconst child = edge.getChild();\n\t\tif (visitedNodes.has(child)) continue;\n\n\t\tfor (const childEdge of graph.listChildEdges(child)) {\n\t\t\tedgeQueue.push(childEdge);\n\t\t}\n\t}\n\n\tcache.set(prop, false);\n\treturn false;\n}\n","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import { Texture } from '@gltf-transform/core';\n\nconst SRGB_PATTERN = /color|emissive|diffuse/i;\n\n/**\n * Returns the color space (if any) implied by the {@link Material} slots to\n * which a texture is assigned, or null for non-color textures. If the texture\n * is not connected to any {@link Material}, this function will also return\n * null — any metadata in the image file will be ignored.\n *\n * Under current glTF specifications, only 'srgb' and non-color (null) textures\n * are used.\n *\n * Example:\n *\n * ```typescript\n * import { getTextureColorSpace } from '@gltf-transform/functions';\n *\n * const baseColorTexture = material.getBaseColorTexture();\n * const normalTexture = material.getNormalTexture();\n *\n * getTextureColorSpace(baseColorTexture); // → 'srgb'\n * getTextureColorSpace(normalTexture); // → null\n * ```\n */\nexport function getTextureColorSpace(texture: Texture): string | null {\n\tconst graph = texture.getGraph();\n\tconst edges = graph.listParentEdges(texture);\n\tconst isSRGB = edges.some((edge) => {\n\t\treturn edge.getAttributes().isColor || SRGB_PATTERN.test(edge.getName());\n\t});\n\treturn isSRGB ? 'srgb' : null;\n}\n","import { ExtensionProperty, Material, Property, Texture, TextureInfo } from '@gltf-transform/core';\n\n/**\n * Lists all {@link TextureInfo} definitions associated with a given\n * {@link Texture}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * // Find TextureInfo instances associated with the texture.\n * const results = listTextureInfo(texture);\n *\n * // Find which UV sets (TEXCOORD_0, TEXCOORD_1, ...) are required.\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfo(texture: Texture): TextureInfo[] {\n\tconst graph = texture.getGraph();\n\tconst results = new Set<TextureInfo>();\n\n\tfor (const textureEdge of graph.listParentEdges(texture)) {\n\t\tconst parent = textureEdge.getParent();\n\t\tconst name = textureEdge.getName() + 'Info';\n\n\t\tfor (const edge of graph.listChildEdges(parent)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (child instanceof TextureInfo && edge.getName() === name) {\n\t\t\t\tresults.add(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Array.from(results);\n}\n\n/**\n * Lists all {@link TextureInfo} definitions associated with any {@link Texture}\n * on the given {@link Material}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * const results = listTextureInfoByMaterial(material);\n *\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfoByMaterial(material: Material): TextureInfo[] {\n\tconst graph = material.getGraph();\n\tconst visited = new Set<Property>();\n\tconst results = new Set<TextureInfo>();\n\n\tfunction traverse(prop: Material | ExtensionProperty) {\n\t\tconst textureInfoNames = new Set<string>();\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tif (edge.getChild() instanceof Texture) {\n\t\t\t\ttextureInfoNames.add(edge.getName() + 'Info');\n\t\t\t}\n\t\t}\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (visited.has(child)) continue;\n\t\t\tvisited.add(child);\n\n\t\t\tif (child instanceof TextureInfo && textureInfoNames.has(edge.getName())) {\n\t\t\t\tresults.add(child);\n\t\t\t} else if (child instanceof ExtensionProperty) {\n\t\t\t\ttraverse(child);\n\t\t\t}\n\t\t}\n\t}\n\n\ttraverse(material);\n\treturn Array.from(results);\n}\n","import { Document, Texture } from '@gltf-transform/core';\n\n/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n *\n * ```js\n * const slots = listTextureSlots(texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n */\nexport function listTextureSlots(texture: Texture): string[] {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tconst root = document.getRoot();\n\tconst slots = texture\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.filter((edge) => edge.getParent() !== root)\n\t\t.map((edge) => edge.getName());\n\treturn Array.from(new Set(slots));\n}\n","import {\n\tAnimationChannel,\n\tColorUtils,\n\tDocument,\n\tExtensionProperty,\n\tGraph,\n\tILogger,\n\tMaterial,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tScene,\n\tTexture,\n\tTextureInfo,\n\tTransform,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { mul as mulVec3 } from 'gl-matrix/vec3';\nimport { add, create, len, mul, scale, sub } from 'gl-matrix/vec4';\nimport { NdArray } from 'ndarray';\nimport { getPixels } from 'ndarray-pixels';\nimport { getTextureColorSpace } from './get-texture-color-space.js';\nimport { listTextureInfoByMaterial } from './list-texture-info.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport { assignDefaults, createTransform, isEmptyObject } from './utils.js';\n\nconst NAME = 'prune';\n\nconst EPS = 3 / 255;\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n\t/** Whether to keep empty leaf nodes. */\n\tkeepLeaves?: boolean;\n\t/** Whether to keep unused vertex attributes, such as UVs without an assigned texture. */\n\tkeepAttributes?: boolean;\n\t/** Whether to keep redundant mesh indices, where vertex count equals index count. */\n\tkeepIndices?: boolean;\n\t/** Whether to keep single-color textures that can be converted to material factors. */\n\tkeepSolidTextures?: boolean;\n\t/** Whether custom extras should prevent pruning a property. */\n\tkeepExtras?: boolean;\n}\n\nexport const PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t],\n\tkeepLeaves: false,\n\tkeepAttributes: false,\n\tkeepIndices: false,\n\tkeepSolidTextures: false,\n\tkeepExtras: false,\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```javascript\n * import { PropertyType } from '@gltf-transform/core';\n * import { prune } from '@gltf-transform/functions';\n *\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(\n * \tprune({\n * \t\tpropertyTypes: [PropertyType.MATERIAL],\n * \t\tkeepExtras: true\n * \t})\n * );\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * By default, pruning will aggressively remove most unused resources. Use\n * {@link PruneOptions} to limit what is considered for pruning.\n *\n * @category Transforms\n */\nexport function prune(_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\tconst options = assignDefaults(PRUNE_DEFAULTS, _options);\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tconst keepExtras = options.keepExtras;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\t\tconst graph = document.getGraph();\n\n\t\tconst counter = new DisposeCounter();\n\n\t\tconst onDispose = (event: { target: Property }) => counter.dispose(event.target);\n\t\t// TODO(cleanup): Publish GraphEvent / GraphEventListener types from 'property-graph'.\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tgraph.addEventListener('node:dispose', onDispose as any);\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\t// Prune empty Meshes.\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tif (mesh.listPrimitives().length > 0) continue;\n\t\t\t\tmesh.dispose();\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.NODE)) {\n\t\t\tif (!options.keepLeaves) {\n\t\t\t\tfor (const scene of root.listScenes()) {\n\t\t\t\t\tnodeTreeShake(graph, scene, keepExtras);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const node of root.listNodes()) {\n\t\t\t\ttreeShake(node, keepExtras);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.SKIN)) {\n\t\t\tfor (const skin of root.listSkins()) {\n\t\t\t\ttreeShake(skin, keepExtras);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\ttreeShake(mesh, keepExtras);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.CAMERA)) {\n\t\t\tfor (const camera of root.listCameras()) {\n\t\t\t\ttreeShake(camera, keepExtras);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE, keepExtras);\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET, keepExtras);\n\t\t}\n\n\t\t// Prune unused vertex attributes.\n\t\tif (!options.keepAttributes && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tconst materialPrims = new Map<Material, Set<Primitive>>();\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\t\tif (!material) continue;\n\n\t\t\t\t\tconst required = listRequiredSemantics(document, prim, material);\n\t\t\t\t\tconst unused = listUnusedSemantics(prim, required);\n\t\t\t\t\tpruneAttributes(prim, unused);\n\t\t\t\t\tprim.listTargets().forEach((target) => pruneAttributes(target, unused));\n\t\t\t\t\tmaterialPrims.has(material)\n\t\t\t\t\t\t? materialPrims.get(material)!.add(prim)\n\t\t\t\t\t\t: materialPrims.set(material, new Set([prim]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const [material, prims] of materialPrims) {\n\t\t\t\tshiftTexCoords(material, Array.from(prims));\n\t\t\t}\n\t\t}\n\n\t\t// Prune unused mesh indices.\n\t\tif (!options.keepIndices && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tpruneIndices(prim);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.has(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim, keepExtras);\n\t\t\t\t\tsamplers.forEach((sampler) => treeShake(sampler, keepExtras));\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach((sampler) => treeShake(sampler, keepExtras));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) {\n\t\t\troot.listMaterials().forEach((material) => treeShake(material, keepExtras));\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) {\n\t\t\troot.listTextures().forEach((texture) => treeShake(texture, keepExtras));\n\t\t\tif (!options.keepSolidTextures) {\n\t\t\t\tawait pruneSolidTextures(document);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\troot.listAccessors().forEach((accessor) => treeShake(accessor, keepExtras));\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.BUFFER)) {\n\t\t\troot.listBuffers().forEach((buffer) => treeShake(buffer, keepExtras));\n\t\t}\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\t// TODO(cleanup): Publish GraphEvent / GraphEventListener types from 'property-graph'.\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tgraph.removeEventListener('node:dispose', onDispose as any);\n\n\t\tif (!counter.empty()) {\n\t\t\tconst str = counter\n\t\t\t\t.entries()\n\t\t\t\t.map(([type, count]) => `${type} (${count})`)\n\t\t\t\t.join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**********************************************************************************************\n * Utility for disposing properties and reporting statistics afterward.\n */\n\nclass DisposeCounter {\n\tpublic readonly disposed: Record<string, number> = {};\n\n\tempty(): boolean {\n\t\tfor (const key in this.disposed) return false;\n\t\treturn true;\n\t}\n\n\tentries(): [string, number][] {\n\t\treturn Object.entries(this.disposed);\n\t}\n\n\t/** Records properties disposed by type. */\n\tdispose(prop: Property): void {\n\t\tthis.disposed[prop.propertyType] = this.disposed[prop.propertyType] || 0;\n\t\tthis.disposed[prop.propertyType]++;\n\t}\n}\n\n/**********************************************************************************************\n * Helper functions for the {@link prune} transform.\n *\n * IMPORTANT: These functions were previously declared in function scope, but\n * broke in the CommonJS build due to a buggy Babel transform. See:\n * https://github.com/donmccurdy/glTF-Transform/issues/1140\n */\n\n/** Disposes of the given property if it is unused. */\nfunction treeShake(prop: Property, keepExtras: boolean): void {\n\t// Consider a property unused if it has no references from another property, excluding\n\t// types Root and AnimationChannel.\n\tconst parents = prop.listParents().filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\tconst needsExtras = keepExtras && !isEmptyObject(prop.getExtras());\n\tif (!parents.length && !needsExtras) {\n\t\tprop.dispose();\n\t}\n}\n\n/**\n * For property types the Root does not maintain references to, we'll need to search the\n * graph. It's possible that objects may have been constructed without any outbound links,\n * but since they're not on the graph they don't need to be tree-shaken.\n */\nfunction indirectTreeShake(graph: Graph<Property>, propertyType: string, keepExtras: boolean): void {\n\tfor (const edge of graph.listEdges()) {\n\t\tconst parent = edge.getParent();\n\t\tif (parent.propertyType === propertyType) {\n\t\t\ttreeShake(parent, keepExtras);\n\t\t}\n\t}\n}\n\n/** Iteratively prunes leaf Nodes without contents. */\nfunction nodeTreeShake(graph: Graph<Property>, prop: Node | Scene, keepExtras: boolean): void {\n\tprop.listChildren().forEach((child) => nodeTreeShake(graph, child, keepExtras));\n\n\tif (prop instanceof Scene) return;\n\n\tconst isUsed = graph.listParentEdges(prop).some((e) => {\n\t\tconst ptype = e.getParent().propertyType;\n\t\treturn ptype !== PropertyType.ROOT && ptype !== PropertyType.SCENE && ptype !== PropertyType.NODE;\n\t});\n\tconst isEmpty = graph.listChildren(prop).length === 0;\n\tconst needsExtras = keepExtras && !isEmptyObject(prop.getExtras());\n\tif (isEmpty && !isUsed && !needsExtras) {\n\t\tprop.dispose();\n\t}\n}\n\nfunction pruneAttributes(prim: Primitive | PrimitiveTarget, unused: string[]) {\n\tfor (const semantic of unused) {\n\t\tprim.setAttribute(semantic, null);\n\t}\n}\n\nfunction pruneIndices(prim: Primitive) {\n\tconst indices = prim.getIndices();\n\tconst indicesArray = indices && indices.getArray();\n\tconst attribute = prim.listAttributes()[0];\n\n\tif (!indicesArray || !attribute) {\n\t\treturn;\n\t}\n\n\tif (indices.getCount() !== attribute.getCount()) {\n\t\treturn;\n\t}\n\n\tfor (let i = 0, il = indicesArray.length; i < il; i++) {\n\t\tif (i !== indicesArray[i]) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprim.setIndices(null);\n}\n\n/**\n * Lists vertex attribute semantics that are unused when rendering a given primitive.\n */\nfunction listUnusedSemantics(prim: Primitive | PrimitiveTarget, required: Set<string>): string[] {\n\tconst unused = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (semantic === 'NORMAL' && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic === 'TANGENT' && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('TEXCOORD_') && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('COLOR_') && semantic !== 'COLOR_0') {\n\t\t\tunused.push(semantic);\n\t\t}\n\t}\n\treturn unused;\n}\n\n/**\n * Lists vertex attribute semantics required by a material. Does not include\n * attributes that would be used unconditionally, like POSITION or NORMAL.\n */\nfunction listRequiredSemantics(\n\tdocument: Document,\n\tprim: Primitive,\n\tmaterial: Material | ExtensionProperty,\n\tsemantics = new Set<string>(),\n): Set<string> {\n\tconst graph = document.getGraph();\n\n\tconst edges = graph.listChildEdges(material);\n\tconst textureNames = new Set<string>();\n\n\tfor (const edge of edges) {\n\t\tif (edge.getChild() instanceof Texture) {\n\t\t\ttextureNames.add(edge.getName());\n\t\t}\n\t}\n\n\tfor (const edge of edges) {\n\t\tconst name = edge.getName();\n\t\tconst child = edge.getChild();\n\n\t\tif (child instanceof TextureInfo) {\n\t\t\tif (textureNames.has(name.replace(/Info$/, ''))) {\n\t\t\t\tsemantics.add(`TEXCOORD_${child.getTexCoord()}`);\n\t\t\t}\n\t\t}\n\n\t\tif (child instanceof Texture && name.match(/normalTexture/i)) {\n\t\t\tsemantics.add('TANGENT');\n\t\t}\n\n\t\tif (child instanceof ExtensionProperty) {\n\t\t\tlistRequiredSemantics(document, prim, child, semantics);\n\t\t}\n\n\t\t// TODO(#748): Does KHR_materials_anisotropy imply required vertex attributes?\n\t}\n\n\tconst isLit = material instanceof Material && !material.getExtension('KHR_materials_unlit');\n\tconst isPoints = prim.getMode() === Primitive.Mode.POINTS;\n\tif (isLit && !isPoints) {\n\t\tsemantics.add('NORMAL');\n\t}\n\n\treturn semantics;\n}\n\n/**\n * Shifts texCoord indices on the given material and primitives assigned to\n * that material, such that indices start at zero and ascend without gaps.\n * Prior to calling this function, the implementation must ensure that:\n * - All TEXCOORD_n attributes on these prims are used by the material.\n * - Material does not require any unavailable TEXCOORD_n attributes.\n *\n * TEXCOORD_n attributes on morph targets are shifted alongside the parent\n * prim, but gaps may remain in their semantic lists.\n */\nfunction shiftTexCoords(material: Material, prims: Primitive[]) {\n\t// Create map from srcTexCoord → dstTexCoord.\n\tconst textureInfoList = listTextureInfoByMaterial(material);\n\tconst texCoordSet = new Set(textureInfoList.map((info: TextureInfo) => info.getTexCoord()));\n\tconst texCoordList = Array.from(texCoordSet).sort();\n\tconst texCoordMap = new Map(texCoordList.map((texCoord, index) => [texCoord, index]));\n\tconst semanticMap = new Map(texCoordList.map((texCoord, index) => [`TEXCOORD_${texCoord}`, `TEXCOORD_${index}`]));\n\n\t// Update material.\n\tfor (const textureInfo of textureInfoList) {\n\t\tconst texCoord = textureInfo.getTexCoord();\n\t\ttextureInfo.setTexCoord(texCoordMap.get(texCoord)!);\n\t}\n\n\t// Update prims.\n\tfor (const prim of prims) {\n\t\tconst semantics = prim\n\t\t\t.listSemantics()\n\t\t\t.filter((semantic) => semantic.startsWith('TEXCOORD_'))\n\t\t\t.sort();\n\t\tupdatePrim(prim, semantics);\n\t\tprim.listTargets().forEach((target) => updatePrim(target, semantics));\n\t}\n\n\tfunction updatePrim(prim: Primitive | PrimitiveTarget, srcSemantics: string[]) {\n\t\tfor (const srcSemantic of srcSemantics) {\n\t\t\tconst uv = prim.getAttribute(srcSemantic);\n\t\t\tif (!uv) continue;\n\n\t\t\tconst dstSemantic = semanticMap.get(srcSemantic)!;\n\t\t\tif (dstSemantic === srcSemantic) continue;\n\n\t\t\tprim.setAttribute(dstSemantic, uv);\n\t\t\tprim.setAttribute(srcSemantic, null);\n\t\t}\n\t}\n}\n\n/**********************************************************************************************\n * Prune solid (single-color) textures.\n */\n\nasync function pruneSolidTextures(document: Document): Promise<void> {\n\tconst root = document.getRoot();\n\tconst graph = document.getGraph();\n\tconst logger = document.getLogger();\n\tconst textures = root.listTextures();\n\n\tconst pending = textures.map(async (texture) => {\n\t\tconst factor = await getTextureFactor(texture);\n\t\tif (!factor) return;\n\n\t\tif (getTextureColorSpace(texture) === 'srgb') {\n\t\t\tColorUtils.convertSRGBToLinear(factor, factor);\n\t\t}\n\n\t\tconst name = texture.getName() || texture.getURI();\n\t\tconst size = texture.getSize()?.join('x');\n\t\tconst slots = listTextureSlots(texture);\n\n\t\tfor (const edge of graph.listParentEdges(texture)) {\n\t\t\tconst parent = edge.getParent();\n\t\t\tif (parent !== root && applyMaterialFactor(parent as Material, factor, edge.getName(), logger)) {\n\t\t\t\tedge.dispose();\n\t\t\t}\n\t\t}\n\n\t\tif (texture.listParents().length === 1) {\n\t\t\ttexture.dispose();\n\t\t\tlogger.debug(`${NAME}: Removed solid-color texture \"${name}\" (${size}px ${slots.join(', ')})`);\n\t\t}\n\t});\n\n\tawait Promise.all(pending);\n}\n\nfunction applyMaterialFactor(\n\tmaterial: Material | ExtensionProperty,\n\tfactor: vec4,\n\tslot: string,\n\tlogger: ILogger,\n): boolean {\n\tif (material instanceof Material) {\n\t\tswitch (slot) {\n\t\t\tcase 'baseColorTexture':\n\t\t\t\tmaterial.setBaseColorFactor(mul(factor, factor, material.getBaseColorFactor()) as vec4);\n\t\t\t\treturn true;\n\t\t\tcase 'emissiveTexture':\n\t\t\t\tmaterial.setEmissiveFactor(\n\t\t\t\t\tmulVec3([0, 0, 0], factor.slice(0, 3) as vec3, material.getEmissiveFactor()) as vec3,\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\tcase 'occlusionTexture':\n\t\t\t\treturn Math.abs(factor[0] - 1) <= EPS;\n\t\t\tcase 'metallicRoughnessTexture':\n\t\t\t\tmaterial.setRoughnessFactor(factor[1] * material.getRoughnessFactor());\n\t\t\t\tmaterial.setMetallicFactor(factor[2] * material.getMetallicFactor());\n\t\t\t\treturn true;\n\t\t\tcase 'normalTexture':\n\t\t\t\treturn len(sub(create(), factor, [0.5, 0.5, 1, 1])) <= EPS;\n\t\t}\n\t}\n\n\tlogger.warn(`${NAME}: Detected single-color ${slot} texture. Pruning ${slot} not yet supported.`);\n\treturn false;\n}\n\nasync function getTextureFactor(texture: Texture): Promise<vec4 | null> {\n\tconst pixels = await maybeGetPixels(texture);\n\tif (!pixels) return null;\n\n\tconst min: vec4 = [Infinity, Infinity, Infinity, Infinity];\n\tconst max: vec4 = [-Infinity, -Infinity, -Infinity, -Infinity];\n\tconst target: vec4 = [0, 0, 0, 0];\n\n\tconst [width, height] = pixels.shape;\n\n\tfor (let i = 0; i < width; i++) {\n\t\tfor (let j = 0; j < height; j++) {\n\t\t\tfor (let k = 0; k < 4; k++) {\n\t\t\t\tmin[k] = Math.min(min[k], pixels.get(i, j, k));\n\t\t\t\tmax[k] = Math.max(max[k], pixels.get(i, j, k));\n\t\t\t}\n\t\t}\n\n\t\tif (len(sub(target, max, min)) / 255 > EPS) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn scale(target, add(target, max, min), 0.5 / 255) as vec4;\n}\n\nasync function maybeGetPixels(texture: Texture): Promise<NdArray<Uint8Array> | null> {\n\ttry {\n\t\treturn await getPixels(texture.getImage()!, texture.getMimeType());\n\t} catch {\n\t\treturn null;\n\t}\n}\n","import { Accessor, BufferUtils, Primitive } from '@gltf-transform/core';\nimport { deepListAttributes } from './utils.js';\n\n/** Flags 'empty' values in a Uint32Array index. */\nexport const EMPTY_U32 = 2 ** 32 - 1;\n\nexport class VertexStream {\n\tprivate attributes: { u8: Uint8Array; byteStride: number; paddedByteStride: number }[] = [];\n\n\t/** Temporary vertex views in 4-byte-aligned memory. */\n\tprivate u8: Uint8Array;\n\tprivate u32: Uint32Array;\n\n\tconstructor(prim: Primitive) {\n\t\tlet byteStride = 0;\n\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\tbyteStride += this._initAttribute(attribute);\n\t\t}\n\t\tthis.u8 = new Uint8Array(byteStride);\n\t\tthis.u32 = new Uint32Array(this.u8.buffer);\n\t}\n\n\tprivate _initAttribute(attribute: Accessor): number {\n\t\tconst array = attribute.getArray()!;\n\t\tconst u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n\t\tconst byteStride = attribute.getElementSize() * attribute.getComponentSize();\n\t\tconst paddedByteStride = BufferUtils.padNumber(byteStride);\n\t\tthis.attributes.push({ u8, byteStride, paddedByteStride });\n\t\treturn paddedByteStride;\n\t}\n\n\thash(index: number): number {\n\t\t// Load vertex into 4-byte-aligned view.\n\t\tlet byteOffset = 0;\n\t\tfor (const { u8, byteStride, paddedByteStride } of this.attributes) {\n\t\t\tfor (let i = 0; i < paddedByteStride; i++) {\n\t\t\t\tif (i < byteStride) {\n\t\t\t\t\tthis.u8[byteOffset + i] = u8[index * byteStride + i];\n\t\t\t\t} else {\n\t\t\t\t\tthis.u8[byteOffset + i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbyteOffset += paddedByteStride;\n\t\t}\n\n\t\t// Compute hash.\n\t\treturn murmurHash2(0, this.u32);\n\t}\n\n\tequal(a: number, b: number): boolean {\n\t\tfor (const { u8, byteStride } of this.attributes) {\n\t\t\tfor (let j = 0; j < byteStride; j++) {\n\t\t\t\tif (u8[a * byteStride + j] !== u8[b * byteStride + j]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n/**\n * References:\n * - https://github.com/mikolalysenko/murmurhash-js/blob/f19136e9f9c17f8cddc216ca3d44ec7c5c502f60/murmurhash2_gc.js#L14\n * - https://github.com/zeux/meshoptimizer/blob/e47e1be6d3d9513153188216455bdbed40a206ef/src/indexgenerator.cpp#L12\n */\nfunction murmurHash2(h: number, key: Uint32Array): number {\n\t// MurmurHash2\n\tconst m = 0x5bd1e995;\n\tconst r = 24;\n\n\tfor (let i = 0, il = key.length; i < il; i++) {\n\t\tlet k = key[i];\n\n\t\tk = Math.imul(k, m) >>> 0;\n\t\tk = (k ^ (k >> r)) >>> 0;\n\t\tk = Math.imul(k, m) >>> 0;\n\n\t\th = Math.imul(h, m) >>> 0;\n\t\th = (h ^ k) >>> 0;\n\t}\n\n\treturn h;\n}\n\nexport function hashLookup(\n\ttable: Uint32Array,\n\tbuckets: number,\n\tstream: VertexStream,\n\tkey: number,\n\tempty = EMPTY_U32,\n): number {\n\tconst hashmod = buckets - 1;\n\tconst hashval = stream.hash(key);\n\tlet bucket = hashval & hashmod;\n\n\tfor (let probe = 0; probe <= hashmod; probe++) {\n\t\tconst item = table[bucket];\n\n\t\tif (item === empty || stream.equal(item, key)) {\n\t\t\treturn bucket;\n\t\t}\n\n\t\tbucket = (bucket + probe + 1) & hashmod; // Hash collision.\n\t}\n\n\tthrow new Error('Hash table full.');\n}\n","import { Scene, Node, Mesh, Primitive, Accessor } from '@gltf-transform/core';\nimport { InstancedMesh } from '@gltf-transform/extensions';\n\n/**\n * Various methods of estimating a vertex count. For some background on why\n * multiple definitions of a vertex count should exist, see [_Vertex Count\n * Higher in Engine than in 3D Software_](https://shahriyarshahrabi.medium.com/vertex-count-higher-in-engine-than-in-3d-software-badc348ada66).\n * Totals for a {@link Scene}, {@link Node}, or {@link Mesh} will not\n * necessarily match the sum of the totals for each {@link Primitive}. Choose\n * the appropriate method for a relevant total or estimate:\n *\n * - {@link getSceneVertexCount}\n * - {@link getNodeVertexCount}\n * - {@link getMeshVertexCount}\n * - {@link getPrimitiveVertexCount}\n *\n * Many rendering features, such as volumetric transmission, may lead\n * to additional passes over some or all vertices. These tradeoffs are\n * implementation-dependent, and not considered here.\n */\nexport enum VertexCountMethod {\n\t/**\n\t * Expected number of vertices processed by the vertex shader for one render\n\t * pass, without considering the vertex cache.\n\t */\n\tRENDER = 'render',\n\n\t/**\n\t * Expected number of vertices processed by the vertex shader for one render\n\t * pass, assuming an Average Transform to Vertex Ratio (ATVR) of 1. Approaching\n\t * this result requires optimizing for locality of vertex references (see\n\t * {@link reorder}).\n\t *\n\t * References:\n\t * - [ACMR and ATVR](https://www.realtimerendering.com/blog/acmr-and-atvr/), Real-Time Rendering\n\t */\n\tRENDER_CACHED = 'render-cached',\n\n\t/**\n\t * Expected number of vertices uploaded to the GPU, assuming that a client\n\t * uploads each unique {@link Accessor} only once. Unless glTF vertex\n\t * attributes are pre-processed to a known buffer layout, and the client is\n\t * optimized for that buffer layout, this total will be optimistic.\n\t */\n\tUPLOAD = 'upload',\n\n\t/**\n\t * Expected number of vertices uploaded to the GPU, assuming that a client\n\t * uploads each unique {@link Primitive} individually, duplicating vertex\n\t * attribute {@link Accessor Accessors} shared by multiple primitives, but\n\t * never uploading the same Mesh or Primitive to GPU memory more than once.\n\t */\n\tUPLOAD_NAIVE = 'upload-naive',\n\n\t/**\n\t * Total number of unique vertices represented, considering all attributes of\n\t * each vertex, and removing any duplicates. Has no direct relationship to\n\t * runtime characteristics, but may be helpful in identifying asset\n\t * optimization opportunities.\n\t *\n\t * @hidden TODO(feat): Not yet implemented.\n\t * @internal\n\t */\n\tDISTINCT = 'distinct',\n\n\t/**\n\t * Total number of unique vertices represented, considering only vertex\n\t * positions, and removing any duplicates. Has no direct relationship to\n\t * runtime characteristics, but may be helpful in identifying asset\n\t * optimization opportunities.\n\t *\n\t * @hidden TODO(feat): Not yet implemented.\n\t * @internal\n\t */\n\tDISTINCT_POSITION = 'distinct-position',\n\n\t/**\n\t * Number of vertex positions never used by any {@link Primitive}. If all\n\t * vertices are unused, this total will match `UPLOAD`.\n\t */\n\tUNUSED = 'unused',\n}\n\n/**\n * Computes total number of vertices in a {@link Scene}, by the\n * specified method. Totals for the Scene will not necessarily match the sum\n * of the totals for each {@link Mesh} or {@link Primitive} within it. See\n * {@link VertexCountMethod} for available methods.\n */\nexport function getSceneVertexCount(scene: Scene, method: VertexCountMethod): number {\n\treturn _getSubtreeVertexCount(scene, method);\n}\n\n/**\n * Computes total number of vertices in a {@link Node}, by the\n * specified method. Totals for the node will not necessarily match the sum\n * of the totals for each {@link Mesh} or {@link Primitive} within it. See\n * {@link VertexCountMethod} for available methods.\n */\nexport function getNodeVertexCount(node: Node | Scene, method: VertexCountMethod): number {\n\treturn _getSubtreeVertexCount(node, method);\n}\n\nfunction _getSubtreeVertexCount(node: Node | Scene, method: VertexCountMethod): number {\n\tconst instancedMeshes: [number, Mesh][] = [];\n\tconst nonInstancedMeshes: Mesh[] = [];\n\tconst meshes: Mesh[] = [];\n\n\tnode.traverse((node) => {\n\t\tconst mesh = node.getMesh();\n\t\tconst batch = node.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\t\tif (batch && mesh) {\n\t\t\tmeshes.push(mesh);\n\t\t\tinstancedMeshes.push([batch.listAttributes()[0]!.getCount(), mesh]);\n\t\t} else if (mesh) {\n\t\t\tmeshes.push(mesh);\n\t\t\tnonInstancedMeshes.push(mesh);\n\t\t}\n\t});\n\n\tconst prims = meshes.flatMap((mesh) => mesh.listPrimitives());\n\tconst positions = prims.map((prim) => prim.getAttribute('POSITION')!);\n\tconst uniquePositions = Array.from(new Set(positions));\n\tconst uniqueMeshes = Array.from(new Set(meshes));\n\tconst uniquePrims = Array.from(new Set(uniqueMeshes.flatMap((mesh) => mesh.listPrimitives())));\n\n\tswitch (method) {\n\t\tcase VertexCountMethod.RENDER:\n\t\tcase VertexCountMethod.RENDER_CACHED:\n\t\t\treturn (\n\t\t\t\t_sum(nonInstancedMeshes.map((mesh) => getMeshVertexCount(mesh, method))) +\n\t\t\t\t_sum(instancedMeshes.map(([batch, mesh]) => batch * getMeshVertexCount(mesh, method)))\n\t\t\t);\n\t\tcase VertexCountMethod.UPLOAD_NAIVE:\n\t\t\treturn _sum(uniqueMeshes.map((mesh) => getMeshVertexCount(mesh, method)));\n\t\tcase VertexCountMethod.UPLOAD:\n\t\t\treturn _sum(uniquePositions.map((attribute) => attribute.getCount()));\n\t\tcase VertexCountMethod.DISTINCT:\n\t\tcase VertexCountMethod.DISTINCT_POSITION:\n\t\t\treturn _assertNotImplemented(method);\n\t\tcase VertexCountMethod.UNUSED:\n\t\t\treturn _sumUnused(uniquePrims);\n\t\tdefault:\n\t\t\treturn _assertUnreachable(method);\n\t}\n}\n\n/**\n * Computes total number of vertices in a {@link Mesh}, by the\n * specified method. Totals for the Mesh will not necessarily match the sum\n * of the totals for each {@link Primitive} within it. See\n * {@link VertexCountMethod} for available methods.\n */\nexport function getMeshVertexCount(mesh: Mesh, method: VertexCountMethod): number {\n\tconst prims = mesh.listPrimitives();\n\tconst uniquePrims = Array.from(new Set(prims));\n\tconst uniquePositions = Array.from(new Set(uniquePrims.map((prim) => prim.getAttribute('POSITION')!)));\n\n\tswitch (method) {\n\t\tcase VertexCountMethod.RENDER:\n\t\tcase VertexCountMethod.RENDER_CACHED:\n\t\tcase VertexCountMethod.UPLOAD_NAIVE:\n\t\t\treturn _sum(prims.map((prim) => getPrimitiveVertexCount(prim, method)));\n\t\tcase VertexCountMethod.UPLOAD:\n\t\t\treturn _sum(uniquePositions.map((attribute) => attribute.getCount()));\n\t\tcase VertexCountMethod.DISTINCT:\n\t\tcase VertexCountMethod.DISTINCT_POSITION:\n\t\t\treturn _assertNotImplemented(method);\n\t\tcase VertexCountMethod.UNUSED:\n\t\t\treturn _sumUnused(uniquePrims);\n\t\tdefault:\n\t\t\treturn _assertUnreachable(method);\n\t}\n}\n\n/**\n * Computes total number of vertices in a {@link Primitive}, by the\n * specified method. See {@link VertexCountMethod} for available methods.\n */\nexport function getPrimitiveVertexCount(prim: Primitive, method: VertexCountMethod): number {\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst indices = prim.getIndices();\n\n\tswitch (method) {\n\t\tcase VertexCountMethod.RENDER:\n\t\t\treturn indices ? indices.getCount() : position.getCount();\n\t\tcase VertexCountMethod.RENDER_CACHED:\n\t\t\treturn indices ? new Set(indices.getArray()).size : position.getCount();\n\t\tcase VertexCountMethod.UPLOAD_NAIVE:\n\t\tcase VertexCountMethod.UPLOAD:\n\t\t\treturn position.getCount();\n\t\tcase VertexCountMethod.DISTINCT:\n\t\tcase VertexCountMethod.DISTINCT_POSITION:\n\t\t\treturn _assertNotImplemented(method);\n\t\tcase VertexCountMethod.UNUSED:\n\t\t\treturn indices ? position.getCount() - new Set(indices.getArray()).size : 0;\n\t\tdefault:\n\t\t\treturn _assertUnreachable(method);\n\t}\n}\n\nfunction _sum(values: number[]): number {\n\tlet total = 0;\n\tfor (let i = 0; i < values.length; i++) {\n\t\ttotal += values[i];\n\t}\n\treturn total;\n}\n\nfunction _sumUnused(prims: Primitive[]) {\n\tconst attributeIndexMap = new Map<Accessor, Set<Accessor | null>>();\n\tfor (const prim of prims) {\n\t\tconst position = prim.getAttribute('POSITION')!;\n\t\tconst indices = prim.getIndices();\n\t\tconst indicesSet = attributeIndexMap.get(position) || new Set();\n\t\tindicesSet.add(indices);\n\t\tattributeIndexMap.set(position, indicesSet);\n\t}\n\n\tlet unused = 0;\n\tfor (const [position, indicesSet] of attributeIndexMap) {\n\t\tif (indicesSet.has(null)) continue;\n\n\t\tconst usedIndices = new Uint8Array(position.getCount());\n\t\tfor (const indices of indicesSet as Set<Accessor>) {\n\t\t\tconst indicesArray = indices.getArray()!;\n\t\t\tfor (let i = 0, il = indicesArray.length; i < il; i++) {\n\t\t\t\tusedIndices[indicesArray[i]] = 1;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0, il = position.getCount(); i < il; i++) {\n\t\t\tif (usedIndices[i] === 0) unused++;\n\t\t}\n\t}\n\n\treturn unused;\n}\n\nfunction _assertNotImplemented<T>(x: unknown): T {\n\tthrow new Error(`Not implemented: ${x}`);\n}\n\nfunction _assertUnreachable<T>(x: never): T {\n\tthrow new Error(`Unexpected value: ${x}`);\n}\n","import { Accessor, Document, Primitive, TypedArray, TypedArrayConstructor } from '@gltf-transform/core';\nimport { createIndices, createIndicesEmpty, deepListAttributes, shallowCloneAccessor } from './utils.js';\nimport { VertexCountMethod, getPrimitiveVertexCount } from './get-vertex-count.js';\nimport { EMPTY_U32 } from './hash-table.js';\n\n/**\n * Rewrites a {@link Primitive} such that all unused vertices in its vertex\n * attributes are removed. When multiple Primitives share vertex attributes,\n * each indexing only a few, compaction can be used to produce Primitives\n * each having smaller, independent vertex streams instead.\n *\n * Regardless of whether the Primitive is indexed or contains unused vertices,\n * compaction will clone every {@link Accessor}. The resulting Primitive will\n * share no Accessors with other Primitives, allowing later changes to\n * the vertex stream to be applied in isolation.\n *\n * Example:\n *\n * ```javascript\n * import { compactPrimitive, transformMesh } from '@gltf-transform/functions';\n * import { fromTranslation } from 'gl-matrix/mat4';\n *\n * const mesh = document.getRoot().listMeshes().find((mesh) => mesh.getName() === 'MyMesh');\n * const prim = mesh.listPrimitives().find((prim) => { ... });\n *\n * // Compact primitive, removing unused vertices and detaching shared vertex\n * // attributes. Without compaction, `transformPrimitive` might affect other\n * // primitives sharing the same vertex attributes.\n * compactPrimitive(prim);\n *\n * // Transform primitive vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * Parameters 'remap' and 'dstVertexCount' are optional. When either is\n * provided, the other must be provided as well. If one or both are missing,\n * both will be computed from the mesh indices.\n *\n * @param remap - Mapping. Array index represents vertex index in the source\n *\t\tattributes, array value represents index in the resulting compacted\n *\t\tprimitive. When omitted, calculated from indices.\n * @param dstVertexcount - Number of unique vertices in compacted primitive.\n *\t\tWhen omitted, calculated from indices.\n */\n// TODO(cleanup): Additional signatures currently break greendoc/parse.\n// export function compactPrimitive(prim: Primitive): Primitive;\n// export function compactPrimitive(prim: Primitive, remap: TypedArray, dstVertexCount: number): Primitive;\nexport function compactPrimitive(prim: Primitive, remap?: TypedArray, dstVertexCount?: number): Primitive {\n\tconst document = Document.fromGraph(prim.getGraph())!;\n\n\tif (!remap || !dstVertexCount) {\n\t\t[remap, dstVertexCount] = createCompactPlan(prim);\n\t}\n\n\t// Remap indices.\n\n\tconst srcIndices = prim.getIndices();\n\tconst srcIndicesArray = srcIndices ? srcIndices.getArray() : null;\n\tconst srcIndicesCount = getPrimitiveVertexCount(prim, VertexCountMethod.RENDER);\n\n\tconst dstIndices = document.createAccessor();\n\tconst dstIndicesCount = srcIndicesCount; // primitive count does not change.\n\tconst dstIndicesArray = createIndicesEmpty(dstIndicesCount, dstVertexCount);\n\n\tfor (let i = 0; i < dstIndicesCount; i++) {\n\t\tdstIndicesArray[i] = remap[srcIndicesArray ? srcIndicesArray[i] : i];\n\t}\n\n\tprim.setIndices(dstIndices.setArray(dstIndicesArray));\n\n\t// Remap vertices.\n\n\tconst srcAttributesPrev = deepListAttributes(prim);\n\n\tfor (const srcAttribute of prim.listAttributes()) {\n\t\tconst dstAttribute = shallowCloneAccessor(document, srcAttribute);\n\t\tcompactAttribute(srcAttribute, srcIndices, remap, dstAttribute, dstVertexCount);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\tconst dstAttribute = shallowCloneAccessor(document, srcAttribute);\n\t\t\tcompactAttribute(srcAttribute, srcIndices, remap, dstAttribute, dstVertexCount);\n\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t}\n\t}\n\n\t// Clean up accessors.\n\n\tif (srcIndices && srcIndices.listParents().length === 1) {\n\t\tsrcIndices.dispose();\n\t}\n\tfor (const srcAttribute of srcAttributesPrev) {\n\t\tif (srcAttribute.listParents().length === 1) {\n\t\t\tsrcAttribute.dispose();\n\t\t}\n\t}\n\n\treturn prim;\n}\n\n/**\n * Copies srcAttribute to dstAttribute, using the given indices and remap (srcIndex -> dstIndex).\n * Any existing array in dstAttribute is replaced. Vertices not used by the index are eliminated,\n * leaving a compact attribute.\n * @hidden\n * @internal\n */\nexport function compactAttribute(\n\tsrcAttribute: Accessor,\n\tsrcIndices: Accessor | null,\n\tremap: TypedArray,\n\tdstAttribute: Accessor,\n\tdstVertexCount: number,\n): Accessor {\n\tconst elementSize = srcAttribute.getElementSize();\n\tconst srcArray = srcAttribute.getArray()!;\n\tconst srcIndicesArray = srcIndices ? srcIndices.getArray() : null;\n\tconst srcIndicesCount = srcIndices ? srcIndices.getCount() : srcAttribute.getCount();\n\tconst dstArray = new (srcArray.constructor as TypedArrayConstructor)(dstVertexCount * elementSize);\n\tconst dstDone = new Uint8Array(dstVertexCount);\n\n\tfor (let i = 0; i < srcIndicesCount; i++) {\n\t\tconst srcIndex = srcIndicesArray ? srcIndicesArray[i] : i;\n\t\tconst dstIndex = remap[srcIndex];\n\t\tif (dstDone[dstIndex]) continue;\n\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[dstIndex * elementSize + j] = srcArray[srcIndex * elementSize + j];\n\t\t}\n\n\t\tdstDone[dstIndex] = 1;\n\t}\n\n\treturn dstAttribute.setArray(dstArray);\n}\n\n/**\n * Creates a 'remap' and 'dstVertexCount' plan for indexed primitives,\n * such that they can be rewritten with {@link compactPrimitive} removing\n * any non-rendered vertices.\n * @hidden\n * @internal\n */\nfunction createCompactPlan(prim: Primitive): [Uint32Array, number] {\n\tconst srcVertexCount = getPrimitiveVertexCount(prim, VertexCountMethod.UPLOAD);\n\n\tconst indices = prim.getIndices();\n\tconst indicesArray = indices ? indices.getArray() : null;\n\tif (!indices || !indicesArray) {\n\t\treturn [createIndices(srcVertexCount, 1_000_000) as Uint32Array, srcVertexCount];\n\t}\n\n\tconst remap = new Uint32Array(srcVertexCount).fill(EMPTY_U32);\n\n\tlet dstVertexCount = 0;\n\n\tfor (let i = 0; i < indicesArray.length; i++) {\n\t\tconst srcIndex = indicesArray[i];\n\t\tif (remap[srcIndex] === EMPTY_U32) {\n\t\t\tremap[srcIndex] = dstVertexCount++;\n\t\t}\n\t}\n\n\treturn [remap, dstVertexCount];\n}\n","import { Document, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\nimport { EMPTY_U32, VertexStream, hashLookup } from './hash-table.js';\nimport { assignDefaults, ceilPowerOfTwo, createTransform, formatDeltaOp } from './utils.js';\nimport { compactPrimitive } from './compact-primitive.js';\nimport { VertexCountMethod, getPrimitiveVertexCount } from './get-vertex-count.js';\n\n/**\n * CONTRIBUTOR NOTES\n *\n * Ideally a weld() implementation should be fast, robust, and tunable. The\n * writeup below tracks my attempts to solve for these constraints.\n *\n * (Approach #1) Follow the mergeVertices() implementation of three.js,\n * hashing vertices with a string concatenation of all vertex attributes.\n * The approach does not allow per-attribute tolerance in local units.\n *\n * (Approach #2) Sort points along the X axis, then make cheaper\n * searches up/down the sorted list for merge candidates. While this allows\n * simpler comparison based on specified tolerance, it's much slower, even\n * for cases where choice of the X vs. Y or Z axes is reasonable.\n *\n * (Approach #3) Attempted a Delaunay triangulation in three dimensions,\n * expecting it would be an n * log(n) algorithm, but the only implementation\n * I found (with delaunay-triangulate) appeared to be much slower than that,\n * and was notably slower than the sort-based approach, just building the\n * Delaunay triangulation alone.\n *\n * (Approach #4) Hybrid of (1) and (2), assigning vertices to a spatial\n * grid, then searching the local neighborhood (27 cells) for weld candidates.\n *\n * (Approach #5) Based on Meshoptimizer's implementation, when tolerance=0\n * use a hashtable to find bitwise-equal vertices quickly. Vastly faster than\n * previous approaches, but without tolerance options.\n *\n * RESULTS: For the \"Lovecraftian\" sample model linked below, after joining,\n * a primitive with 873,000 vertices can be welded down to 230,000 vertices.\n * https://sketchfab.com/3d-models/sculpt-january-day-19-lovecraftian-34ad2501108e4fceb9394f5b816b9f42\n *\n * - (1) Not tested, but prior results suggest not robust enough.\n * - (2) 30s\n * - (3) 660s\n * - (4) 5s exhaustive, 1.5s non-exhaustive\n * - (5) 0.2s\n *\n * As of April 2024, the lossy weld was removed, leaving only approach #5. An\n * upcoming Meshoptimizer release will include a simplifyWithAttributes\n * function allowing simplification with weighted consideration of vertex\n * attributes, which I hope to support. With that, weld() may remain faster,\n * simpler, and more maintainable.\n */\n\nconst NAME = 'weld';\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Whether to overwrite existing indices. */\n\toverwrite?: boolean;\n\t/**\n\t * Whether to perform cleanup steps after completing the operation. Recommended, and enabled by\n\t * default. Cleanup removes temporary resources created during the operation, but may also remove\n\t * pre-existing unused or duplicate resources in the {@link Document}. Applications that require\n\t * keeping these resources may need to disable cleanup, instead calling {@link dedup} and\n\t * {@link prune} manually (with customized options) later in the processing pipeline.\n\t * @experimental\n\t */\n\tcleanup?: boolean;\n}\n\nexport const WELD_DEFAULTS: Required<WeldOptions> = {\n\toverwrite: true,\n\tcleanup: true,\n};\n\n/**\n * Welds {@link Primitive Primitives}, merging bitwise identical vertices. When\n * merged and indexed, data is shared more efficiently between vertices. File size\n * can be reduced, and the GPU uses the vertex cache more efficiently.\n *\n * Example:\n *\n * ```javascript\n * import { weld, getSceneVertexCount, VertexCountMethod } from '@gltf-transform/functions';\n *\n * const scene = document.getDefaultScene();\n * const srcVertexCount = getSceneVertexCount(scene, VertexCountMethod.GPU);\n * await document.transform(weld());\n * const dstVertexCount = getSceneVertexCount(scene, VertexCountMethod.GPU);\n * ```\n *\n * @category Transforms\n */\nexport function weld(_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = assignDefaults(WELD_DEFAULTS, _options);\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tweldPrimitive(prim, options);\n\n\t\t\t\tif (getPrimitiveVertexCount(prim, VertexCountMethod.RENDER) === 0) {\n\t\t\t\t\tprim.dispose();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\t// Welding removes degenerate meshes; prune leaf nodes afterward.\n\t\tif (options.cleanup) {\n\t\t\tawait doc.transform(\n\t\t\t\tprune({\n\t\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE],\n\t\t\t\t\tkeepAttributes: true,\n\t\t\t\t\tkeepIndices: true,\n\t\t\t\t\tkeepLeaves: false,\n\t\t\t\t}),\n\t\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR] }),\n\t\t\t);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Welds a {@link Primitive}, merging bitwise identical vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU uses the vertex cache more efficiently.\n *\n * Example:\n *\n * ```javascript\n * import { weldPrimitive, getMeshVertexCount, VertexCountMethod } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes()\n * \t.find((mesh) => mesh.getName() === 'Gizmo');\n *\n * const srcVertexCount = getMeshVertexCount(mesh, VertexCountMethod.GPU);\n *\n * for (const prim of mesh.listPrimitives()) {\n *   weldPrimitive(prim);\n * }\n *\n * const dstVertexCount = getMeshVertexCount(mesh, VertexCountMethod.GPU);\n * ```\n */\nexport function weldPrimitive(prim: Primitive, _options: WeldOptions = WELD_DEFAULTS): void {\n\tconst graph = prim.getGraph();\n\tconst document = Document.fromGraph(graph)!;\n\tconst logger = document.getLogger();\n\tconst options = { ...WELD_DEFAULTS, ..._options };\n\n\tif (prim.getIndices() && !options.overwrite) return;\n\tif (prim.getMode() === Primitive.Mode.POINTS) return;\n\n\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst srcIndices = prim.getIndices();\n\tconst srcIndicesArray = srcIndices?.getArray();\n\tconst srcIndicesCount = srcIndices ? srcIndices.getCount() : srcVertexCount;\n\n\tconst stream = new VertexStream(prim);\n\tconst tableSize = ceilPowerOfTwo(srcVertexCount + srcVertexCount / 4);\n\tconst table = new Uint32Array(tableSize).fill(EMPTY_U32);\n\tconst writeMap = new Uint32Array(srcVertexCount).fill(EMPTY_U32); // oldIndex → newIndex\n\n\t// (1) Compare and identify indices to weld.\n\n\tlet dstVertexCount = 0;\n\n\tfor (let i = 0; i < srcIndicesCount; i++) {\n\t\tconst srcIndex = srcIndicesArray ? srcIndicesArray[i] : i;\n\t\tif (writeMap[srcIndex] !== EMPTY_U32) continue;\n\n\t\tconst hashIndex = hashLookup(table, tableSize, stream, srcIndex, EMPTY_U32);\n\t\tconst dstIndex = table[hashIndex];\n\n\t\tif (dstIndex === EMPTY_U32) {\n\t\t\ttable[hashIndex] = srcIndex;\n\t\t\twriteMap[srcIndex] = dstVertexCount++;\n\t\t} else {\n\t\t\twriteMap[srcIndex] = writeMap[dstIndex];\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\tcompactPrimitive(prim, writeMap, dstVertexCount);\n}\n","import { vec3, mat4, Accessor, Primitive, MathUtils } from '@gltf-transform/core';\nimport { create as createMat3, fromMat4, invert, transpose } from 'gl-matrix/mat3';\nimport { create as createVec3, normalize as normalizeVec3, transformMat3, transformMat4 } from 'gl-matrix/vec3';\nimport { weldPrimitive } from './weld.js';\nimport { determinant } from 'gl-matrix/mat4';\n\nconst { FLOAT } = Accessor.ComponentType;\n\n/**\n * Applies a transform matrix to a {@link Primitive}.\n *\n * All vertex attributes on the Primitive and its\n * {@link PrimitiveTarget PrimitiveTargets} are modified in place. If vertex\n * streams are shared with other Primitives, and overwriting the shared vertex\n * attributes is not desired, use {@link compactPrimitive} to pre-process\n * the Primitive or call {@link transformMesh} instead.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformPrimitive } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param prim\n * @param matrix\n */\nexport function transformPrimitive(prim: Primitive, matrix: mat4): void {\n\t// Apply transform to base attributes.\n\tconst position = prim.getAttribute('POSITION');\n\tif (position) {\n\t\tapplyMatrix(matrix, position);\n\t}\n\n\tconst normal = prim.getAttribute('NORMAL');\n\tif (normal) {\n\t\tapplyNormalMatrix(matrix, normal);\n\t}\n\n\tconst tangent = prim.getAttribute('TANGENT');\n\tif (tangent) {\n\t\tapplyTangentMatrix(matrix, tangent);\n\t}\n\n\t// Apply transform to morph attributes.\n\tfor (const target of prim.listTargets()) {\n\t\tconst position = target.getAttribute('POSITION');\n\t\tif (position) {\n\t\t\tapplyMatrix(matrix, position);\n\t\t}\n\n\t\tconst normal = target.getAttribute('NORMAL');\n\t\tif (normal) {\n\t\t\tapplyNormalMatrix(matrix, normal);\n\t\t}\n\n\t\tconst tangent = target.getAttribute('TANGENT');\n\t\tif (tangent) {\n\t\t\tapplyTangentMatrix(matrix, tangent);\n\t\t}\n\t}\n\n\t// Reverse winding order if scale is negative.\n\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/NegativeScaleTest\n\tif (determinant(matrix) < 0) {\n\t\treversePrimitiveWindingOrder(prim);\n\t}\n}\n\nfunction applyMatrix(matrix: mat4, attribute: Accessor) {\n\tconst componentType = attribute.getComponentType();\n\tconst normalized = attribute.getNormalized();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = componentType === FLOAT ? srcArray : new Float32Array(srcArray.length);\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0, il = attribute.getCount(); i < il; i++) {\n\t\tif (normalized) {\n\t\t\tvector[0] = MathUtils.decodeNormalizedInt(srcArray[i * 3], componentType);\n\t\t\tvector[1] = MathUtils.decodeNormalizedInt(srcArray[i * 3 + 1], componentType);\n\t\t\tvector[2] = MathUtils.decodeNormalizedInt(srcArray[i * 3 + 2], componentType);\n\t\t} else {\n\t\t\tvector[0] = srcArray[i * 3];\n\t\t\tvector[1] = srcArray[i * 3 + 1];\n\t\t\tvector[2] = srcArray[i * 3 + 2];\n\t\t}\n\n\t\ttransformMat4(vector, vector, matrix);\n\n\t\tdstArray[i * 3] = vector[0];\n\t\tdstArray[i * 3 + 1] = vector[1];\n\t\tdstArray[i * 3 + 2] = vector[2];\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n\nfunction applyNormalMatrix(matrix: mat4, attribute: Accessor) {\n\tconst array = attribute.getArray()!;\n\tconst normalized = attribute.getNormalized();\n\tconst componentType = attribute.getComponentType();\n\n\tconst normalMatrix = createMat3();\n\tfromMat4(normalMatrix, matrix);\n\tinvert(normalMatrix, normalMatrix);\n\ttranspose(normalMatrix, normalMatrix);\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0, il = attribute.getCount(); i < il; i++) {\n\t\tif (normalized) {\n\t\t\tvector[0] = MathUtils.decodeNormalizedInt(array[i * 3], componentType);\n\t\t\tvector[1] = MathUtils.decodeNormalizedInt(array[i * 3 + 1], componentType);\n\t\t\tvector[2] = MathUtils.decodeNormalizedInt(array[i * 3 + 2], componentType);\n\t\t} else {\n\t\t\tvector[0] = array[i * 3];\n\t\t\tvector[1] = array[i * 3 + 1];\n\t\t\tvector[2] = array[i * 3 + 2];\n\t\t}\n\n\t\ttransformMat3(vector, vector, normalMatrix);\n\t\tnormalizeVec3(vector, vector);\n\n\t\tif (normalized) {\n\t\t\tarray[i * 3] = MathUtils.decodeNormalizedInt(vector[0], componentType);\n\t\t\tarray[i * 3 + 1] = MathUtils.decodeNormalizedInt(vector[1], componentType);\n\t\t\tarray[i * 3 + 2] = MathUtils.decodeNormalizedInt(vector[2], componentType);\n\t\t} else {\n\t\t\tarray[i * 3] = vector[0];\n\t\t\tarray[i * 3 + 1] = vector[1];\n\t\t\tarray[i * 3 + 2] = vector[2];\n\t\t}\n\t}\n}\n\nfunction applyTangentMatrix(matrix: mat4, attribute: Accessor) {\n\tconst array = attribute.getArray()!;\n\tconst normalized = attribute.getNormalized();\n\tconst componentType = attribute.getComponentType();\n\n\tconst v3 = createVec3() as vec3;\n\tfor (let i = 0, il = attribute.getCount(); i < il; i++) {\n\t\tif (normalized) {\n\t\t\tv3[0] = MathUtils.decodeNormalizedInt(array[i * 4], componentType);\n\t\t\tv3[1] = MathUtils.decodeNormalizedInt(array[i * 4 + 1], componentType);\n\t\t\tv3[2] = MathUtils.decodeNormalizedInt(array[i * 4 + 2], componentType);\n\t\t} else {\n\t\t\tv3[0] = array[i * 4];\n\t\t\tv3[1] = array[i * 4 + 1];\n\t\t\tv3[2] = array[i * 4 + 2];\n\t\t}\n\n\t\t// mat4 affine matrix applied to vector, vector interpreted as a direction.\n\t\t// Reference: https://github.com/mrdoob/three.js/blob/9f4de99828c05e71c47e6de0beb4c6e7652e486a/src/math/Vector3.js#L286-L300\n\t\tv3[0] = matrix[0] * v3[0] + matrix[4] * v3[1] + matrix[8] * v3[2];\n\t\tv3[1] = matrix[1] * v3[0] + matrix[5] * v3[1] + matrix[9] * v3[2];\n\t\tv3[2] = matrix[2] * v3[0] + matrix[6] * v3[1] + matrix[10] * v3[2];\n\t\tnormalizeVec3(v3, v3);\n\n\t\tif (normalized) {\n\t\t\tarray[i * 4] = MathUtils.decodeNormalizedInt(v3[0], componentType);\n\t\t\tarray[i * 4 + 1] = MathUtils.decodeNormalizedInt(v3[1], componentType);\n\t\t\tarray[i * 4 + 2] = MathUtils.decodeNormalizedInt(v3[2], componentType);\n\t\t} else {\n\t\t\tarray[i * 4] = v3[0];\n\t\t\tarray[i * 4 + 1] = v3[1];\n\t\t\tarray[i * 4 + 2] = v3[2];\n\t\t}\n\t}\n}\n\nfunction reversePrimitiveWindingOrder(prim: Primitive) {\n\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) return;\n\tif (!prim.getIndices()) weldPrimitive(prim);\n\n\tconst indices = prim.getIndices()!;\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst c = indices.getScalar(i + 2);\n\t\tindices.setScalar(i, c);\n\t\tindices.setScalar(i + 2, a);\n\t}\n}\n","import { mat4, Mesh, Primitive } from '@gltf-transform/core';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { compactPrimitive } from './compact-primitive.js';\n\n/**\n * Applies a transform matrix to every {@link Primitive} in the given {@link Mesh}.\n *\n * For every Primitive in the Mesh, the operation first applies\n * {@link compactPrimitive} to isolate vertex streams, then calls\n * {@link transformPrimitive}. Transformed Mesh will no longer share vertex\n * attributes with any other Meshes — attributes are cloned before\n * transformation.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformMesh } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformMesh(mesh, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param mesh\n * @param matrix\n */\nexport function transformMesh(mesh: Mesh, matrix: mat4): void {\n\t// If primitives or morph targets are shared by other meshes, detach them.\n\tfor (const srcPrim of mesh.listPrimitives()) {\n\t\tconst dstPrim = shallowClonePrimitive(srcPrim, mesh);\n\t\tif (srcPrim !== dstPrim) {\n\t\t\tmesh.removePrimitive(srcPrim).addPrimitive(dstPrim);\n\t\t}\n\t}\n\n\t// Isolate vertex streams, remove unused vertices, and transform.\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tcompactPrimitive(prim);\n\t\ttransformPrimitive(prim, matrix);\n\t}\n}\n\n/**\n * Conditionally clones a {@link Primitive} and its\n * {@link PrimitiveTarget PrimitiveTargets}, if any are shared with other\n * parents. If nothing is shared, nothing is cloned. Accessors and materials\n * are not cloned.\n *\n * @hidden\n * @internal\n */\nfunction shallowClonePrimitive(prim: Primitive, parentMesh: Mesh): Primitive {\n\tconst isSharedPrimitive = prim.listParents().some((parent) => parent instanceof Mesh && parent !== parentMesh);\n\tif (isSharedPrimitive) {\n\t\tprim = prim.clone();\n\t}\n\n\tfor (const target of prim.listTargets()) {\n\t\tconst isSharedTarget = target.listParents().some((parent) => parent instanceof Primitive && parent !== prim);\n\t\tif (isSharedTarget) {\n\t\t\tprim.removeTarget(target).addTarget(target.clone());\n\t\t}\n\t}\n\n\treturn prim;\n}\n","import { mat4, MathUtils, Node } from '@gltf-transform/core';\nimport { multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { transformMesh } from './transform-mesh.js';\n\n// prettier-ignore\nconst IDENTITY: mat4 = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n];\n\n/**\n * Clears local transform of the {@link Node}, applying the transform to children and meshes.\n *\n * - Applies transform to children\n * - Applies transform to {@link Mesh mesh}\n * - Resets {@link Light lights}, {@link Camera cameras}, and other attachments to the origin\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeTransform } from '@gltf-transform/functions';\n *\n * node.getTranslation(); // → [ 5, 0, 0 ]\n * node.getMesh(); // → vertex data centered at origin\n *\n * clearNodeTransform(node);\n *\n * node.getTranslation(); // → [ 0, 0, 0 ]\n * node.getMesh(); // → vertex data centered at [ 5, 0, 0 ]\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeTransform(node: Node): Node {\n\tconst mesh = node.getMesh();\n\tconst localMatrix = node.getMatrix();\n\n\tif (mesh && !MathUtils.eq(localMatrix, IDENTITY)) {\n\t\ttransformMesh(mesh, localMatrix);\n\t}\n\n\tfor (const child of node.listChildren()) {\n\t\tconst matrix = child.getMatrix();\n\t\tmultiplyMat4(matrix, matrix, localMatrix);\n\t\tchild.setMatrix(matrix);\n\t}\n\n\treturn node.setMatrix(IDENTITY);\n}\n","import { ComponentTypeToTypedArray, Document, Primitive } from '@gltf-transform/core';\nimport { getGLPrimitiveCount, shallowCloneAccessor } from './utils.js';\nimport { weldPrimitive } from './weld.js';\n\nconst { LINES, LINE_STRIP, LINE_LOOP, TRIANGLES, TRIANGLE_STRIP, TRIANGLE_FAN } = Primitive.Mode;\n\n/**\n * Converts a LINE_STRIP or LINE_LOOP {@link Primitive} to LINES, which is\n * more widely supported. Any other topology given as input (points or\n * triangles) will throw an error.\n *\n * Example:\n *\n * ```javascript\n * import { convertPrimitiveToLines } from '@gltf-transform/functions';\n *\n * console.log(prim.getMode()); // 2 (LINE_LOOP)\n * convertPrimitiveToLines(prim);\n * console.log(prim.getMode()); // 1 (LINES)\n * ```\n */\nexport function convertPrimitiveToLines(prim: Primitive): void {\n\tconst graph = prim.getGraph();\n\tconst document = Document.fromGraph(graph)!;\n\n\t// Ensure indexed primitive.\n\tif (!prim.getIndices()) {\n\t\tweldPrimitive(prim);\n\t}\n\n\t// Allocate indices new GL primitives.\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcIndicesArray = srcIndices.getArray()!;\n\tconst dstGLPrimitiveCount = getGLPrimitiveCount(prim);\n\tconst IndicesArray = ComponentTypeToTypedArray[srcIndices.getComponentType()];\n\tconst dstIndicesArray = new IndicesArray(dstGLPrimitiveCount * 2);\n\n\t// Generate GL primitives.\n\tconst srcMode = prim.getMode();\n\tif (srcMode === LINE_STRIP) {\n\t\t// https://glasnost.itcarlow.ie/~powerk/opengl/primitives/primitives.htm\n\t\tfor (let i = 0; i < dstGLPrimitiveCount; i++) {\n\t\t\tdstIndicesArray[i * 2] = srcIndicesArray[i];\n\t\t\tdstIndicesArray[i * 2 + 1] = srcIndicesArray[i + 1];\n\t\t}\n\t} else if (srcMode === LINE_LOOP) {\n\t\t// https://glasnost.itcarlow.ie/~powerk/opengl/primitives/primitives.htm\n\t\tfor (let i = 0; i < dstGLPrimitiveCount; i++) {\n\t\t\tif (i < dstGLPrimitiveCount - 1) {\n\t\t\t\tdstIndicesArray[i * 2] = srcIndicesArray[i];\n\t\t\t\tdstIndicesArray[i * 2 + 1] = srcIndicesArray[i + 1];\n\t\t\t} else {\n\t\t\t\tdstIndicesArray[i * 2] = srcIndicesArray[i];\n\t\t\t\tdstIndicesArray[i * 2 + 1] = srcIndicesArray[0];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tthrow new Error('Only LINE_STRIP and LINE_LOOP may be converted to LINES.');\n\t}\n\n\t// Update prim mode and indices.\n\tprim.setMode(LINES);\n\tconst root = document.getRoot();\n\tif (srcIndices.listParents().some((parent) => parent !== root && parent !== prim)) {\n\t\tprim.setIndices(shallowCloneAccessor(document, srcIndices).setArray(dstIndicesArray));\n\t} else {\n\t\tsrcIndices.setArray(dstIndicesArray);\n\t}\n}\n\n/**\n * Converts a TRIANGLE_STRIP or TRIANGLE_LOOP {@link Primitive} to TRIANGLES,\n * which is more widely supported. Any other topology given as input (points or\n * lines) will throw an error.\n *\n * Example:\n *\n * ```javascript\n * import { convertPrimitiveToTriangles } from '@gltf-transform/functions';\n *\n * console.log(prim.getMode()); // 5 (TRIANGLE_STRIP)\n * convertPrimitiveToTriangles(prim);\n * console.log(prim.getMode()); // 4 (TRIANGLES)\n * ```\n */\nexport function convertPrimitiveToTriangles(prim: Primitive): void {\n\tconst graph = prim.getGraph();\n\tconst document = Document.fromGraph(graph)!;\n\n\t// Ensure indexed primitive.\n\tif (!prim.getIndices()) {\n\t\tweldPrimitive(prim);\n\t}\n\n\t// Allocate indices new GL primitives.\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcIndicesArray = srcIndices.getArray()!;\n\tconst dstGLPrimitiveCount = getGLPrimitiveCount(prim);\n\tconst IndicesArray = ComponentTypeToTypedArray[srcIndices.getComponentType()];\n\tconst dstIndicesArray = new IndicesArray(dstGLPrimitiveCount * 3);\n\n\t// Generate GL primitives.\n\tconst srcMode = prim.getMode();\n\tif (srcMode === TRIANGLE_STRIP) {\n\t\t// https://en.wikipedia.org/wiki/Triangle_strip\n\t\tfor (let i = 0, il = srcIndicesArray.length; i < il - 2; i++) {\n\t\t\tif (i % 2) {\n\t\t\t\tdstIndicesArray[i * 3] = srcIndicesArray[i + 1];\n\t\t\t\tdstIndicesArray[i * 3 + 1] = srcIndicesArray[i];\n\t\t\t\tdstIndicesArray[i * 3 + 2] = srcIndicesArray[i + 2];\n\t\t\t} else {\n\t\t\t\tdstIndicesArray[i * 3] = srcIndicesArray[i];\n\t\t\t\tdstIndicesArray[i * 3 + 1] = srcIndicesArray[i + 1];\n\t\t\t\tdstIndicesArray[i * 3 + 2] = srcIndicesArray[i + 2];\n\t\t\t}\n\t\t}\n\t} else if (srcMode === TRIANGLE_FAN) {\n\t\t// https://en.wikipedia.org/wiki/Triangle_fan\n\t\tfor (let i = 0; i < dstGLPrimitiveCount; i++) {\n\t\t\tdstIndicesArray[i * 3] = srcIndicesArray[0];\n\t\t\tdstIndicesArray[i * 3 + 1] = srcIndicesArray[i + 1];\n\t\t\tdstIndicesArray[i * 3 + 2] = srcIndicesArray[i + 2];\n\t\t}\n\t} else {\n\t\tthrow new Error('Only TRIANGLE_STRIP and TRIANGLE_FAN may be converted to TRIANGLES.');\n\t}\n\n\t// Update prim mode and indices.\n\tprim.setMode(TRIANGLES);\n\tconst root = document.getRoot();\n\tif (srcIndices.listParents().some((parent) => parent !== root && parent !== prim)) {\n\t\tprim.setIndices(shallowCloneAccessor(document, srcIndices).setArray(dstIndicesArray));\n\t} else {\n\t\tsrcIndices.setArray(dstIndicesArray);\n\t}\n}\n","import {\n\tMathUtils,\n\ttype Accessor,\n\ttype Document,\n\ttype GLTF,\n\ttype Primitive,\n\ttype Transform,\n\tTypedArray,\n} from '@gltf-transform/core';\nimport { KHRMeshQuantization } from '@gltf-transform/extensions';\nimport { assignDefaults, createTransform } from './utils.js';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: Required<DequantizeOptions> = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link KHRMeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n *\n * Example:\n *\n * ```javascript\n * import { dequantizePrimitive } from '@gltf-transform/functions';\n *\n * await document.transform(dequantize());\n * ```\n *\n * @category Transforms\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = assignDefaults(DEQUANTIZE_DEFAULTS, _options);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(KHRMeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Dequantize a single {@link Primitive}, converting all vertex attributes to float32. Dequantization\n * will increase the size of the mesh on disk and in memory, but may be necessary for compatibility\n * with applications that don't support quantization.\n *\n * Example:\n *\n * ```javascript\n * import { dequantizePrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes().find((mesh) => mesh.getName() === 'MyMesh');\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tdequantizePrimitive(prim);\n * }\n * ```\n */\nexport function dequantizePrimitive(prim: Primitive, _options = DEQUANTIZE_DEFAULTS): void {\n\tconst options = assignDefaults(DEQUANTIZE_DEFAULTS, _options);\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (options.pattern.test(semantic)) {\n\t\t\tdequantizeAttribute(prim.getAttribute(semantic)!);\n\t\t}\n\t}\n\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tif (options.pattern.test(semantic)) {\n\t\t\t\tdequantizeAttribute(target.getAttribute(semantic)!);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function dequantizeAttribute(attribute: Accessor): void {\n\tconst srcArray = attribute.getArray();\n\tif (!srcArray) return;\n\n\tconst dstArray = dequantizeAttributeArray(srcArray, attribute.getComponentType(), attribute.getNormalized());\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n\nexport function dequantizeAttributeArray(\n\tsrcArray: TypedArray,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean,\n): Float32Array {\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = srcArray.length; i < il; i++) {\n\t\tif (normalized) {\n\t\t\tdstArray[i] = MathUtils.decodeNormalizedInt(srcArray[i], componentType);\n\t\t} else {\n\t\t\tdstArray[i] = srcArray[i];\n\t\t}\n\t}\n\n\treturn dstArray;\n}\n","import { Document, Extension, Graph, Property, PropertyResolver, PropertyType } from '@gltf-transform/core';\n\nconst { TEXTURE_INFO, ROOT } = PropertyType;\ntype PropertyConstructor = new (g: Graph<Property>) => Property;\n\nconst NO_TRANSFER_TYPES = new Set<string>([TEXTURE_INFO, ROOT]);\n\n/**\n * Clones source {@link Document}, copying all properties and extensions within\n * it. Source document remains unchanged, and the two may be modified\n * independently after cloning.\n *\n * Example:\n *\n * ```javascript\n *\timport { cloneDocument } from '@gltf-transform/functions';\n *\n *\tconst targetDocument = cloneDocument(sourceDocument);\n * ```\n */\nexport function cloneDocument(source: Document): Document {\n\tconst target = new Document().setLogger(source.getLogger());\n\tconst resolve = createDefaultPropertyResolver(target, source);\n\tmergeDocuments(target, source, resolve);\n\n\t// Root properties (name, asset, default scene, extras) are not overwritten by\n\t// mergeDocuments(), and should be explicitly copied when cloning.\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\ttarget.getRoot().copy(source.getRoot(), resolve as any);\n\n\treturn target;\n}\n\n/**\n * Merges contents of source {@link Document} into target Document, without\n * modifying the source. Any extensions missing from the target will be added\n * {@link Scene Scenes} and {@link Buffer Buffers} are not combined —\n * the target Document may contain multiple Scenes and Buffers after this\n * operation. These may be cleaned up manually (see {@link unpartition}),\n * or document contents may be merged more granularly using\n * {@link copyToDocument}.\n *\n * Example:\n *\n * ```javascript\n *\timport { mergeDocuments, unpartition } from '@gltf-transform/functions';\n *\n *\t// Merge contents of sourceDocument into targetDocument.\n *\tmergeDocuments(targetDocument, sourceDocument);\n *\n *\t// (Optional) Remove all but one Buffer from the target Document.\n *\tawait targetDocument.transform(unpartition());\n * ```\n *\n * To merge several Scenes into one:\n *\n * ```javascript\n * import { mergeDocuments } from '@gltf-transform/functions';\n *\n * const map = mergeDocuments(targetDocument, sourceDocument);\n *\n * // Find original Scene.\n * const sceneA = targetDocument.getRoot().listScenes()[0];\n *\n * // Find counterpart of the source Scene in the target Document.\n * const sceneB = map.get(sourceDocument.getRoot().listScenes()[0]);\n *\n * // Create a Node, and append source Scene's direct children.\n * const rootNode = targetDocument.createNode()\n *\t\t.setName('SceneB')\n *\t\t.setPosition([10, 0, 0]);\n * for (const node of sceneB.listChildren()) {\n *\t\trootNode.addChild(node);\n * }\n *\n * // Append Node to original Scene, and dispose the empty Scene.\n * sceneA.addChild(rootNode);\n * sceneB.dispose();\n * ```\n */\nexport function mergeDocuments(\n\ttarget: Document,\n\tsource: Document,\n\tresolve?: PropertyResolver<Property>,\n): Map<Property, Property> {\n\tresolve ||= createDefaultPropertyResolver(target, source);\n\n\tfor (const sourceExtension of source.getRoot().listExtensionsUsed()) {\n\t\tconst targetExtension = target.createExtension(sourceExtension.constructor as new (doc: Document) => Extension);\n\t\tif (sourceExtension.isRequired()) targetExtension.setRequired(true);\n\t}\n\n\t// Root properties (name, asset, default scene, extras) are not overwritten.\n\treturn _copyToDocument(target, source, listNonRootProperties(source), resolve);\n}\n\n/**\n * Moves the specified {@link Property Properties} from the source\n * {@link Document} to the target Document, and removes them from the source.\n * Dependencies of the source properties will be copied into the\n * target, but not removed from the source. Returns a Map from source\n * properties to their counterparts in the target Document.\n *\n * Example:\n *\n * ```javascript\n *\timport { moveToDocument, prune } from '@gltf-transform/functions';\n *\n *\t// Move all materials from sourceDocument to targetDocument.\n *\tconst map = moveToDocument(targetDocument, sourceDocument, sourceDocument.listMaterials());\n *\n *\t// Find the new counterpart of `sourceMaterial` in the target Document.\n *\tconst targetMaterial = map.get(sourceMaterial);\n *\n *\t// (Optional) Remove any resources (like Textures) that may now be unused\n *\t// in the source Document after their parent Materials have been moved.\n *\tawait sourceDocument.transform(prune());\n * ```\n *\n * Moving a {@link Mesh}, {@link Animation}, or another resource depending on\n * a {@link Buffer} will create a copy of the source Buffer in the target\n * Document. If the target Document should contain only one Buffer, call\n * {@link unpartition} after moving properties.\n *\n * Repeated use of `moveToDocument` may create multiple copies of some\n * resources, particularly shared dependencies like {@link Texture Textures} or\n * {@link Accessor Accessors}. While duplicates can be cleaned up with\n * {@link dedup}, it is also possible to prevent duplicates by creating and\n * reusing the same resolver for all calls to `moveToDocument`:\n *\n * ```javascript\n *\timport { moveToDocument, createDefaultPropertyResolver } from '@gltf-transform/functions';\n *\n *\tconst resolve = createDefaultPropertyResolver(targetDocument, sourceDocument);\n *\n *\t// Move materials individually, without creating duplicates of shared textures.\n *\tmoveToDocument(targetDocument, sourceDocument, materialA, resolve);\n *\tmoveToDocument(targetDocument, sourceDocument, materialB, resolve);\n *\tmoveToDocument(targetDocument, sourceDocument, materialC, resolve);\n * ```\n *\n * If the transferred properties include {@link ExtensionProperty ExtensionProperties},\n * the associated {@link Extension Extensions} must be added to the target\n * Document first:\n *\n * ```javascript\n *\tfor (const sourceExtension of source.getRoot().listExtensionsUsed()) {\n *\t\tconst targetExtension = target.createExtension(sourceExtension.constructor);\n *\t\tif (sourceExtension.isRequired()) targetExtension.setRequired(true);\n *\t}\n * ```\n *\n * {@link Root} properties cannot be moved.\n *\n * {@link TextureInfo} properties cannot be given in the property list, but\n * are handled automatically when moving a {@link Material}.\n *\n * To copy properties without removing them from the source Document, see\n * {@link copyToDocument}.\n *\n * @experimental\n */\nexport function moveToDocument(\n\ttarget: Document,\n\tsource: Document,\n\tsourceProperties: Property[],\n\tresolve?: PropertyResolver<Property>,\n): Map<Property, Property> {\n\tconst targetProperties = copyToDocument(target, source, sourceProperties, resolve);\n\n\tfor (const property of sourceProperties) {\n\t\tproperty.dispose();\n\t}\n\n\treturn targetProperties;\n}\n\n/**\n * Copies the specified {@link Property Properties} from the source\n * {@link Document} to the target Document, leaving originals in the source.\n * Dependencies of the source properties will also be copied into the\n * target. Returns a Map from source properties to their counterparts in the\n * target Document.\n *\n * Example:\n *\n * ```javascript\n *\timport { copyToDocument } from '@gltf-transform/functions';\n *\n *\t// Copy all materials from sourceDocument to targetDocument.\n *\tconst map = copyToDocument(targetDocument, sourceDocument, sourceDocument.listMaterials());\n *\n *\t// Find the new counterpart of `sourceMaterial` in the target Document.\n *\tconst targetMaterial = map.get(sourceMaterial);\n * ```\n *\n * Copying a {@link Mesh}, {@link Animation}, or another resource depending on\n * a {@link Buffer} will create a copy of the source Buffer in the target\n * Document. If the target Document should contain only one Buffer, call\n * {@link unpartition} after copying properties.\n *\n * Repeated use of `copyToDocument` may create multiple copies of some\n * resources, particularly shared dependencies like {@link Texture Textures} or\n * {@link Accessor Accessors}. While duplicates can be cleaned up with\n * {@link dedup}, it is also possible to prevent duplicates by creating and\n * reusing the same resolver for all calls to `copyToDocument`:\n *\n * ```javascript\n *\timport { copyToDocument, createDefaultPropertyResolver } from '@gltf-transform/functions';\n *\n *\tconst resolve = createDefaultPropertyResolver(targetDocument, sourceDocument);\n *\n *\t// Copy materials individually, without creating duplicates of shared textures.\n *\tcopyToDocument(targetDocument, sourceDocument, materialA, resolve);\n *\tcopyToDocument(targetDocument, sourceDocument, materialB, resolve);\n *\tcopyToDocument(targetDocument, sourceDocument, materialC, resolve);\n * ```\n *\n * If the transferred properties include {@link ExtensionProperty ExtensionProperties},\n * the associated {@link Extension Extensions} must be added to the target\n * Document first:\n *\n * ```javascript\n *\tfor (const sourceExtension of source.getRoot().listExtensionsUsed()) {\n *\t\tconst targetExtension = target.createExtension(sourceExtension.constructor);\n *\t\tif (sourceExtension.isRequired()) targetExtension.setRequired(true);\n *\t}\n * ```\n *\n * {@link Root} properties cannot be copied.\n *\n * {@link TextureInfo} properties cannot be given in the property list, but\n * are handled automatically when copying a {@link Material}.\n *\n * To move properties to the target Document without leaving copies behind in\n * the source Document, use {@link moveToDocument} or dispose the properties\n * after copying.\n *\n * @experimental\n */\nexport function copyToDocument(\n\ttarget: Document,\n\tsource: Document,\n\tsourceProperties: Property[],\n\tresolve?: PropertyResolver<Property>,\n): Map<Property, Property> {\n\tconst sourcePropertyDependencies = new Set<Property>();\n\tfor (const property of sourceProperties) {\n\t\tif (NO_TRANSFER_TYPES.has(property.propertyType)) {\n\t\t\tthrow new Error(`Type \"${property.propertyType}\" cannot be transferred.`);\n\t\t}\n\t\tlistPropertyDependencies(property, sourcePropertyDependencies);\n\t}\n\treturn _copyToDocument(target, source, Array.from(sourcePropertyDependencies), resolve);\n}\n\n/** @internal */\nfunction _copyToDocument(\n\ttarget: Document,\n\tsource: Document,\n\tsourceProperties: Property[],\n\tresolve?: PropertyResolver<Property>,\n): Map<Property, Property> {\n\tresolve ||= createDefaultPropertyResolver(target, source);\n\n\t// Create stub classes for every Property in other Document.\n\tconst propertyMap = new Map<Property, Property>();\n\tfor (const sourceProp of sourceProperties) {\n\t\t// TextureInfo copy handled by Material or ExtensionProperty.\n\t\tif (!propertyMap.has(sourceProp) && sourceProp.propertyType !== TEXTURE_INFO) {\n\t\t\tpropertyMap.set(sourceProp, resolve(sourceProp));\n\t\t}\n\t}\n\n\t// Assemble relationships between Properties.\n\tfor (const [sourceProp, targetProp] of propertyMap.entries()) {\n\t\ttargetProp.copy(sourceProp, resolve);\n\t}\n\n\treturn propertyMap;\n}\n\n/**\n * Creates a default `resolve` implementation. May be used when moving\n * properties between {@link Document Documents} with {@link mergeDocuments},\n * {@link copyToDocument}, and {@link moveToDocument}. When the same resolver\n * is passed to multiple invocations, these functions will reuse previously-\n * transferred resources.\n *\n * @experimental\n */\nexport function createDefaultPropertyResolver(target: Document, source: Document): PropertyResolver<Property> {\n\tconst propertyMap = new Map<Property, Property>([[source.getRoot(), target.getRoot()]]);\n\n\treturn (sourceProp: Property): Property => {\n\t\t// TextureInfo lifecycle is bound to a Material or ExtensionProperty.\n\t\tif (sourceProp.propertyType === TEXTURE_INFO) return sourceProp;\n\n\t\tlet targetProp = propertyMap.get(sourceProp);\n\t\tif (!targetProp) {\n\t\t\t// Create stub class, defer copying properties.\n\t\t\tconst PropertyClass = sourceProp.constructor as PropertyConstructor;\n\t\t\ttargetProp = new PropertyClass(target.getGraph());\n\t\t\tpropertyMap.set(sourceProp, targetProp);\n\t\t}\n\n\t\treturn targetProp;\n\t};\n}\n\n/** @internal */\nfunction listPropertyDependencies(parent: Property, visited: Set<Property>): Set<Property> {\n\tconst graph = parent.getGraph();\n\tconst queue: Property[] = [parent];\n\n\tlet next: Property | undefined = undefined;\n\twhile ((next = queue.pop())) {\n\t\tvisited.add(next);\n\t\tfor (const child of graph.listChildren(next)) {\n\t\t\tif (!visited.has(child)) {\n\t\t\t\tqueue.push(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn visited;\n}\n\n/** @internal */\nfunction listNonRootProperties(document: Document): Property[] {\n\tconst visited = new Set<Property>();\n\tfor (const edge of document.getGraph().listEdges()) {\n\t\tvisited.add(edge.getChild());\n\t}\n\treturn Array.from(visited);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRDracoMeshCompression } from '@gltf-transform/extensions';\nimport { assignDefaults, createTransform } from './utils.js';\nimport { weld } from './weld.js';\n\nconst NAME = 'draco';\n\nexport interface DracoOptions {\n\tmethod?: 'edgebreaker' | 'sequential';\n\tencodeSpeed?: number;\n\tdecodeSpeed?: number;\n\tquantizePosition?: number;\n\tquantizeNormal?: number;\n\tquantizeColor?: number;\n\tquantizeTexcoord?: number;\n\tquantizeGeneric?: number;\n\tquantizationVolume?: 'mesh' | 'scene';\n}\n\nexport const DRACO_DEFAULTS: Required<DracoOptions> = {\n\tmethod: 'edgebreaker',\n\tencodeSpeed: 5,\n\tdecodeSpeed: 5,\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeColor: 8,\n\tquantizeTexcoord: 12,\n\tquantizeGeneric: 12,\n\tquantizationVolume: 'mesh',\n};\n\n/**\n * Applies Draco compression using {@link KHRDracoMeshCompression KHR_draco_mesh_compression}.\n * Draco compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link KHRDracoMeshCompression} extension.\n *\n * ### Example\n *\n * ```typescript\n * import { NodeIO } from '@gltf-transform/core';\n * import { KHRDracoMeshCompression } from '@gltf-transform/extensions';\n * import { draco } from '@gltf-transform/functions';\n * import draco3d from 'draco3dgltf';\n *\n * const io = new NodeIO()\n * \t.registerExtensions([KHRDracoMeshCompression])\n * \t.registerDependencies({\n * \t\t'draco3d.encoder': await draco3d.createEncoderModule()\n * \t});\n *\n * await document.transform(\n *   draco({method: 'edgebreaker'})\n * );\n *\n * await io.write('compressed.glb', document);\n * ```\n *\n * Compression is deferred until generating output with an I/O class.\n *\n * @category Transforms\n */\nexport function draco(_options: DracoOptions = DRACO_DEFAULTS): Transform {\n\tconst options = assignDefaults(DRACO_DEFAULTS, _options);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tawait document.transform(weld());\n\t\tdocument\n\t\t\t.createExtension(KHRDracoMeshCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.method === 'edgebreaker'\n\t\t\t\t\t\t? KHRDracoMeshCompression.EncoderMethod.EDGEBREAKER\n\t\t\t\t\t\t: KHRDracoMeshCompression.EncoderMethod.SEQUENTIAL,\n\t\t\t\tencodeSpeed: options.encodeSpeed,\n\t\t\t\tdecodeSpeed: options.decodeSpeed,\n\t\t\t\tquantizationBits: {\n\t\t\t\t\tPOSITION: options.quantizePosition,\n\t\t\t\t\tNORMAL: options.quantizeNormal,\n\t\t\t\t\tCOLOR: options.quantizeColor,\n\t\t\t\t\tTEX_COORD: options.quantizeTexcoord,\n\t\t\t\t\tGENERIC: options.quantizeGeneric,\n\t\t\t\t},\n\t\t\t\tquantizationVolume: options.quantizationVolume,\n\t\t\t});\n\t});\n}\n","import { Document, Node, PropertyType, Transform } from '@gltf-transform/core';\nimport { clearNodeParent } from './clear-node-parent.js';\nimport { prune } from './prune.js';\nimport { assignDefaults, createTransform } from './utils.js';\n\nconst NAME = 'flatten';\n\n/** Options for the {@link flatten} function. */\nexport interface FlattenOptions {\n\t/**\n\t * Whether to perform cleanup steps after completing the operation. Recommended, and enabled by\n\t * default. Cleanup removes temporary resources created during the operation, but may also remove\n\t * pre-existing unused or duplicate resources in the {@link Document}. Applications that require\n\t * keeping these resources may need to disable cleanup, instead calling {@link dedup} and\n\t * {@link prune} manually (with customized options) later in the processing pipeline.\n\t * @experimental\n\t */\n\tcleanup?: boolean;\n}\n\nexport const FLATTEN_DEFAULTS: Required<FlattenOptions> = {\n\tcleanup: true,\n};\n\n/**\n * Flattens the scene graph, leaving {@link Node Nodes} with\n * {@link Mesh Meshes}, {@link Camera Cameras}, and other attachments\n * as direct children of the {@link Scene}. Skeletons and their\n * descendants are left in their original Node structure.\n *\n * {@link Animation} targeting a Node or its parents will\n * prevent that Node from being moved.\n *\n * Example:\n *\n * ```ts\n * import { flatten } from '@gltf-transform/functions';\n *\n * await document.transform(flatten());\n * ```\n *\n * @category Transforms\n */\nexport function flatten(_options: FlattenOptions = FLATTEN_DEFAULTS): Transform {\n\tconst options = assignDefaults(FLATTEN_DEFAULTS, _options);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// (1) Mark joints.\n\t\tconst joints = new Set<Node>();\n\t\tfor (const skin of root.listSkins()) {\n\t\t\tfor (const joint of skin.listJoints()) {\n\t\t\t\tjoints.add(joint);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Mark nodes with TRS animation.\n\t\tconst animated = new Set<Node>();\n\t\tfor (const animation of root.listAnimations()) {\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tconst node = channel.getTargetNode();\n\t\t\t\tif (node && channel.getTargetPath() !== 'weights') {\n\t\t\t\t\tanimated.add(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Mark descendants of joints and animated nodes.\n\t\tconst hasJointParent = new Set<Node>();\n\t\tconst hasAnimatedParent = new Set<Node>();\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst parent = node.getParentNode();\n\t\t\t\tif (!parent) return;\n\t\t\t\tif (joints.has(parent) || hasJointParent.has(parent)) {\n\t\t\t\t\thasJointParent.add(node);\n\t\t\t\t}\n\t\t\t\tif (animated.has(parent) || hasAnimatedParent.has(parent)) {\n\t\t\t\t\thasAnimatedParent.add(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// (4) For each affected node, in top-down order, clear parents.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tif (animated.has(node)) return;\n\t\t\t\tif (hasJointParent.has(node)) return;\n\t\t\t\tif (hasAnimatedParent.has(node)) return;\n\n\t\t\t\tclearNodeParent(node);\n\t\t\t});\n\t\t}\n\n\t\t// TODO(feat): Transform animation channels, accounting for previously inherited transforms.\n\t\tif (animated.size) {\n\t\t\tlogger.debug(`${NAME}: Flattening node hierarchies with TRS animation not yet supported.`);\n\t\t}\n\n\t\t// (5) Clean up leaf nodes.\n\t\tif (options.cleanup) {\n\t\t\tawait document.transform(prune({ propertyTypes: [PropertyType.NODE], keepLeaves: false }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Scene, Node, getBounds as _getBounds, bbox } from '@gltf-transform/core';\n\n/**\n * Computes bounding box (AABB) in world space for the given {@link Node} or {@link Scene}.\n *\n * Example:\n *\n * ```ts\n * import { getBounds } from '@gltf-transform/functions';\n *\n * const {min, max} = getBounds(scene);\n * ```\n */\nexport function getBounds(node: Node | Scene): bbox {\n\treturn _getBounds(node);\n}\n","import {\n\tAccessor,\n\tDocument,\n\tExtensionProperty,\n\tGLTF,\n\tImageUtils,\n\tTexture,\n\tgetBounds,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils.js';\nimport { KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_UASTC, read as readKTX } from 'ktx-parse';\nimport { VertexCountMethod, getMeshVertexCount, getSceneVertexCount } from './get-vertex-count.js';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect(doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes(doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc\n\t\t.getRoot()\n\t\t.listScenes()\n\t\t.map((scene) => {\n\t\t\tconst root = scene.listChildren()[0];\n\t\t\tconst sceneBounds = getBounds(scene);\n\t\t\treturn {\n\t\t\t\tname: scene.getName(),\n\t\t\t\trootName: root ? root.getName() : '',\n\t\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t\t\trenderVertexCount: getSceneVertexCount(scene, VertexCountMethod.RENDER),\n\t\t\t\tuploadVertexCount: getSceneVertexCount(scene, VertexCountMethod.UPLOAD),\n\t\t\t\tuploadNaiveVertexCount: getSceneVertexCount(scene, VertexCountMethod.UPLOAD_NAIVE),\n\t\t\t};\n\t\t});\n\treturn { properties: scenes };\n}\n\n/** List meshes. */\nfunction listMeshes(doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc\n\t\t.getRoot()\n\t\t.listMeshes()\n\t\t.map((mesh) => {\n\t\t\tconst instances = mesh.listParents().filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\t\t\tlet glPrimitives = 0;\n\t\t\tconst semantics = new Set<string>();\n\t\t\tconst meshIndices = new Set<string>();\n\t\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\t\tsemantics.add(semantic + ':' + accessorToTypeLabel(attr));\n\t\t\t\t\tmeshAccessors.add(attr);\n\t\t\t\t}\n\t\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t\t}\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tmeshIndices.add(accessorToTypeLabel(indices));\n\t\t\t\t\tmeshAccessors.add(indices);\n\t\t\t\t}\n\t\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\t\tconst modes = mesh.listPrimitives().map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\t\treturn {\n\t\t\t\tname: mesh.getName(),\n\t\t\t\tmode: Array.from(new Set(modes)),\n\t\t\t\tmeshPrimitives: mesh.listPrimitives().length,\n\t\t\t\tglPrimitives: glPrimitives,\n\t\t\t\tvertices: getMeshVertexCount(mesh, VertexCountMethod.UPLOAD),\n\t\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\t\tinstances: instances,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: meshes };\n}\n\n/** List materials. */\nfunction listMaterials(doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc\n\t\t.getRoot()\n\t\t.listMaterials()\n\t\t.map((material) => {\n\t\t\tconst instances = material\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\t// Find all texture slots attached to this material or its extensions.\n\t\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listEdges()\n\t\t\t\t.filter((ref) => {\n\t\t\t\t\tconst child = ref.getChild();\n\t\t\t\t\tconst parent = ref.getParent();\n\t\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (child instanceof Texture && parent instanceof ExtensionProperty && extensions.has(parent)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.map((ref) => ref.getName());\n\n\t\t\treturn {\n\t\t\t\tname: material.getName(),\n\t\t\t\tinstances,\n\t\t\t\ttextures: slots,\n\t\t\t\talphaMode: material.getAlphaMode(),\n\t\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t\t};\n\t\t});\n\n\treturn { properties: materials };\n}\n\n/** List textures. */\nfunction listTextures(doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc\n\t\t.getRoot()\n\t\t.listTextures()\n\t\t.map((texture) => {\n\t\t\tconst instances = texture\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listParentEdges(texture)\n\t\t\t\t.filter((edge) => edge.getParent().propertyType !== PropertyType.ROOT)\n\t\t\t\t.map((edge) => edge.getName());\n\n\t\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\t\tlet compression = '';\n\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\tconst container = readKTX(texture.getImage()!);\n\t\t\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\t\t\tif (dfd.colorModel === KHR_DF_MODEL_ETC1S) {\n\t\t\t\t\tcompression = 'ETC1S';\n\t\t\t\t} else if (dfd.colorModel === KHR_DF_MODEL_UASTC) {\n\t\t\t\t\tcompression = 'UASTC';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: texture.getName(),\n\t\t\t\turi: texture.getURI(),\n\t\t\t\tslots: Array.from(new Set(slots)),\n\t\t\t\tinstances,\n\t\t\t\tmimeType: texture.getMimeType(),\n\t\t\t\tcompression,\n\t\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\t\tgpuSize: ImageUtils.getVRAMByteLength(texture.getImage()!, texture.getMimeType()),\n\t\t\t};\n\t\t});\n\n\treturn { properties: textures };\n}\n\n/** List animations. */\nfunction listAnimations(doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc\n\t\t.getRoot()\n\t\t.listAnimations()\n\t\t.map((anim) => {\n\t\t\tlet minTime = Infinity;\n\t\t\tlet maxTime = -Infinity;\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tif (!input) return;\n\t\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tlet keyframes = 0;\n\t\t\tconst accessors: Set<Accessor> = new Set();\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (!input) return;\n\t\t\t\tkeyframes += input.getCount();\n\t\t\t\taccessors.add(input);\n\t\t\t\tif (!output) return;\n\t\t\t\taccessors.add(output);\n\t\t\t});\n\t\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tname: anim.getName(),\n\t\t\t\tchannels: anim.listChannels().length,\n\t\t\t\tsamplers: anim.listSamplers().length,\n\t\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\t\tkeyframes: keyframes,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: animations };\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n\trenderVertexCount: number;\n\tuploadVertexCount: number;\n\tuploadNaiveVertexCount: number;\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tmeshPrimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tcompression: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\nconst NumericTypeLabels: Record<string, string> = {\n\tFloat32Array: 'f32',\n\tUint32Array: 'u32',\n\tUint16Array: 'u16',\n\tUint8Array: 'u8',\n\tInt32Array: 'i32',\n\tInt16Array: 'i16',\n\tInt8Array: 'i8',\n};\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction accessorToTypeLabel(accessor: Accessor): string {\n\tconst array = accessor.getArray()!;\n\tconst base = NumericTypeLabels[array.constructor.name] || '?';\n\tconst suffix = accessor.getNormalized() ? '_norm' : '';\n\treturn base + suffix;\n}\n","import { Document, ILogger, MathUtils, Mesh, Node, Primitive, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, EXTMeshGPUInstancing } from '@gltf-transform/extensions';\nimport { assignDefaults, createTransform } from './utils.js';\n\nconst NAME = 'instance';\n\nexport interface InstanceOptions {\n\t/** Minimum number of meshes considered eligible for instancing. Default: 5. */\n\tmin?: number;\n}\n\nexport const INSTANCE_DEFAULTS: Required<InstanceOptions> = {\n\tmin: 5,\n};\n\n/**\n * Creates GPU instances (with {@link EXTMeshGPUInstancing}) for shared {@link Mesh} references. In\n * engines supporting the extension, reused Meshes will be drawn with GPU instancing, greatly\n * reducing draw calls and improving performance in many cases. If you're not sure that identical\n * Meshes share vertex data and materials (\"linked duplicates\"), run {@link dedup} first to link them.\n *\n * Example:\n *\n * ```javascript\n * import { dedup, instance } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup(),\n * \tinstance({min: 5}),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function instance(_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\tconst options = assignDefaults(INSTANCE_DEFAULTS, _options);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tif (root.listAnimations().length) {\n\t\t\tlogger.warn(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst batchExtension = doc.createExtension(EXTMeshGPUInstancing);\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tif (node.getExtension('EXT_mesh_gpu_instancing')) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < options.min) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\t// Cannot preserve volumetric effects when instancing with varying scale.\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/AttenuationTest\n\t\t\t\tif (mesh.listPrimitives().some(hasVolume) && nodes.some(hasScale)) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode().setMesh(mesh).setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, (t = node.getWorldTranslation()));\n\t\t\t\t\tbatchRotation.setElement(i, (r = node.getWorldRotation()));\n\t\t\t\t\tbatchScale.setElement(i, (s = node.getWorldScale()));\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tif (!needsTranslation && !needsRotation && !needsScale) {\n\t\t\t\t\tbatchNode.dispose();\n\t\t\t\t\tbatch.dispose();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Mark nodes for cleanup.\n\t\t\t\tfor (const node of nodes) {\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\n\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with >=${options.min} parent nodes were found.`);\n\t\t}\n\n\t\tif (batchExtension.listProperties().length === 0) {\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: ILogger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (\n\t\t\tnode.listChildren().length ||\n\t\t\tnode.getCamera() ||\n\t\t\tnode.getMesh() ||\n\t\t\tnode.getSkin() ||\n\t\t\tnode.listExtensions().length\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParentNode();\n\t\tif (nodeParent) nodes.push(nodeParent);\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction hasVolume(prim: Primitive) {\n\tconst material = prim.getMaterial();\n\treturn !!(material && material.getExtension('KHR_materials_volume'));\n}\n\nfunction hasScale(node: Node) {\n\tconst scale = node.getWorldScale();\n\treturn !MathUtils.eq(scale, [1, 1, 1]);\n}\n\nfunction createBatch(doc: Document, batchExtension: EXTMeshGPUInstancing, mesh: Mesh, count: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension\n\t\t.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Primitive, ComponentTypeToTypedArray, Accessor, TypedArray } from '@gltf-transform/core';\nimport { assignDefaults, createIndicesEmpty, createPrimGroupKey, shallowCloneAccessor } from './utils.js';\nimport { convertPrimitiveToLines, convertPrimitiveToTriangles } from './convert-primitive-mode.js';\n\ninterface JoinPrimitiveOptions {\n\tskipValidation?: boolean;\n}\n\nconst JOIN_PRIMITIVE_DEFAULTS: Required<JoinPrimitiveOptions> = {\n\tskipValidation: false,\n};\n\nconst EMPTY_U32 = 2 ** 32 - 1;\n\nconst { LINE_STRIP, LINE_LOOP, TRIANGLE_STRIP, TRIANGLE_FAN } = Primitive.Mode;\n\n/**\n * Given a list of compatible Mesh {@link Primitive Primitives}, returns new Primitive\n * containing their vertex data. Compatibility requires that all Primitives share the\n * same {@link Material Materials}, draw mode, and vertex attribute types. Primitives\n * using morph targets cannot currently be joined.\n *\n * Example:\n *\n * ```javascript\n * import { joinPrimitives } from '@gltf-transform/functions';\n *\n * // Succeeds if Primitives are compatible, or throws an error.\n * const result = joinPrimitives(mesh.listPrimitives());\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tprim.dispose();\n * }\n *\n * mesh.addPrimitive(result);\n * ```\n */\nexport function joinPrimitives(prims: Primitive[], _options: JoinPrimitiveOptions = {}): Primitive {\n\tconst options = assignDefaults(JOIN_PRIMITIVE_DEFAULTS, _options);\n\tconst templatePrim = prims[0]!;\n\tconst document = Document.fromGraph(templatePrim.getGraph())!;\n\n\t// (1) Validation.\n\tif (!options.skipValidation && new Set(prims.map(createPrimGroupKey)).size > 1) {\n\t\tthrow new Error(\n\t\t\t'' +\n\t\t\t\t'Requires >=2 Primitives, sharing the same Material ' +\n\t\t\t\t'and Mode, with compatible vertex attributes and indices.',\n\t\t);\n\t}\n\n\t// (2) Convert all prims to POINTS, LINES, or TRIANGLES.\n\tfor (const prim of prims) {\n\t\tswitch (prim.getMode()) {\n\t\t\tcase LINE_STRIP:\n\t\t\tcase LINE_LOOP:\n\t\t\t\tconvertPrimitiveToLines(prim);\n\t\t\t\tbreak;\n\t\t\tcase TRIANGLE_STRIP:\n\t\t\tcase TRIANGLE_FAN:\n\t\t\t\tconvertPrimitiveToTriangles(prim);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst primRemaps = [] as Uint32Array[]; // remap[srcIndex] → dstIndex, by prim\n\tconst primVertexCounts = new Uint32Array(prims.length); // vertex count, by prim\n\n\tlet dstVertexCount = 0;\n\tlet dstIndicesCount = 0;\n\n\t// (3) Build remap lists.\n\tfor (let primIndex = 0; primIndex < prims.length; primIndex++) {\n\t\tconst srcPrim = prims[primIndex];\n\t\tconst srcIndices = srcPrim.getIndices();\n\t\tconst srcVertexCount = srcPrim.getAttribute('POSITION')!.getCount();\n\t\tconst srcIndicesArray = srcIndices ? srcIndices.getArray() : null;\n\t\tconst srcIndicesCount = srcIndices ? srcIndices.getCount() : srcVertexCount;\n\n\t\tconst remap = new Uint32Array(srcVertexCount).fill(EMPTY_U32);\n\n\t\tfor (let i = 0; i < srcIndicesCount; i++) {\n\t\t\tconst index = srcIndicesArray ? srcIndicesArray[i] : i;\n\t\t\tif (remap[index] === EMPTY_U32) {\n\t\t\t\tremap[index] = dstVertexCount++;\n\t\t\t\tprimVertexCounts[primIndex]++;\n\t\t\t}\n\t\t}\n\n\t\tprimRemaps.push(remap);\n\t\tdstIndicesCount += srcIndicesCount;\n\t}\n\n\t// (4) Allocate joined attributes.\n\tconst dstPrim = document.createPrimitive().setMode(templatePrim.getMode()).setMaterial(templatePrim.getMaterial());\n\tfor (const semantic of templatePrim.listSemantics()) {\n\t\tconst tplAttribute = templatePrim.getAttribute(semantic)!;\n\t\tconst AttributeArray = ComponentTypeToTypedArray[tplAttribute.getComponentType()];\n\t\tconst dstAttribute = shallowCloneAccessor(document, tplAttribute).setArray(\n\t\t\tnew AttributeArray(dstVertexCount * tplAttribute.getElementSize()),\n\t\t);\n\t\tdstPrim.setAttribute(semantic, dstAttribute);\n\t}\n\n\t// (5) Allocate joined indices.\n\tconst tplIndices = templatePrim.getIndices();\n\tconst dstIndices = tplIndices\n\t\t? shallowCloneAccessor(document, tplIndices).setArray(createIndicesEmpty(dstIndicesCount, dstVertexCount))\n\t\t: null;\n\tdstPrim.setIndices(dstIndices);\n\n\t// (6) Remap attributes into joined Primitive.\n\tlet dstIndicesOffset = 0;\n\tfor (let primIndex = 0; primIndex < primRemaps.length; primIndex++) {\n\t\tconst srcPrim = prims[primIndex];\n\t\tconst srcIndices = srcPrim.getIndices();\n\t\tconst srcIndicesCount = srcIndices ? srcIndices.getCount() : -1;\n\n\t\tconst remap = primRemaps[primIndex];\n\n\t\tif (srcIndices && dstIndices) {\n\t\t\tremapIndices(srcIndices, remap, dstIndices, dstIndicesOffset);\n\t\t\tdstIndicesOffset += srcIndicesCount;\n\t\t}\n\n\t\tfor (const semantic of dstPrim.listSemantics()) {\n\t\t\tconst srcAttribute = srcPrim.getAttribute(semantic)!;\n\t\t\tconst dstAttribute = dstPrim.getAttribute(semantic)!;\n\t\t\tremapAttribute(srcAttribute, srcIndices, remap, dstAttribute);\n\t\t}\n\t}\n\n\treturn dstPrim;\n}\n\n/**\n * Internal variant of {@link compactAttribute}. Unlike compactAttribute,\n * assumes the vertex count cannot change, and avoids cloning attributes.\n * @hidden\n * @internal\n */\nfunction remapAttribute(\n\tsrcAttribute: Accessor,\n\tsrcIndices: Accessor | null,\n\tremap: TypedArray,\n\tdstAttribute: Accessor,\n): void {\n\tconst elementSize = srcAttribute.getElementSize();\n\tconst srcIndicesArray = srcIndices ? srcIndices.getArray() : null;\n\tconst srcVertexCount = srcAttribute.getCount();\n\tconst srcArray = srcAttribute.getArray()!;\n\tconst dstArray = dstAttribute.getArray()!;\n\tconst done = new Uint8Array(srcAttribute.getCount());\n\n\tfor (let i = 0, il = srcIndices ? srcIndices.getCount() : srcVertexCount; i < il; i++) {\n\t\tconst srcIndex = srcIndicesArray ? srcIndicesArray[i] : i;\n\t\tconst dstIndex = remap[srcIndex];\n\t\tif (done[dstIndex]) continue;\n\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[dstIndex * elementSize + j] = srcArray[srcIndex * elementSize + j];\n\t\t}\n\n\t\tdone[dstIndex] = 1;\n\t}\n}\n\n/**\n * Internal variant of {@link compactPrimitive}'s index remapping. Avoids\n * cloning indices; writes directly to `dstIndices`.\n * @hidden\n * @internal\n */\nfunction remapIndices(srcIndices: Accessor, remap: TypedArray, dstIndices: Accessor, dstOffset: number): void {\n\tconst srcCount = srcIndices.getCount();\n\tconst srcArray = srcIndices.getArray()!;\n\tconst dstArray = dstIndices.getArray()!;\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tconst srcIndex = srcArray[i];\n\t\tconst dstIndex = remap[srcIndex];\n\t\tdstArray[dstOffset + i] = dstIndex;\n\t}\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPropertyType,\n\tScene,\n\tTransform,\n} from '@gltf-transform/core';\nimport { invert, multiply } from 'gl-matrix/mat4';\nimport { joinPrimitives } from './join-primitives.js';\nimport { prune } from './prune.js';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { assignDefaults, createPrimGroupKey, createTransform, formatLong, isUsed } from './utils.js';\nimport { dequantizeAttribute } from './dequantize.js';\nimport { compactPrimitive } from './compact-primitive.js';\n\nconst NAME = 'join';\n\nconst { ROOT, NODE, MESH, PRIMITIVE, ACCESSOR } = PropertyType;\n\n// prettier-ignore\nconst _matrix = [\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n] as mat4;\n\n/** Options for the {@link join} function. */\nexport interface JoinOptions {\n\t/**\n\t * Prevents joining distinct {@link Mesh Meshes} and {@link Node Nodes}.\n\t * Joins only Primitives found within the same parent Mesh. To preserve\n\t * only _named_ Nodes and Meshes, use\n\t * {@link JoinOptions.keepNamed keepNamed} instead. Default: false.\n\t */\n\tkeepMeshes?: boolean;\n\t/**\n\t * Prevents joining _named_ {@link Mesh Meshes} and {@link Node Nodes}.\n\t * If {@link JoinOptions.keepMeshes keepMeshes} is enabled, keepNamed will\n\t * have no effect. Default: false.\n\t */\n\tkeepNamed?: boolean;\n\t/**\n\t * Whether to perform cleanup steps after completing the operation. Recommended, and enabled by\n\t * default. Cleanup removes temporary resources created during the operation, but may also remove\n\t * pre-existing unused or duplicate resources in the {@link Document}. Applications that require\n\t * keeping these resources may need to disable cleanup, instead calling {@link dedup} and\n\t * {@link prune} manually (with customized options) later in the processing pipeline.\n\t * @experimental\n\t */\n\tcleanup?: boolean;\n}\n\nexport const JOIN_DEFAULTS: Required<JoinOptions> = {\n\tkeepMeshes: false,\n\tkeepNamed: false,\n\tcleanup: true,\n};\n\n/**\n * Joins compatible {@link Primitive Primitives} and reduces draw calls.\n * Primitives are eligible for joining if they are members of the same\n * {@link Mesh} or, optionally, attached to sibling {@link Node Nodes}\n * in the scene hierarchy. For best results, apply {@link dedup} and\n * {@link flatten} first to maximize the number of Primitives that\n * can be joined.\n *\n * NOTE: In a Scene that heavily reuses the same Mesh data, joining may\n * increase vertex count. Consider alternatives, like\n * {@link instance instancing} with {@link EXTMeshGPUInstancing}.\n *\n * Example:\n *\n * ```ts\n * import { PropertyType } from '@gltf-transform/core';\n * import { join, flatten, dedup } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup({ propertyTypes: [PropertyType.MATERIAL] }),\n * \tflatten(),\n * \tjoin({ keepNamed: false }),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function join(_options: JoinOptions = JOIN_DEFAULTS): Transform {\n\tconst options = assignDefaults(JOIN_DEFAULTS, _options);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// Join.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t_joinLevel(document, scene, options);\n\t\t\tscene.traverse((node) => _joinLevel(document, node, options));\n\t\t}\n\n\t\t// Clean up.\n\t\tif (options.cleanup) {\n\t\t\tawait document.transform(\n\t\t\t\tprune({\n\t\t\t\t\tpropertyTypes: [NODE, MESH, PRIMITIVE, ACCESSOR],\n\t\t\t\t\tkeepAttributes: true,\n\t\t\t\t\tkeepIndices: true,\n\t\t\t\t\tkeepLeaves: false,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\ninterface IJoinGroup {\n\tkey: string;\n\tprims: Primitive[];\n\tprimMeshes: Mesh[];\n\tprimNodes: Node[];\n\tdstNode: Node;\n\tdstMesh?: Mesh | undefined;\n}\n\nfunction _joinLevel(document: Document, parent: Node | Scene, options: Required<JoinOptions>) {\n\tconst logger = document.getLogger();\n\tconst groups = {} as Record<string, IJoinGroup>;\n\n\t// Scan for compatible Primitives.\n\tconst children = parent.listChildren();\n\tfor (let nodeIndex = 0; nodeIndex < children.length; nodeIndex++) {\n\t\tconst node = children[nodeIndex];\n\n\t\t// Skip animated nodes.\n\t\tconst isAnimated = node.listParents().some((p) => p instanceof AnimationChannel);\n\t\tif (isAnimated) continue;\n\n\t\t// Skip nodes without meshes.\n\t\tconst mesh = node.getMesh();\n\t\tif (!mesh) continue;\n\n\t\t// Skip nodes with instancing; unsupported.\n\t\tif (node.getExtension('EXT_mesh_gpu_instancing')) continue;\n\n\t\t// Skip nodes with skinning; unsupported.\n\t\tif (node.getSkin()) continue;\n\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t// Skip prims with morph targets; unsupported.\n\t\t\tif (prim.listTargets().length > 0) continue;\n\n\t\t\t// Skip prims with volumetric materials; unsupported.\n\t\t\tconst material = prim.getMaterial();\n\t\t\tif (material && material.getExtension('KHR_materials_volume')) continue;\n\n\t\t\tcompactPrimitive(prim);\n\t\t\tdequantizeTransformableAttributes(prim);\n\n\t\t\tlet key = createPrimGroupKey(prim);\n\n\t\t\tconst isNamed = mesh.getName() || node.getName();\n\t\t\tif (options.keepMeshes || (options.keepNamed && isNamed)) {\n\t\t\t\tkey += `|${nodeIndex}`;\n\t\t\t}\n\n\t\t\tif (!(key in groups)) {\n\t\t\t\tgroups[key] = {\n\t\t\t\t\tprims: [] as Primitive[],\n\t\t\t\t\tprimMeshes: [] as Mesh[],\n\t\t\t\t\tprimNodes: [] as Node[],\n\t\t\t\t\tdstNode: node,\n\t\t\t\t\tdstMesh: undefined,\n\t\t\t\t} as IJoinGroup;\n\t\t\t}\n\n\t\t\tconst group = groups[key];\n\t\t\tgroup.prims.push(prim);\n\t\t\tgroup.primNodes.push(node);\n\t\t}\n\t}\n\n\t// Discard single-Primitive groups.\n\tconst joinGroups = Object.values(groups).filter(({ prims }) => prims.length > 1);\n\n\t// Unlink all affected Meshes at current level, before modifying Primitives.\n\tconst srcNodes = new Set<Node>(joinGroups.flatMap((group) => group.primNodes));\n\tfor (const node of srcNodes) {\n\t\tconst mesh = node.getMesh()!;\n\t\tconst isSharedMesh = mesh.listParents().some((parent) => {\n\t\t\treturn parent.propertyType !== ROOT && node !== parent;\n\t\t});\n\t\tif (isSharedMesh) {\n\t\t\tnode.setMesh(mesh.clone());\n\t\t}\n\t}\n\n\t// Update Meshes in groups.\n\tfor (const group of joinGroups) {\n\t\tconst { dstNode, primNodes } = group;\n\t\tgroup.dstMesh = dstNode.getMesh()!;\n\t\tgroup.primMeshes = primNodes.map((node) => node.getMesh()!);\n\t}\n\n\t// Join Primitives.\n\tfor (const group of joinGroups) {\n\t\tconst { prims, primNodes, primMeshes, dstNode, dstMesh } = group as Required<IJoinGroup>;\n\t\tconst dstMatrix = dstNode.getMatrix();\n\n\t\tfor (let i = 0; i < prims.length; i++) {\n\t\t\tconst primNode = primNodes[i];\n\t\t\tconst primMesh = primMeshes[i];\n\n\t\t\tlet prim = prims[i];\n\t\t\tprimMesh.removePrimitive(prim);\n\n\t\t\t// If Primitive is still in use after being removed from the\n\t\t\t// current mesh, above, make a deep copy. Because compactPrimitive()\n\t\t\t// was applied earlier in join(), we know the full vertex streams are\n\t\t\t// used, and no accessors are shared.\n\t\t\tif (isUsed(prim)) {\n\t\t\t\tprim = prims[i] = _deepClonePrimitive(prims[i]);\n\t\t\t}\n\n\t\t\t// Transform Primitive into new local coordinate space.\n\t\t\tif (primNode !== dstNode) {\n\t\t\t\tmultiply(_matrix, invert(_matrix, dstMatrix), primNode.getMatrix());\n\t\t\t\ttransformPrimitive(prim, _matrix);\n\t\t\t}\n\t\t}\n\n\t\tconst dstPrim = joinPrimitives(prims);\n\t\tconst dstVertexCount = dstPrim.listAttributes()[0].getCount();\n\t\tdstMesh.addPrimitive(dstPrim);\n\n\t\tlogger.debug(\n\t\t\t`${NAME}: Joined Primitives (${prims.length}) containing ` +\n\t\t\t\t`${formatLong(dstVertexCount)} vertices under Node \"${dstNode.getName()}\".`,\n\t\t);\n\t}\n}\n\nfunction _deepClonePrimitive(src: Primitive): Primitive {\n\t// compactPrimitive already applied; no vertices are unused.\n\tconst dst = src.clone();\n\tfor (const semantic of dst.listSemantics()) {\n\t\tdst.setAttribute(semantic, dst.getAttribute(semantic)!.clone());\n\t}\n\tconst indices = dst.getIndices();\n\tif (indices) dst.setIndices(indices.clone());\n\treturn dst;\n}\n\n/**\n * Dequantize attributes that would be affected by {@link transformPrimitive},\n * to avoid invalidating our primitive group keys.\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/844\n */\nfunction dequantizeTransformableAttributes(prim: Primitive) {\n\tfor (const semantic of ['POSITION', 'NORMAL', 'TANGENT']) {\n\t\tconst attribute = prim.getAttribute(semantic);\n\t\tif (attribute) dequantizeAttribute(attribute);\n\t}\n}\n","import { Document, Texture } from '@gltf-transform/core';\nimport { Material, TextureChannel, PropertyType } from '@gltf-transform/core';\n\n/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given\n * texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel\n * in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js\n * const channels = listTextureChannels(texture);\n * if (channels.includes(TextureChannel.R)) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function listTextureChannels(texture: Texture): TextureChannel[] {\n\tconst mask = getTextureChannelMask(texture);\n\tconst channels = [];\n\tif (mask & TextureChannel.R) channels.push(TextureChannel.R);\n\tif (mask & TextureChannel.G) channels.push(TextureChannel.G);\n\tif (mask & TextureChannel.B) channels.push(TextureChannel.B);\n\tif (mask & TextureChannel.A) channels.push(TextureChannel.A);\n\treturn channels;\n}\n\n/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the\n * given texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel.\n * See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n *\n * ```js\n * const mask = getTextureChannelMask(texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function getTextureChannelMask(texture: Texture): number {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tlet mask = 0x0000;\n\tfor (const edge of document.getGraph().listParentEdges(texture)) {\n\t\tconst parent = edge.getParent();\n\t\tlet { channels } = edge.getAttributes() as { channels: number | undefined };\n\n\t\tif (\n\t\t\tchannels &&\n\t\t\tedge.getName() === 'baseColorTexture' &&\n\t\t\tparent instanceof Material &&\n\t\t\tparent.getAlphaMode() === Material.AlphaMode.OPAQUE\n\t\t) {\n\t\t\tchannels &= ~TextureChannel.A;\n\t\t}\n\n\t\tif (channels) {\n\t\t\tmask |= channels;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\tdocument.getLogger().warn(`Missing attribute \".channels\" on edge, \"${edge.getName()}\".`);\n\t\t}\n\t}\n\treturn mask;\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { assignDefaults, createTransform, deepListAttributes, SetMap, shallowCloneAccessor } from './utils.js';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { compactAttribute } from './compact-primitive.js';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder: unknown;\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance';\n\t/**\n\t * Whether to perform cleanup steps after completing the operation. Recommended, and enabled by\n\t * default. Cleanup removes temporary resources created during the operation, but may also remove\n\t * pre-existing unused or duplicate resources in the {@link Document}. Applications that require\n\t * keeping these resources may need to disable cleanup, instead calling {@link dedup} and\n\t * {@link prune} manually (with customized options) later in the processing pipeline.\n\t * @experimental\n\t */\n\tcleanup?: boolean;\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n\tcleanup: true,\n};\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function reorder(_options: ReorderOptions): Transform {\n\tconst options = assignDefaults(REORDER_DEFAULTS, _options);\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = createLayoutPlan(document);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tlet indicesArray = srcIndices.getArray()!;\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t} else {\n\t\t\t\tindicesArray = indicesArray.slice();\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size',\n\t\t\t);\n\n\t\t\tconst dstIndices = shallowCloneAccessor(document, srcIndices);\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = shallowCloneAccessor(document, srcAttribute);\n\t\t\t\tcompactAttribute(srcAttribute, srcIndices, remap, dstAttribute, unique);\n\n\t\t\t\tfor (const prim of plan.indicesToPrimitives.get(srcIndices)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\n\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tif (options.cleanup) {\n\t\t\tawait document.transform(\n\t\t\t\tprune({\n\t\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR],\n\t\t\t\t\tkeepAttributes: true,\n\t\t\t\t\tkeepIndices: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n/** @hidden */\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToPrimitives: SetMap<Accessor, Primitive>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Constructs a plan for processing vertex streams, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n *\n * @hidden\n */\nfunction createLayoutPlan(document: Document): LayoutPlan {\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst indicesToPrimitives = new SetMap<Accessor, Primitive>();\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\t\t\tindicesToPrimitives.add(indices, prim);\n\n\t\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { indicesToPrimitives, indicesToAttributes, indicesToMode, attributesToPrimitives };\n}\n","import { Accessor, GLTF, MathUtils, Primitive, PrimitiveTarget, TypedArray, vec4 } from '@gltf-transform/core';\n\n/**\n * Sorts skinning weights from high to low, for each vertex of the input\n * {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights.\n * Optionally, uses the given 'limit' to remove least-significant joint\n * influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex,\n * often 4 or 8. Sorting and removing the additional influences can reduce file\n * size and improve compatibility.\n *\n * Example:\n *\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim Input, to be modified in place.\n * @param limit Maximum number of joint influences per vertex. Must be a multiple of four.\n */\nexport function sortPrimitiveWeights(prim: Primitive | PrimitiveTarget, limit = Infinity) {\n\tif ((Number.isFinite(limit) && limit % 4) || limit <= 0) {\n\t\tthrow new Error(`Limit must be positive multiple of four.`);\n\t}\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\t// (1) Sort.\n\n\tconst indices = new Uint16Array(setCount * 4);\n\tconst srcWeights = new Float32Array(setCount * 4);\n\tconst dstWeights = new Float32Array(setCount * 4);\n\tconst srcJoints = new Uint32Array(setCount * 4);\n\tconst dstJoints = new Uint32Array(setCount * 4);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'WEIGHTS', srcWeights);\n\t\tgetVertexArray(prim, i, 'JOINTS', srcJoints);\n\n\t\t// Sort indices to create a lookup table, indices[dstIndex] → srcIndex,\n\t\t// indexed into the weights and joints arrays.\n\t\tfor (let j = 0; j < setCount * 4; j++) indices[j] = j;\n\t\tindices.sort((a, b) => (srcWeights[a] > srcWeights[b] ? -1 : 1));\n\n\t\t// Sort weights and joints.\n\t\tfor (let j = 0; j < indices.length; j++) {\n\t\t\tdstWeights[j] = srcWeights[indices[j]];\n\t\t\tdstJoints[j] = srcJoints[indices[j]];\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'WEIGHTS', dstWeights);\n\t\tsetVertexArray(prim, i, 'JOINTS', dstJoints);\n\t}\n\n\t// (2) Limit.\n\tfor (let i = setCount; i * 4 > limit; i--) {\n\t\tconst weights = prim.getAttribute(`WEIGHTS_${i - 1}`)!;\n\t\tconst joints = prim.getAttribute(`JOINTS_${i - 1}`)!;\n\t\tprim.setAttribute(`WEIGHTS_${i - 1}`, null);\n\t\tprim.setAttribute(`JOINTS_${i - 1}`, null);\n\t\tif (weights.listParents().length === 1) weights.dispose();\n\t\tif (joints.listParents().length === 1) joints.dispose();\n\t}\n\n\t// (3) Normalize.\n\tnormalizePrimitiveWeights(prim);\n}\n\n// Utilities.\n\ntype PrimLike = Primitive | PrimitiveTarget;\n\nfunction normalizePrimitiveWeights(prim: PrimLike): void {\n\t// TODO(feat): Convert attributes to same component types when necessary.\n\tif (!isNormalizeSafe(prim)) return;\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\tconst templateAttribute = prim.getAttribute('WEIGHTS_0')!;\n\tconst templateArray = templateAttribute.getArray()!;\n\tconst componentType = templateAttribute.getComponentType();\n\tconst normalized = templateAttribute.getNormalized();\n\tconst normalizedComponentType = normalized ? componentType : undefined;\n\tconst delta = normalized ? MathUtils.decodeNormalizedInt(1, componentType) : Number.EPSILON;\n\tconst joints = new Uint32Array(setCount * 4).fill(0);\n\tconst weights = templateArray.slice(0, setCount * 4).fill(0);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'JOINTS', joints);\n\t\tgetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\n\t\tlet weightsSum = sum(weights, normalizedComponentType);\n\n\t\tif (weightsSum !== 0 && weightsSum !== 1) {\n\t\t\t// (1) If sum of weights not within δ of 1, renormalize all weights.\n\t\t\tif (Math.abs(1 - weightsSum) > delta) {\n\t\t\t\tfor (let j = 0; j < weights.length; j++) {\n\t\t\t\t\tif (normalized) {\n\t\t\t\t\t\tconst floatValue = MathUtils.decodeNormalizedInt(weights[j], componentType);\n\t\t\t\t\t\tweights[j] = MathUtils.encodeNormalizedInt(floatValue / weightsSum, componentType);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tweights[j] /= weightsSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tweightsSum = sum(weights, normalizedComponentType);\n\n\t\t\t// (2) Sum of normalized weights may still be off by δ. Compensate\n\t\t\t// in least-significant weight.\n\t\t\tif (normalized && weightsSum !== 1) {\n\t\t\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\t\t\tif (weights[j] > 0) {\n\t\t\t\t\t\t// Normalized integer encoding will clamp negative values, so separate the sign.\n\t\t\t\t\t\tconst delta = 1 - weightsSum;\n\t\t\t\t\t\tweights[j] += Math.sign(delta) * MathUtils.encodeNormalizedInt(Math.abs(delta), componentType);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Remove joint indices whose weights have fallen to zero.\n\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\tif (weights[j] === 0) {\n\t\t\t\tjoints[j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'JOINTS', joints);\n\t\tsetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\t}\n}\n\n/** Lists all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction getVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\ttarget: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType,\n): TypedArray {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tweights.getElement(vertexIndex, el);\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\ttarget[i * 4 + j] = MathUtils.encodeNormalizedInt(el[j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\ttarget[i * 4 + j] = el[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\n/** Sets all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction setVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\tvalues: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType,\n): void {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\tel[j] = MathUtils.decodeNormalizedInt(values[i * 4 + j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\tel[j] = values[i * 4 + j];\n\t\t\t}\n\t\t}\n\t\tweights.setElement(vertexIndex, el);\n\t}\n}\n\n/** Sum an array of numbers. */\nfunction sum(values: TypedArray, normalizedComponentType?: GLTF.AccessorComponentType): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < values.length; i++) {\n\t\tif (normalizedComponentType) {\n\t\t\tsum += MathUtils.decodeNormalizedInt(values[i], normalizedComponentType);\n\t\t} else {\n\t\t\tsum += values[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\n/** Returns true if attribute normalization is supported for this primitive. */\nfunction isNormalizeSafe(prim: PrimLike): boolean {\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.filter((name) => name.startsWith('WEIGHTS_'))\n\t\t.map((name) => prim.getAttribute(name)!);\n\tconst normList = attributes.map((a) => a.getNormalized());\n\tconst typeList = attributes.map((a) => a.getComponentType());\n\treturn new Set(normList).size === 1 && new Set(typeList).size === 1;\n}\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tILogger,\n\tmat4,\n\tMathUtils,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { InstancedMesh, KHRMeshQuantization } from '@gltf-transform/extensions';\nimport type { Volume } from '@gltf-transform/extensions';\nimport { prune } from './prune.js';\nimport { assignDefaults, createTransform } from './utils.js';\nimport { sortPrimitiveWeights } from './sort-primitive-weights.js';\nimport { getPrimitiveVertexCount, VertexCountMethod } from './get-vertex-count.js';\nimport { compactPrimitive } from './compact-primitive.js';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Pattern (regex) used to filter morph target semantics for quantization. Default: `options.pattern`. */\n\tpatternTargets?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n\t/** Normalize weight attributes. */\n\tnormalizeWeights?: boolean;\n\t/**\n\t * Whether to perform cleanup steps after completing the operation. Recommended, and enabled by\n\t * default. Cleanup removes temporary resources created during the operation, but may also remove\n\t * pre-existing unused or duplicate resources in the {@link Document}. Applications that require\n\t * keeping these resources may need to disable cleanup, instead calling {@link dedup} and\n\t * {@link prune} manually (with customized options) later in the processing pipeline.\n\t * @experimental\n\t */\n\tcleanup?: boolean;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<Omit<QuantizeOptions, 'patternTargets'>> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n\tnormalizeWeights: true,\n\tcleanup: true,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file. Conceptually, quantization refers to snapping values to regular intervals; vertex\n * positions are snapped to a 3D grid, UVs to a 2D grid, and so on. When quantized to <= 16 bits,\n * larger component types may be more compactly stored as 16-bit or 8-bit attributes.\n *\n * Often, it can be useful to quantize to precision lower than the maximum allowed by the component\n * type. Positions quantized to 14 bits in a 16-bit accessor will occupy 16 bits in VRAM, but they\n * can be compressed further for network compression with lossless encodings such as ZSTD.\n *\n * Vertex positions are shifted into [-1,1] or [0,1] range before quantization. Compensating for\n * that shift, a transform is applied to the parent {@link Node}, or inverse bind matrices for a\n * {@link Skin} if applicable. Materials using {@link KHRMaterialsVolume} are adjusted to maintain\n * appearance. In future releases, UVs may also be transformed with {@link KHRTextureTransform}.\n * Currently UVs outside of [0,1] range are not quantized.\n *\n * In most cases, quantization requires {@link KHRMeshQuantization}; the extension will be added\n * automatically when `quantize()` is applied. When applying meshopt compression with\n * {@link EXTMeshoptCompression}, quantization is usually applied before compression.\n *\n * Example:\n *\n * ```javascript\n * import { quantize } from '@gltf-transform/functions';\n *\n * await document.transform(\n *   quantize({\n *\t\tquantizePosition: 14,\n *\t\tquantizeNormal: 10,\n *   }),\n * );\n * ```\n *\n * For the inverse operation, see {@link dequantize}.\n *\n * @category Transforms\n */\nexport function quantize(_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform {\n\tconst options = assignDefaults(QUANTIZE_DEFAULTS, {\n\t\tpatternTargets: _options.pattern || QUANTIZE_DEFAULTS.pattern,\n\t\t..._options,\n\t});\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(document, mesh, nodeTransform);\n\t\t\t\ttransformMeshMaterials(mesh, 1 / nodeTransform.scale);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst renderCount = getPrimitiveVertexCount(prim, VertexCountMethod.RENDER);\n\t\t\t\tconst uploadCount = getPrimitiveVertexCount(prim, VertexCountMethod.UPLOAD);\n\t\t\t\tif (renderCount < uploadCount / 2) {\n\t\t\t\t\tcompactPrimitive(prim);\n\t\t\t\t}\n\t\t\t\tquantizePrimitive(document, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(document, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst needsExtension = root\n\t\t\t.listMeshes()\n\t\t\t.flatMap((mesh) => mesh.listPrimitives())\n\t\t\t.some(isQuantizedPrimitive);\n\t\tif (needsExtension) {\n\t\t\tdocument.createExtension(KHRMeshQuantization).setRequired(true);\n\t\t}\n\n\t\tif (options.cleanup) {\n\t\t\tawait document.transform(\n\t\t\t\tprune({\n\t\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN, PropertyType.MATERIAL],\n\t\t\t\t\tkeepAttributes: true,\n\t\t\t\t\tkeepIndices: true,\n\t\t\t\t\tkeepLeaves: true,\n\t\t\t\t\tkeepSolidTextures: true,\n\t\t\t\t}),\n\t\t\t\tdedup({\n\t\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.MATERIAL, PropertyType.SKIN],\n\t\t\t\t\tkeepUniqueNames: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction quantizePrimitive(\n\tdocument: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>,\n): void {\n\tconst isTarget = prim instanceof PrimitiveTarget;\n\tconst logger = document.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!isTarget && !options.pattern.test(semantic)) continue;\n\t\tif (isTarget && !options.patternTargets.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.setAttribute(semantic, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (options.normalizeWeights && prim.getAttribute('WEIGHTS_0')) {\n\t\tsortPrimitiveWeights(prim, Infinity);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2,\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(document: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (!(parent instanceof Node)) continue;\n\n\t\tconst animChannels = parent.listParents().filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\tconst skin = parent.getSkin();\n\t\tif (skin) {\n\t\t\tparent.setSkin(transformSkin(skin, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst batch = parent.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\t\tif (batch) {\n\t\t\tparent.setExtension('EXT_mesh_gpu_instancing', transformBatch(document, batch, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet targetNode: Node;\n\t\tif (isParentNode || isAnimated) {\n\t\t\ttargetNode = document.createNode('').setMesh(mesh);\n\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\tanimChannels\n\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t} else {\n\t\t\ttargetNode = parent;\n\t\t}\n\n\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\ttargetNode.setMatrix(nodeMatrix);\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone(); // quantize() does cleanup.\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/** Applies corrective scale and offset to GPU instancing batches. */\nfunction transformBatch(document: Document, batch: InstancedMesh, nodeTransform: VectorTransform<vec3>): InstancedMesh {\n\tif (!batch.getAttribute('TRANSLATION') && !batch.getAttribute('ROTATION') && !batch.getAttribute('SCALE')) {\n\t\treturn batch;\n\t}\n\n\tbatch = batch.clone(); // quantize() does cleanup.\n\n\tlet instanceTranslation = batch.getAttribute('TRANSLATION')?.clone();\n\tconst instanceRotation = batch.getAttribute('ROTATION')?.clone();\n\tlet instanceScale = batch.getAttribute('SCALE')?.clone();\n\n\tconst tpl = (instanceTranslation || instanceRotation || instanceScale)!;\n\n\tconst T_IDENTITY = [0, 0, 0] as vec3;\n\tconst R_IDENTITY = [0, 0, 0, 1] as vec4;\n\tconst S_IDENTITY = [1, 1, 1] as vec3;\n\n\t// Transformed batch may now require instance translation or scale.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/1584\n\n\tif (!instanceTranslation && nodeTransform.offset) {\n\t\tinstanceTranslation = document.createAccessor().setType('VEC3').setArray(makeArray(tpl.getCount(), T_IDENTITY));\n\t}\n\n\tif (!instanceScale && nodeTransform.scale) {\n\t\tinstanceScale = document.createAccessor().setType('VEC3').setArray(makeArray(tpl.getCount(), S_IDENTITY));\n\t}\n\n\tconst t = [0, 0, 0] as vec3;\n\tconst r = [0, 0, 0, 1] as vec4;\n\tconst s = [1, 1, 1] as vec3;\n\n\t// prettier-ignore\n\tconst instanceMatrix = [\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1,\n\t] as mat4;\n\n\tconst transformMatrix = fromTransform(nodeTransform);\n\n\tfor (let i = 0, count = tpl.getCount(); i < count; i++) {\n\t\tMathUtils.compose(\n\t\t\tinstanceTranslation ? (instanceTranslation.getElement(i, t) as vec3) : T_IDENTITY,\n\t\t\tinstanceRotation ? (instanceRotation.getElement(i, r) as vec4) : R_IDENTITY,\n\t\t\tinstanceScale ? (instanceScale.getElement(i, s) as vec3) : S_IDENTITY,\n\t\t\tinstanceMatrix,\n\t\t);\n\n\t\tmultiplyMat4(instanceMatrix, instanceMatrix, transformMatrix);\n\n\t\tMathUtils.decompose(instanceMatrix, t, r, s);\n\n\t\tif (instanceTranslation) instanceTranslation.setElement(i, t);\n\t\tif (instanceRotation) instanceRotation.setElement(i, r);\n\t\tif (instanceScale) instanceScale.setElement(i, s);\n\t}\n\n\tif (instanceTranslation) batch.setAttribute('TRANSLATION', instanceTranslation);\n\tif (instanceRotation) batch.setAttribute('ROTATION', instanceRotation);\n\tif (instanceScale) batch.setAttribute('SCALE', instanceScale);\n\n\treturn batch;\n}\n\n/** Applies corrective scale to volumetric materials, which give thickness in local units. */\nfunction transformMeshMaterials(mesh: Mesh, scale: number) {\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tlet material = prim.getMaterial();\n\t\tif (!material) continue;\n\n\t\tlet volume = material.getExtension<Volume>('KHR_materials_volume');\n\t\tif (!volume || volume.getThicknessFactor() <= 0) continue;\n\n\t\t// quantize() does cleanup.\n\t\tvolume = volume.clone().setThicknessFactor(volume.getThicknessFactor() * scale);\n\t\tmaterial = material.clone().setExtension('KHR_materials_volume', volume);\n\t\tprim.setMaterial(material);\n\t}\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\tconst range = [signBits > 0 ? -1 : 0, 1] as vec2;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Clamp to range.\n\t\t\tlet value = clamp(el[j], range);\n\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tvalue = Math.round(Math.abs(value) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\t// TODO(feat): Support sparse accessors, https://github.com/donmccurdy/glTF-Transform/issues/795\n\tattribute.setArray(dstArray).setNormalized(true).setSparse(false);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: ILogger,\n\toptions: Required<QuantizeOptions>,\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\nfunction isQuantizedAttribute(semantic: string, attribute: Accessor): boolean {\n\t// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#meshes-overview\n\tconst componentSize = attribute.getComponentSize();\n\tif (semantic === 'POSITION') return componentSize < 4;\n\tif (semantic === 'NORMAL') return componentSize < 4;\n\tif (semantic === 'TANGENT') return componentSize < 4;\n\tif (semantic.startsWith('TEXCOORD_')) {\n\t\tconst componentType = attribute.getComponentType();\n\t\tconst normalized = attribute.getNormalized();\n\t\treturn (\n\t\t\tcomponentSize < 4 &&\n\t\t\t!(normalized && componentType === Accessor.ComponentType.UNSIGNED_BYTE) &&\n\t\t\t!(normalized && componentType === Accessor.ComponentType.UNSIGNED_SHORT)\n\t\t);\n\t}\n\treturn false;\n}\n\nfunction isQuantizedPrimitive(prim: Primitive | PrimitiveTarget): boolean {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute('POSITION')!;\n\t\tif (isQuantizedAttribute(semantic, attribute)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (prim.propertyType === PropertyType.PRIMITIVE) {\n\t\treturn prim.listTargets().some(isQuantizedPrimitive);\n\t}\n\treturn false;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nfunction clamp(value: number, range: vec2): number {\n\treturn Math.min(Math.max(value, range[0]), range[1]);\n}\n\nfunction makeArray(elementCount: number, initialElement: vec2 | vec3 | vec4) {\n\tconst elementSize = initialElement.length;\n\tconst array = new Float32Array(elementCount * elementSize);\n\n\tfor (let i = 0; i < elementCount; i++) {\n\t\tarray.set(initialElement, i * elementSize);\n\t}\n\n\treturn array;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { EXTMeshoptCompression } from '@gltf-transform/extensions';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { reorder } from './reorder.js';\nimport { QUANTIZE_DEFAULTS, QuantizeOptions, quantize } from './quantize.js';\nimport { assignDefaults, createTransform } from './utils.js';\n\nexport interface MeshoptOptions extends Omit<QuantizeOptions, 'pattern' | 'patternTargets'> {\n\tencoder: unknown;\n\tlevel?: 'medium' | 'high';\n}\n\nexport const MESHOPT_DEFAULTS: Required<Omit<MeshoptOptions, 'encoder'>> = {\n\tlevel: 'high',\n\t...QUANTIZE_DEFAULTS,\n};\n\nconst NAME = 'meshopt';\n\n/**\n * Applies Meshopt compression using {@link EXTMeshoptCompression EXT_meshopt_compression}.\n * This type of compression can reduce the size of point, line, and triangle geometry,\n * morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and\n * {@link EXTMeshoptCompression}, and exposes relatively few configuration options.\n * To access more options (like quantization bits) direct use of the underlying\n * functions is recommended.\n *\n * Example:\n *\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { meshopt } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   meshopt({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n *\n * Compression is deferred until generating output with an I/O class.\n *\n * @category Transforms\n */\nexport function meshopt(_options: MeshoptOptions): Transform {\n\tconst options = assignDefaults(MESHOPT_DEFAULTS, _options);\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tlet pattern: RegExp;\n\t\tlet patternTargets: RegExp;\n\t\tlet quantizeNormal = options.quantizeNormal;\n\n\t\tif (document.getRoot().listAccessors().length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// IMPORTANT: Vertex attributes should be quantized in 'high' mode IFF they are\n\t\t// _not_ filtered in 'packages/extensions/src/ext-meshopt-compression/encoder.ts'.\n\t\t// Note that normals and tangents use octahedral filters, but _morph_ normals\n\t\t// and tangents do not.\n\t\t// See: https://github.com/donmccurdy/glTF-Transform/issues/1142\n\t\tif (options.level === 'medium') {\n\t\t\tpattern = /.*/;\n\t\t\tpatternTargets = /.*/;\n\t\t} else {\n\t\t\tpattern = /^(POSITION|TEXCOORD|JOINTS|WEIGHTS|COLOR)(_\\d+)?$/;\n\t\t\tpatternTargets = /^(POSITION|TEXCOORD|JOINTS|WEIGHTS|COLOR|NORMAL|TANGENT)(_\\d+)?$/;\n\t\t\tquantizeNormal = Math.min(quantizeNormal, 8); // See meshopt::getMeshoptFilter.\n\t\t}\n\n\t\tawait document.transform(\n\t\t\treorder({\n\t\t\t\tencoder: encoder,\n\t\t\t\ttarget: 'size',\n\t\t\t}),\n\t\t\tquantize({\n\t\t\t\t...options,\n\t\t\t\tpattern,\n\t\t\t\tpatternTargets,\n\t\t\t\tquantizeNormal,\n\t\t\t}),\n\t\t);\n\n\t\tdocument\n\t\t\t.createExtension(EXTMeshoptCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.level === 'medium'\n\t\t\t\t\t\t? EXTMeshoptCompression.EncoderMethod.QUANTIZE\n\t\t\t\t\t\t: EXTMeshoptCompression.EncoderMethod.FILTER,\n\t\t\t});\n\t});\n}\n","import type { Document, Texture, Transform } from '@gltf-transform/core';\nimport {\n\tKHRMaterialsIOR,\n\tKHRMaterialsPBRSpecularGlossiness,\n\tKHRMaterialsSpecular,\n\tPBRSpecularGlossiness,\n} from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils.js';\n\nconst NAME = 'metalRough';\n\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function metalRough(_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(KHRMaterialsIOR);\n\t\tconst specExtension = doc.createExtension(KHRMaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(KHRMaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension\n\t\t\t\t.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Accessor, Document, Primitive, Transform, TypedArrayConstructor } from '@gltf-transform/core';\nimport { createTransform, formatDeltaOp, shallowCloneAccessor } from './utils.js';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function unweld(_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tunweldPrimitive(prim, visited);\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * @hidden\n * @internal\n */\nexport function unweldPrimitive(prim: Primitive, visited = new Map<Accessor, Map<Accessor, Accessor>>()): void {\n\tconst indices = prim.getIndices();\n\tif (!indices) return;\n\n\tconst graph = prim.getGraph();\n\tconst document = Document.fromGraph(graph)!;\n\tconst logger = document.getLogger();\n\n\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\n\t// Vertex attributes.\n\tfor (const srcAttribute of prim.listAttributes()) {\n\t\tprim.swap(srcAttribute, unweldAttribute(document, srcAttribute, indices, visited));\n\n\t\t// Clean up.\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\t// Morph target vertex attributes.\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\ttarget.swap(srcAttribute, unweldAttribute(document, srcAttribute, indices, visited));\n\n\t\t\t// Clean up.\n\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t}\n\t}\n\n\tconst dstVertexCount = prim.getAttribute('POSITION')!.getCount();\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t// Clean up.\n\tprim.setIndices(null);\n\tif (indices.listParents().length === 1) indices.dispose();\n}\n\nfunction unweldAttribute(\n\tdocument: Document,\n\tsrcAttribute: Accessor,\n\tindices: Accessor,\n\tvisited: Map<Accessor, Map<Accessor, Accessor>>,\n): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst srcArray = srcAttribute.getArray()!;\n\tconst TypedArray = srcArray.constructor as TypedArrayConstructor;\n\tconst dstArray = new TypedArray(indices.getCount() * srcAttribute.getElementSize());\n\n\tconst indicesArray = indices.getArray()!;\n\tconst elementSize = srcAttribute.getElementSize();\n\tfor (let i = 0, il = indices.getCount(); i < il; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[i * elementSize + j] = srcArray[indicesArray[i] * elementSize + j];\n\t\t}\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tconst dstAttribute = shallowCloneAccessor(document, srcAttribute).setArray(dstArray);\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { unweld } from './unweld.js';\nimport { assignDefaults, createTransform } from './utils.js';\nimport { normalize } from 'gl-matrix/vec3';\n\nconst NAME = 'normals';\n\n/** Options for the {@link normals} function. */\nexport interface NormalsOptions {\n\t/** Whether to overwrite existing `NORMAL` attributes. */\n\toverwrite?: boolean;\n}\n\nconst NORMALS_DEFAULTS: Required<NormalsOptions> = {\n\toverwrite: false,\n};\n\n/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n *\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n *\n * @category Transforms\n */\nexport function normals(_options: NormalsOptions = NORMALS_DEFAULTS): Transform {\n\tconst options = assignDefaults(NORMALS_DEFAULTS, _options);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tlet modified = 0;\n\n\t\tawait document.transform(unweld());\n\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\t\tlet normal = prim.getAttribute('NORMAL');\n\n\t\t\t\tif (options.overwrite && normal) {\n\t\t\t\t\tnormal.dispose();\n\t\t\t\t} else if (normal) {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping primitive: NORMAL found.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnormal = document\n\t\t\t\t\t.createAccessor()\n\t\t\t\t\t.setArray(new Float32Array(position.getCount() * 3))\n\t\t\t\t\t.setType('VEC3');\n\n\t\t\t\tconst a = [0, 0, 0] as vec3;\n\t\t\t\tconst b = [0, 0, 0] as vec3;\n\t\t\t\tconst c = [0, 0, 0] as vec3;\n\n\t\t\t\tfor (let i = 0; i < position.getCount(); i += 3) {\n\t\t\t\t\tposition.getElement(i + 0, a);\n\t\t\t\t\tposition.getElement(i + 1, b);\n\t\t\t\t\tposition.getElement(i + 2, c);\n\n\t\t\t\t\tconst faceNormal = computeNormal(a, b, c);\n\n\t\t\t\t\tnormal.setElement(i + 0, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 1, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 2, faceNormal);\n\t\t\t\t}\n\n\t\t\t\tprim.setAttribute('NORMAL', normal);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/23709352/1314762\nfunction computeNormal(a: vec3, b: vec3, c: vec3): vec3 {\n\tconst A = [b[0] - a[0], b[1] - a[1], b[2] - a[2]];\n\tconst B = [c[0] - a[0], c[1] - a[1], c[2] - a[2]];\n\tconst n = [\n\t\tA[1] * B[2] - A[2] * B[1], //\n\t\tA[2] * B[0] - A[0] * B[2],\n\t\tA[0] * B[1] - A[1] * B[0],\n\t] as vec3;\n\treturn normalize([0, 0, 0], n) as vec3;\n}\n","import {\n\tColorUtils,\n\tDocument,\n\tMaterial,\n\tPrimitive,\n\tPropertyType,\n\tTexture,\n\tTextureInfo,\n\tTransform,\n\tvec4,\n} from '@gltf-transform/core';\nimport { assignDefaults, createTransform } from './utils.js';\nimport { prune } from './prune.js';\nimport ndarray, { NdArray, TypedArray } from 'ndarray';\nimport { savePixels } from 'ndarray-pixels';\n\nconst NAME = 'palette';\n\ntype TexturableProp = 'baseColor' | 'emissive' | 'metallicRoughness';\n\nexport interface PaletteOptions {\n\t/** Size (in pixels) of a single block within each palette texture. Default: 4. */\n\tblockSize?: number;\n\t/**\n\t * Minimum number of blocks in the palette texture. If fewer unique\n\t * material values are found, no palettes will be generated. Default: 5.\n\t */\n\tmin?: number;\n\t/**\n\t * Whether to keep unused vertex attributes, such as UVs without an assigned\n\t * texture. If kept, unused UV coordinates may prevent palette texture\n\t * creation. Default: false.\n\t */\n\tkeepAttributes?: boolean;\n\t/**\n\t * Whether to perform cleanup steps after completing the operation. Recommended, and enabled by\n\t * default. Cleanup removes temporary resources created during the operation, but may also remove\n\t * pre-existing unused or duplicate resources in the {@link Document}. Applications that require\n\t * keeping these resources may need to disable cleanup, instead calling {@link dedup} and\n\t * {@link prune} manually (with customized options) later in the processing pipeline.\n\t * @experimental\n\t */\n\tcleanup?: boolean;\n}\n\nexport const PALETTE_DEFAULTS: Required<PaletteOptions> = {\n\tblockSize: 4,\n\tmin: 5,\n\tkeepAttributes: false,\n\tcleanup: true,\n};\n\n/**\n * Creates palette textures containing all unique values of scalar\n * {@link Material} properties within the scene, then merges materials. For\n * scenes with many solid-colored materials (often found in CAD, architectural,\n * or low-poly styles), texture palettes can reduce the number of materials\n * used, and significantly increase the number of {@link Mesh} objects eligible\n * for {@link join} operations.\n *\n * Materials already containing texture coordinates (UVs) are not eligible for\n * texture palette optimizations. Currently only a material's base color,\n * alpha, emissive factor, metallic factor, and roughness factor are converted\n * to palette textures.\n *\n * Example:\n *\n * ```typescript\n * import { palette, flatten, dequantize, join } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tpalette({ min: 5 }),\n * \tflatten(),\n * \tdequantize(),\n * \tjoin()\n * );\n * ```\n *\n * The illustration below shows a typical base color palette texture:\n *\n * <img\n * \tsrc=\"/media/functions/palette.png\"\n * \talt=\"Row of colored blocks\"\n * \tstyle=\"width: 100%; max-width: 320px; image-rendering: pixelated;\">\n *\n * @category Transforms\n */\nexport function palette(_options: PaletteOptions = PALETTE_DEFAULTS): Transform {\n\tconst options = assignDefaults(PALETTE_DEFAULTS, _options);\n\tconst blockSize = Math.max(options.blockSize, 1);\n\tconst min = Math.max(options.min, 1);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\n\t\t// Find and remove unused TEXCOORD_n attributes.\n\t\tif (!options.keepAttributes) {\n\t\t\tawait document.transform(\n\t\t\t\tprune({\n\t\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR],\n\t\t\t\t\tkeepAttributes: false,\n\t\t\t\t\tkeepIndices: true,\n\t\t\t\t\tkeepLeaves: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tconst prims = new Set<Primitive>();\n\t\tconst materials = new Set<Material>();\n\n\t\t// (1) Gather list of eligible prims and materials.\n\n\t\tfor (const mesh of root.listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\tif (!material || !!prim.getAttribute('TEXCOORD_0')) continue;\n\n\t\t\t\tprims.add(prim);\n\t\t\t\tmaterials.add(material);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Gather list of distinct material properties.\n\n\t\tconst materialKeys = new Set<string>();\n\t\tconst materialKeyMap = new Map<Material, string>();\n\t\tconst materialProps: Record<TexturableProp, Set<string>> = {\n\t\t\tbaseColor: new Set<string>(),\n\t\t\temissive: new Set<string>(),\n\t\t\tmetallicRoughness: new Set<string>(),\n\t\t};\n\n\t\tfor (const material of materials) {\n\t\t\tconst baseColor = encodeRGBA(material.getBaseColorFactor().slice() as vec4);\n\t\t\tconst emissive = encodeRGBA([...material.getEmissiveFactor(), 1]);\n\t\t\tconst roughness = encodeFloat(material.getRoughnessFactor());\n\t\t\tconst metallic = encodeFloat(material.getMetallicFactor());\n\t\t\tconst key = `baseColor:${baseColor},emissive:${emissive},metallicRoughness:${metallic}${roughness}`;\n\t\t\tmaterialProps.baseColor.add(baseColor);\n\t\t\tmaterialProps.emissive.add(emissive);\n\t\t\tmaterialProps.metallicRoughness.add(metallic + '+' + roughness);\n\t\t\tmaterialKeys.add(key);\n\t\t\tmaterialKeyMap.set(material, key);\n\t\t}\n\n\t\t// logger.debug(`${NAME}:\\n${Array.from(materialKeys.values()).join('\\n')}`);\n\n\t\tconst keyCount = materialKeys.size;\n\t\tif (keyCount < min) {\n\t\t\tlogger.debug(`${NAME}: Found <${min} unique material properties. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (3) Allocate palette textures.\n\n\t\tconst w = ceilPowerOfTwo(keyCount * blockSize);\n\t\tconst h = ceilPowerOfTwo(blockSize);\n\t\tconst padWidth = w - keyCount * blockSize;\n\n\t\tconst paletteTexturePixels: Record<TexturableProp, NdArray<Uint8Array> | null> = {\n\t\t\tbaseColor: null,\n\t\t\temissive: null,\n\t\t\tmetallicRoughness: null,\n\t\t};\n\n\t\t// Properties skipped for material equality comparisons.\n\t\tconst skipProps = new Set(['name', 'extras']);\n\t\tconst skip = (...props: string[]) => props.forEach((prop) => skipProps.add(prop));\n\n\t\tlet baseColorTexture: Texture | null = null;\n\t\tlet emissiveTexture: Texture | null = null;\n\t\tlet metallicRoughnessTexture: Texture | null = null;\n\n\t\tif (materialProps.baseColor.size >= min) {\n\t\t\tconst name = 'PaletteBaseColor';\n\t\t\tbaseColorTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.baseColor = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('baseColorFactor', 'baseColorTexture', 'baseColorTextureInfo');\n\t\t}\n\t\tif (materialProps.emissive.size >= min) {\n\t\t\tconst name = 'PaletteEmissive';\n\t\t\temissiveTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.emissive = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('emissiveFactor', 'emissiveTexture', 'emissiveTextureInfo');\n\t\t}\n\t\tif (materialProps.metallicRoughness.size >= min) {\n\t\t\tconst name = 'PaletteMetallicRoughness';\n\t\t\tmetallicRoughnessTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.metallicRoughness = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('metallicFactor', 'roughnessFactor', 'metallicRoughnessTexture', 'metallicRoughnessTextureInfo');\n\t\t}\n\n\t\tif (!(baseColorTexture || emissiveTexture || metallicRoughnessTexture)) {\n\t\t\tlogger.debug(`${NAME}: No material property has >=${min} unique values. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (4) Write blocks to palette textures.\n\n\t\tconst visitedKeys = new Set<string>();\n\t\tconst materialIndices = new Map<string, number>();\n\t\tconst paletteMaterials: Material[] = [];\n\n\t\tlet nextIndex = 0;\n\t\tfor (const material of materials) {\n\t\t\tconst key = materialKeyMap.get(material)!;\n\t\t\tif (visitedKeys.has(key)) continue;\n\n\t\t\tconst index = nextIndex++;\n\n\t\t\tif (paletteTexturePixels.baseColor) {\n\t\t\t\tconst pixels = paletteTexturePixels.baseColor;\n\t\t\t\tconst baseColor = [...material.getBaseColorFactor()] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(baseColor, baseColor);\n\t\t\t\twriteBlock(pixels, index, baseColor, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.emissive) {\n\t\t\t\tconst pixels = paletteTexturePixels.emissive;\n\t\t\t\tconst emissive = [...material.getEmissiveFactor(), 1] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(emissive, emissive);\n\t\t\t\twriteBlock(pixels, index, emissive, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.metallicRoughness) {\n\t\t\t\tconst pixels = paletteTexturePixels.metallicRoughness;\n\t\t\t\tconst metallic = material.getMetallicFactor();\n\t\t\t\tconst roughness = material.getRoughnessFactor();\n\t\t\t\twriteBlock(pixels, index, [0, roughness, metallic, 1], blockSize);\n\t\t\t}\n\n\t\t\tvisitedKeys.add(key);\n\t\t\tmaterialIndices.set(key, index);\n\t\t}\n\n\t\t// (5) Compress palette textures and assign to palette materials.\n\n\t\tconst mimeType = 'image/png';\n\n\t\tif (baseColorTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.baseColor!, mimeType);\n\t\t\tbaseColorTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (emissiveTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.emissive!, mimeType);\n\t\t\temissiveTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (metallicRoughnessTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.metallicRoughness!, mimeType);\n\t\t\tmetallicRoughnessTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\n\t\t// (6) Create palette materials, generate UVs, and assign both to prims.\n\n\t\tlet nextPaletteMaterialIndex = 1;\n\t\tfor (const prim of prims) {\n\t\t\tconst srcMaterial = prim.getMaterial()!;\n\t\t\tconst key = materialKeyMap.get(srcMaterial)!;\n\t\t\tconst blockIndex = materialIndices.get(key)!;\n\n\t\t\t// UVs are centered horizontally in each block, descending vertically\n\t\t\t// to form a diagonal line in the UV layout. Easy and compressible.\n\t\t\tconst baseUV = (blockIndex + 0.5) / keyCount;\n\t\t\tconst padUV = (baseUV * (w - padWidth)) / w;\n\n\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\tconst buffer = position.getBuffer();\n\t\t\tconst array = new Float32Array(position.getCount() * 2).fill(padUV);\n\t\t\tconst uv = document.createAccessor().setType('VEC2').setArray(array).setBuffer(buffer);\n\n\t\t\tlet dstMaterial;\n\t\t\tfor (const material of paletteMaterials) {\n\t\t\t\tif (material.equals(srcMaterial, skipProps)) {\n\t\t\t\t\tdstMaterial = material;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!dstMaterial) {\n\t\t\t\tconst suffix = (nextPaletteMaterialIndex++).toString().padStart(3, '0');\n\t\t\t\tdstMaterial = srcMaterial.clone().setName(`PaletteMaterial${suffix}`);\n\n\t\t\t\tif (baseColorTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setBaseColorFactor([1, 1, 1, 1])\n\t\t\t\t\t\t.setBaseColorTexture(baseColorTexture)\n\t\t\t\t\t\t.getBaseColorTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (emissiveTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setEmissiveFactor([1, 1, 1])\n\t\t\t\t\t\t.setEmissiveTexture(emissiveTexture)\n\t\t\t\t\t\t.getEmissiveTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (metallicRoughnessTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setMetallicFactor(1)\n\t\t\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t\t\t.setMetallicRoughnessTexture(metallicRoughnessTexture)\n\t\t\t\t\t\t.getMetallicRoughnessTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\n\t\t\t\tpaletteMaterials.push(dstMaterial);\n\t\t\t}\n\n\t\t\tprim.setMaterial(dstMaterial).setAttribute('TEXCOORD_0', uv);\n\t\t}\n\n\t\tif (options.cleanup) {\n\t\t\tawait document.transform(prune({ propertyTypes: [PropertyType.MATERIAL] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Encodes a floating-point value on the interval [0,1] at 8-bit precision. */\nfunction encodeFloat(value: number): string {\n\tconst hex = Math.round(value * 255).toString(16);\n\treturn hex.length === 1 ? '0' + hex : hex;\n}\n\n/** Encodes an RGBA color in Linear-sRGB-D65 color space. */\nfunction encodeRGBA(value: vec4): string {\n\tColorUtils.convertLinearToSRGB(value, value);\n\treturn value.map(encodeFloat).join('');\n}\n\n/** Returns the nearest higher power of two. */\nfunction ceilPowerOfTwo(value: number): number {\n\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\n/** Writes an NxN block of pixels to an image, at the given block index. */\nfunction writeBlock(pixels: NdArray<TypedArray>, index: number, value: vec4, blockSize: number): void {\n\tfor (let i = 0; i < blockSize; i++) {\n\t\tfor (let j = 0; j < blockSize; j++) {\n\t\t\tpixels.set(index * blockSize + i, j, 0, value[0] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 1, value[1] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 2, value[2] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 3, value[3] * 255);\n\t\t}\n\t}\n}\n","import { Document, ILogger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { assignDefaults, createTransform } from './utils.js';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> = {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n *\n * @category Transforms\n */\nexport function partition(_options: PartitionOptions = PARTITION_DEFAULTS): Transform {\n\tconst options = assignDefaults(PARTITION_DEFAULTS, _options);\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.BUFFER] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction partitionMeshes(doc: Document, logger: ILogger, options: Required<PartitionOptions>): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI()),\n\t);\n\n\tdoc.getRoot()\n\t\t.listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\tprimitive.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\tprimitive.listTargets().forEach((primTarget) => {\n\t\t\t\t\tprimTarget.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations(doc: Document, logger: ILogger, options: Required<PartitionOptions>): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI()),\n\t);\n\n\tdoc.getRoot()\n\t\t.listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t});\n\t\t});\n}\n\nconst SANITIZE_BASENAME_RE = /[^\\w0–9-]+/g;\n\nfunction createBufferURI(basename: string, existing: Set<string>): string {\n\tbasename = basename.replace(SANITIZE_BASENAME_RE, '');\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\texisting.add(uri);\n\treturn uri;\n}\n","var InterpolationInternal;\n\n(function (InterpolationInternal) {\n  InterpolationInternal[InterpolationInternal[\"STEP\"] = 0] = \"STEP\";\n  InterpolationInternal[InterpolationInternal[\"LERP\"] = 1] = \"LERP\";\n  InterpolationInternal[InterpolationInternal[\"SLERP\"] = 2] = \"SLERP\";\n})(InterpolationInternal || (InterpolationInternal = {}));\n\nconst TO_INTERPOLATION_INTERNAL = {\n  step: InterpolationInternal.STEP,\n  lerp: InterpolationInternal.LERP,\n  slerp: InterpolationInternal.SLERP\n};\nconst EPSILON = 0.000001;\n\n/* Implementation */\n\nfunction resampleDebug(input, output, interpolation, tolerance = 1e-4) {\n  const elementSize = output.length / input.length;\n  const tmp = new Array(elementSize).fill(0);\n  const value = new Array(elementSize).fill(0);\n  const valueNext = new Array(elementSize).fill(0);\n  const valuePrev = new Array(elementSize).fill(0);\n  const lastIndex = input.length - 1;\n  let writeIndex = 1;\n\n  for (let i = 1; i < lastIndex; ++i) {\n    const timePrev = input[writeIndex - 1];\n    const time = input[i];\n    const timeNext = input[i + 1];\n    const t = (time - timePrev) / (timeNext - timePrev);\n    let keep = false; // Remove unnecessary adjacent keyframes.\n\n    if (time !== timeNext && (i !== 1 || time !== input[0])) {\n      getElement(output, writeIndex - 1, valuePrev);\n      getElement(output, i, value);\n      getElement(output, i + 1, valueNext);\n\n      if (interpolation === 'slerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = slerp(tmp, valuePrev, valueNext, t);\n        const angle = getAngle(valuePrev, value) + getAngle(value, valueNext);\n        keep = !eq(value, sample, tolerance) || angle + Number.EPSILON >= Math.PI;\n      } else if (interpolation === 'lerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = vlerp(tmp, valuePrev, valueNext, t);\n        keep = !eq(value, sample, tolerance);\n      } else if (interpolation === 'step') {\n        // Prune keyframes identical to prev/next keyframes.\n        keep = !eq(value, valuePrev) || !eq(value, valueNext);\n      }\n    } // In-place compaction.\n\n\n    if (keep) {\n      if (i !== writeIndex) {\n        input[writeIndex] = input[i];\n        setElement(output, writeIndex, getElement(output, i, tmp));\n      }\n\n      writeIndex++;\n    }\n  } // Flush last keyframe (compaction looks ahead).\n\n\n  if (lastIndex > 0) {\n    input[writeIndex] = input[lastIndex];\n    setElement(output, writeIndex, getElement(output, lastIndex, tmp));\n    writeIndex++;\n  }\n\n  return writeIndex;\n}\n/* Utilities */\n\nfunction getElement(array, index, target) {\n  for (let i = 0, elementSize = target.length; i < elementSize; i++) {\n    target[i] = array[index * elementSize + i];\n  }\n\n  return target;\n}\n\nfunction setElement(array, index, value) {\n  for (let i = 0, elementSize = value.length; i < elementSize; i++) {\n    array[index * elementSize + i] = value[i];\n  }\n}\n\nfunction eq(a, b, tolerance = 0) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (Math.abs(a[i] - b[i]) > tolerance) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction lerp(v0, v1, t) {\n  return v0 * (1 - t) + v1 * t;\n}\n\nfunction vlerp(out, a, b, t) {\n  for (let i = 0; i < a.length; i++) out[i] = lerp(a[i], b[i], t);\n\n  return out;\n} // From gl-matrix.\n\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  let omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n\nfunction getAngle(a, b) {\n  const dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/** WASM loader for Web environments. */\nconst wasm = /* #__PURE__ */fetch( /* #__PURE__ */new URL('./release.wasm', import.meta.url)).then(response => response.arrayBuffer()).then(buffer => new Uint8Array(buffer));\n\n// SETUP\n///////////////////////////////////////////////////////////////////////////////\n\nlet exports;\nconst ready = /* #__PURE__ */new Promise(async (resolve, reject) => {\n  try {\n    const module = await WebAssembly.compile(await wasm);\n    exports = await instantiate(module, {});\n    resolve();\n  } catch (e) {\n    reject(e);\n  }\n});\n\nasync function instantiate(module, imports = {}) {\n  const instance = await WebAssembly.instantiate(module, {\n    env: Object.assign(Object.create(globalThis), {}, {\n      abort: __abort\n    })\n  });\n  return instance.exports;\n} ///////////////////////////////////////////////////////////////////////////////\n// PUBLIC API\n///////////////////////////////////////////////////////////////////////////////\n\n\nconst CHUNK_SIZE = 1024; // The first and last keyframes cannot be removed in any given step, but we need to\n// somehow remove keyframes on chunk boundaries. So after processing each chunk,\n// we copy its last two keyframes in front of the next chunk, and run from there.\n//\n// 🟩 ⬜️ ⬜️ ⬜️ ⬜️ ⬜️                  // chunk 1, original\n// 🟩 ⬜️ 🟨 🟥                       // chunk 1, resampled\n//            🟨 🟥 🟩 ⬜️ ⬜️ ⬜️       // chunk 2, original\n//            🟨 🟩 ⬜️ ⬜️            // chunk 2, resampled\n// ...\n\nfunction resample(input, output, interpolation, tolerance = 1e-4) {\n  __assert(!!exports, 'Await \"ready\" before using module.');\n\n  __assert(input instanceof Float32Array, 'Missing Float32Array input.');\n\n  __assert(output instanceof Float32Array, 'Missing Float32Array output.');\n\n  const outputSize = output.length / input.length;\n\n  __assert(Number.isInteger(outputSize), 'Invalid input/output counts.');\n\n  __assert(interpolation in TO_INTERPOLATION_INTERNAL, 'Invalid interpolation.');\n\n  __assert(Number.isFinite(tolerance), 'Invalid tolerance');\n\n  const interpVal = TO_INTERPOLATION_INTERNAL[interpolation];\n  const srcCount = input.length;\n  let dstCount = 0;\n\n  for (let chunkStart = 0; chunkStart < input.length; chunkStart += CHUNK_SIZE) {\n    const chunkCount = Math.min(srcCount - chunkStart, CHUNK_SIZE); // Allocate a two-keyframe prefix for all chunks after the first.\n\n    const prefixCount = chunkStart > 0 ? 2 : 0;\n    const chunkInput = new Float32Array(input.buffer, input.byteOffset + (chunkStart - prefixCount) * Float32Array.BYTES_PER_ELEMENT, chunkCount + prefixCount);\n    const chunkOutput = new Float32Array(output.buffer, output.byteOffset + (chunkStart - prefixCount) * outputSize * Float32Array.BYTES_PER_ELEMENT, (chunkCount + prefixCount) * outputSize); // Copy prefix to start of next chunk.\n\n    if (prefixCount > 0) {\n      input.copyWithin(chunkStart - prefixCount, dstCount - prefixCount, dstCount);\n      output.copyWithin((chunkStart - prefixCount) * outputSize, (dstCount - prefixCount) * outputSize, dstCount * outputSize);\n    }\n\n    const inputPtr = __retain(__lowerStaticArray(chunkInput, 4, 2));\n\n    const outputPtr = __retain(__lowerStaticArray(chunkOutput, 4, 2));\n\n    try {\n      exports.__setArgumentsLength(4);\n\n      const count = exports.resample(inputPtr, outputPtr, interpVal, tolerance) >>> 0;\n      dstCount -= prefixCount;\n\n      __liftStaticArray(inputPtr, input, dstCount, count);\n\n      __liftStaticArray(outputPtr, output, dstCount * outputSize, count * outputSize);\n\n      dstCount += count;\n    } finally {\n      __release(inputPtr);\n\n      __release(outputPtr);\n\n      exports.__collect();\n    }\n  } // console.log(`Memory: ${exports.memory.buffer.byteLength} bytes`);\n\n\n  return dstCount;\n} ///////////////////////////////////////////////////////////////////////////////\n// INTERNAL\n///////////////////////////////////////////////////////////////////////////////\n\nfunction __assert(cond, msg) {\n  if (!cond) throw new Error(msg);\n}\n\nfunction __retain(ptr) {\n  exports.__pin(ptr);\n\n  return ptr;\n}\n\nfunction __release(ptr) {\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftString(ptr) {\n  if (!ptr) return null;\n  const end = ptr + new Uint32Array(exports.memory.buffer)[ptr - 4 >>> 2] >>> 1,\n        memoryU16 = new Uint16Array(exports.memory.buffer);\n  let start = ptr >>> 1,\n      string = '';\n\n  while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n\n  return string + String.fromCharCode(...memoryU16.subarray(start, end));\n}\n\nfunction __lowerStaticArray(values, id, align) {\n  const ptr = exports.__pin(exports.__new(values.length << align, id)) >>> 0;\n  new Float32Array(exports.memory.buffer, ptr, values.length).set(values);\n\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftStaticArray(ptr, values, offset, count) {\n  values.set(new Float32Array(exports.memory.buffer, ptr, count), offset);\n}\n\nfunction __abort(messagePtr, fileNamePtr, lineNumber, columnNumber) {\n  const message = __liftString(messagePtr >>> 0);\n\n  const fileName = __liftString(fileNamePtr >>> 0);\n\n  lineNumber = lineNumber >>> 0;\n  columnNumber = columnNumber >>> 0;\n\n  (() => {\n    throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n  })();\n}\n\nexport { ready, resample, resampleDebug };\n//# sourceMappingURL=keyframe-resample-browser.modern.js.map\n","import {\n\tAccessor,\n\tAnimationSampler,\n\tComponentTypeToTypedArray,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tTypedArray,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { assignDefaults, createTransform } from './utils.js';\nimport { resampleDebug } from 'keyframe-resample';\n\nconst NAME = 'resample';\n\nconst EMPTY_ARRAY = new Float32Array(0);\n\nexport interface ResampleOptions {\n\tready?: Promise<void>;\n\tresample?: unknown; // glTF-Transform/issues/996\n\ttolerance?: number;\n\t/**\n\t * Whether to perform cleanup steps after completing the operation. Recommended, and enabled by\n\t * default. Cleanup removes temporary resources created during the operation, but may also remove\n\t * pre-existing unused or duplicate resources in the {@link Document}. Applications that require\n\t * keeping these resources may need to disable cleanup, instead calling {@link dedup} and\n\t * {@link prune} manually (with customized options) later in the processing pipeline.\n\t * @experimental\n\t */\n\tcleanup?: boolean;\n}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> = {\n\tready: Promise.resolve(),\n\tresample: resampleDebug,\n\ttolerance: 1e-4,\n\tcleanup: true,\n};\n\n/**\n * Resample {@link AnimationChannel AnimationChannels}, losslessly deduplicating keyframes to\n * reduce file size. Duplicate keyframes are commonly present in animation 'baked' by the\n * authoring software to apply IK constraints or other software-specific features.\n *\n * Optionally, a WebAssembly implementation from the\n * [`keyframe-resample`](https://github.com/donmccurdy/keyframe-resample-wasm) library may be\n * provided. The WebAssembly version is usually much faster at processing large animation\n * sequences, but may not be compatible with all runtimes and JavaScript build tools.\n *\n * Result: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) → (0,0,1,1,0,0)\n *\n * Example:\n *\n * ```\n * import { resample } from '@gltf-transform/functions';\n * import { ready, resample as resampleWASM } from 'keyframe-resample';\n *\n * // JavaScript (slower)\n * await document.transform(resample());\n *\n * // WebAssembly (faster)\n * await document.transform(resample({ ready, resample: resampleWASM }));\n * ```\n *\n * @privateRemarks Implementation based on THREE.KeyframeTrack#optimize().\n * @category Transforms\n */\nexport function resample(_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform {\n\tconst options = assignDefaults(RESAMPLE_DEFAULTS, _options);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst srcAccessorCount = document.getRoot().listAccessors().length;\n\t\tconst logger = document.getLogger();\n\n\t\tconst ready = options.ready;\n\t\tconst resample = options.resample as typeof resampleDebug;\n\n\t\tawait ready;\n\n\t\tfor (const animation of document.getRoot().listAnimations()) {\n\t\t\tconst samplerTargetPaths = new Map<AnimationSampler, GLTF.AnimationChannelTargetPath>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tsamplerTargetPaths.set(channel.getSampler()!, channel.getTargetPath()!);\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tconst samplerInterpolation = sampler.getInterpolation();\n\n\t\t\t\tif (samplerInterpolation === 'STEP' || samplerInterpolation === 'LINEAR') {\n\t\t\t\t\tconst input = sampler.getInput()!;\n\t\t\t\t\tconst output = sampler.getOutput()!;\n\n\t\t\t\t\taccessorsVisited.add(input);\n\t\t\t\t\taccessorsVisited.add(output);\n\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\tconst tmpTimes = toFloat32Array(\n\t\t\t\t\t\tinput.getArray()!,\n\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\tinput.getNormalized()\n\t\t\t\t\t);\n\t\t\t\t\tconst tmpValues = toFloat32Array(\n\t\t\t\t\t\toutput.getArray()!,\n\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\toutput.getNormalized(),\n\t\t\t\t\t);\n\n\t\t\t\t\tconst elementSize = tmpValues.length / tmpTimes.length;\n\t\t\t\t\tconst srcCount = tmpTimes.length;\n\t\t\t\t\tlet dstCount: number;\n\n\t\t\t\t\tif (samplerInterpolation === 'STEP') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'step', options.tolerance);\n\t\t\t\t\t} else if (samplerTargetPaths.get(sampler) === 'rotation') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'slerp', options.tolerance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'lerp', options.tolerance);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dstCount < srcCount) {\n\t\t\t\t\t\t// Clone the input/output accessors, without cloning their underlying\n\t\t\t\t\t\t// arrays. Then assign the resampled data.\n\t\t\t\t\t\tconst srcTimes = input.getArray()!;\n\t\t\t\t\t\tconst srcValues = output.getArray()!;\n\n\t\t\t\t\t\tconst dstTimes = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpTimes.buffer, tmpTimes.byteOffset, dstCount),\n\t\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\t\tinput.getNormalized(),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dstValues = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpValues.buffer, tmpValues.byteOffset, dstCount * elementSize),\n\t\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\t\toutput.getNormalized(),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tinput.setArray(EMPTY_ARRAY);\n\t\t\t\t\t\toutput.setArray(EMPTY_ARRAY);\n\n\t\t\t\t\t\tsampler.setInput(input.clone().setArray(dstTimes));\n\t\t\t\t\t\tsampler.setOutput(output.clone().setArray(dstValues));\n\n\t\t\t\t\t\tinput.setArray(srcTimes);\n\t\t\t\t\t\toutput.setArray(srcValues);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\t// Resampling may result in duplicate input or output sampler\n\t\t// accessors. Find and remove the duplicates after processing.\n\t\tconst dstAccessorCount = document.getRoot().listAccessors().length;\n\t\tif (dstAccessorCount > srcAccessorCount && options.cleanup) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Returns a copy of the source array, as a denormalized Float32Array. */\nfunction toFloat32Array(\n\tsrcArray: TypedArray,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean,\n): Float32Array {\n\tif (srcArray instanceof Float32Array) return srcArray.slice();\n\tconst dstArray = new Float32Array(srcArray);\n\tif (!normalized) return dstArray;\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = MathUtils.decodeNormalizedInt(dstArray[i], componentType);\n\t}\n\n\treturn dstArray;\n}\n\n/** Returns a copy of the source array, with specified component type and normalization. */\nfunction fromFloat32Array(\n\tsrcArray: Float32Array,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean,\n): TypedArray {\n\tif (componentType === Accessor.ComponentType.FLOAT) return srcArray.slice();\n\tconst TypedArray = ComponentTypeToTypedArray[componentType];\n\tconst dstArray = new TypedArray(srcArray.length);\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = normalized ? MathUtils.encodeNormalizedInt(srcArray[i], componentType) : srcArray[i];\n\t}\n\n\treturn dstArray;\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { assignDefaults, createTransform } from './utils.js';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n *\n * @category Transforms\n */\nexport function sequence(_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = assignDefaults(SEQUENCE_DEFAULTS, _options);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes().filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => (a.getName() > b.getName() ? 1 : -1));\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor().setArray(new Float32Array(inputArray)).setBuffer(animBuffer);\n\t\t\tconst output = doc\n\t\t\t\t.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc\n\t\t\t\t.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc\n\t\t\t\t.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Document, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport {\n\tcreateTransform,\n\tformatDeltaOp,\n\tdeepListAttributes,\n\tdeepSwapAttribute,\n\tshallowCloneAccessor,\n\tassignDefaults,\n} from './utils.js';\nimport { weld } from './weld.js';\nimport type { MeshoptSimplifier } from 'meshoptimizer';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\nimport { dequantizeAttributeArray } from './dequantize.js';\nimport { unweldPrimitive } from './unweld.js';\nimport { convertPrimitiveToTriangles } from './convert-primitive-mode.js';\nimport { compactAttribute, compactPrimitive } from './compact-primitive.js';\nimport { VertexCountMethod, getPrimitiveVertexCount } from './get-vertex-count.js';\n\nconst NAME = 'simplify';\n\nconst { POINTS, LINES, LINE_STRIP, LINE_LOOP, TRIANGLES, TRIANGLE_STRIP, TRIANGLE_FAN } = Primitive.Mode;\n\n/** Options for the {@link simplify} function. */\nexport interface SimplifyOptions {\n\t/** MeshoptSimplifier instance. */\n\tsimplifier: unknown;\n\t/** Target ratio (0–1) of vertices to keep. Default: 0.0 (0%). */\n\tratio?: number;\n\t/** Limit on error, as a fraction of mesh radius. Default: 0.0001 (0.01%). */\n\terror?: number;\n\t/**\n\t * Whether to lock topological borders of the mesh. May be necessary when\n\t * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping\n\t * to ensure no seams appear.\n\t */\n\tlockBorder?: boolean;\n\t/**\n\t * Whether to perform cleanup steps after completing the operation. Recommended, and enabled by\n\t * default. Cleanup removes temporary resources created during the operation, but may also remove\n\t * pre-existing unused or duplicate resources in the {@link Document}. Applications that require\n\t * keeping these resources may need to disable cleanup, instead calling {@link dedup} and\n\t * {@link prune} manually (with customized options) later in the processing pipeline.\n\t * @experimental\n\t */\n\tcleanup?: boolean;\n}\n\nexport const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>> = {\n\tratio: 0.0,\n\terror: 0.0001,\n\tlockBorder: false,\n\tcleanup: true,\n};\n\n/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer\n * triangles and vertices. Simplification is lossy, but the algorithm aims to\n * preserve visual quality as much as possible for given parameters.\n *\n * The algorithm aims to reach the target 'ratio', while minimizing error. If\n * error exceeds the specified 'error' threshold, the algorithm will quit\n * before reaching the target ratio. Examples:\n *\n * - ratio=0.0, error=0.0001: Aims for maximum simplification, constrained to 0.01% error.\n * - ratio=0.5, error=0.0001: Aims for 50% simplification, constrained to 0.01% error.\n * - ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error.\n *\n * Topology, particularly split vertices, will also limit the simplifier. For\n * best results, apply a {@link weld} operation before simplification.\n *\n * Example:\n *\n * ```javascript\n * import { simplify, weld } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   weld({}),\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75, error: 0.001 })\n * );\n * ```\n *\n * References:\n * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n *\n * @category Transforms\n */\nexport function simplify(_options: SimplifyOptions): Transform {\n\tconst options = assignDefaults(SIMPLIFY_DEFAULTS, _options);\n\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier | undefined;\n\n\tif (!simplifier) {\n\t\tthrow new Error(`${NAME}: simplifier dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait simplifier.ready;\n\t\tawait document.transform(weld({ overwrite: false, cleanup: options.cleanup }));\n\n\t\tlet numUnsupported = 0;\n\n\t\t// Simplify mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst mode = prim.getMode();\n\t\t\t\tif (mode === TRIANGLES || mode === TRIANGLE_STRIP || mode === TRIANGLE_FAN) {\n\t\t\t\t\tsimplifyPrimitive(prim, options);\n\t\t\t\t\tif (getPrimitiveVertexCount(prim, VertexCountMethod.RENDER) === 0) {\n\t\t\t\t\t\tprim.dispose();\n\t\t\t\t\t}\n\t\t\t\t} else if (prim.getMode() === POINTS && !!simplifier.simplifyPoints) {\n\t\t\t\t\tsimplifyPrimitive(prim, options);\n\t\t\t\t\tif (getPrimitiveVertexCount(prim, VertexCountMethod.RENDER) === 0) {\n\t\t\t\t\t\tprim.dispose();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnumUnsupported++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\tif (numUnsupported > 0) {\n\t\t\tlogger.warn(`${NAME}: Skipping simplification of ${numUnsupported} primitives: Unsupported draw mode.`);\n\t\t}\n\n\t\t// Where simplification removes meshes, we may need to prune leaf nodes.\n\t\tif (options.cleanup) {\n\t\t\tawait document.transform(\n\t\t\t\tprune({\n\t\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE],\n\t\t\t\t\tkeepAttributes: true,\n\t\t\t\t\tkeepIndices: true,\n\t\t\t\t\tkeepLeaves: false,\n\t\t\t\t}),\n\t\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR] }),\n\t\t\t);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** @hidden */\nexport function simplifyPrimitive(prim: Primitive, _options: SimplifyOptions): Primitive {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier;\n\tconst graph = prim.getGraph();\n\tconst document = Document.fromGraph(graph)!;\n\tconst logger = document.getLogger();\n\n\tswitch (prim.getMode()) {\n\t\tcase POINTS:\n\t\t\treturn _simplifyPoints(document, prim, options);\n\t\tcase LINES:\n\t\tcase LINE_STRIP:\n\t\tcase LINE_LOOP:\n\t\t\tlogger.warn(`${NAME}: Skipping primitive simplification: Unsupported draw mode.`);\n\t\t\treturn prim;\n\t\tcase TRIANGLE_STRIP:\n\t\tcase TRIANGLE_FAN:\n\t\t\tconvertPrimitiveToTriangles(prim);\n\t\t\tbreak;\n\t}\n\n\t// (1) If primitive draws <50% of its vertex stream, compact before simplification.\n\n\tconst srcVertexCount = getPrimitiveVertexCount(prim, VertexCountMethod.UPLOAD);\n\tconst srcIndexCount = getPrimitiveVertexCount(prim, VertexCountMethod.RENDER);\n\tif (srcIndexCount < srcVertexCount / 2) {\n\t\tcompactPrimitive(prim);\n\t}\n\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices()!;\n\n\tlet positionArray = position.getArray()!;\n\tlet indicesArray = srcIndices.getArray()!;\n\n\t// (2) Gather attributes and indices in Meshopt-compatible format.\n\n\tif (!(positionArray instanceof Float32Array)) {\n\t\tpositionArray = dequantizeAttributeArray(positionArray, position.getComponentType(), position.getNormalized());\n\t}\n\tif (!(indicesArray instanceof Uint32Array)) {\n\t\tindicesArray = new Uint32Array(indicesArray);\n\t}\n\n\t// (3) Run simplification.\n\n\tconst targetCount = Math.floor((options.ratio * srcIndexCount) / 3) * 3;\n\tconst flags = options.lockBorder ? ['LockBorder'] : [];\n\n\tconst [dstIndicesArray, error] = simplifier.simplify(\n\t\tindicesArray,\n\t\tpositionArray,\n\t\t3,\n\t\ttargetCount,\n\t\toptions.error,\n\t\tflags as 'LockBorder'[],\n\t);\n\n\t// (4) Assign subset of indexes; compact primitive.\n\n\tprim.setIndices(shallowCloneAccessor(document, srcIndices).setArray(dstIndicesArray));\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\tcompactPrimitive(prim);\n\n\tconst dstVertexCount = getPrimitiveVertexCount(prim, VertexCountMethod.UPLOAD);\n\tif (dstVertexCount <= 65534) {\n\t\tprim.getIndices()!.setArray(new Uint16Array(prim.getIndices()!.getArray()!));\n\t}\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices, error: ${error.toFixed(4)}.`);\n\n\treturn prim;\n}\n\nfunction _simplifyPoints(document: Document, prim: Primitive, options: Required<SimplifyOptions>): Primitive {\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier;\n\tconst logger = document.getLogger();\n\n\tconst indices = prim.getIndices();\n\tif (indices) unweldPrimitive(prim);\n\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst color = prim.getAttribute('COLOR_0');\n\tconst srcVertexCount = position.getCount();\n\n\tlet positionArray = position.getArray()!;\n\tlet colorArray = color ? color.getArray()! : undefined;\n\tconst colorStride = color ? color.getComponentSize() : undefined;\n\n\t// (1) Gather attributes in Meshopt-compatible format.\n\n\tif (!(positionArray instanceof Float32Array)) {\n\t\tpositionArray = dequantizeAttributeArray(positionArray, position.getComponentType(), position.getNormalized());\n\t}\n\tif (colorArray && !(colorArray instanceof Float32Array)) {\n\t\tcolorArray = dequantizeAttributeArray(colorArray, position.getComponentType(), position.getNormalized());\n\t}\n\n\t// (2) Run simplification.\n\n\tsimplifier.useExperimentalFeatures = true;\n\tconst targetCount = Math.floor(options.ratio * srcVertexCount);\n\tconst dstIndicesArray = simplifier.simplifyPoints(positionArray, 3, targetCount, colorArray, colorStride);\n\tsimplifier.useExperimentalFeatures = false;\n\n\t// (3) Write vertex attributes.\n\n\tconst [remap, unique] = simplifier.compactMesh(dstIndicesArray);\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(position.getCount(), unique)} vertices.`);\n\n\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\tconst dstAttribute = shallowCloneAccessor(document, srcAttribute);\n\t\tcompactAttribute(srcAttribute, null, remap, dstAttribute, unique);\n\t\tdeepSwapAttribute(prim, srcAttribute, dstAttribute);\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\treturn prim;\n}\n","import { Document, MathUtils, Transform } from '@gltf-transform/core';\nimport { assignDefaults, createTransform } from './utils.js';\n\nconst NAME = 'sparse';\n\n/** Options for the {@link sparse} function. */\nexport interface SparseOptions {\n\t/**\n\t * Threshold ratio used to determine when an accessor should be sparse.\n\t * Default: 1 / 3.\n\t */\n\tratio: number;\n}\n\nconst SPARSE_DEFAULTS: Required<SparseOptions> = {\n\tratio: 1 / 3,\n};\n\n/**\n * Scans all {@link Accessor Accessors} in the Document, detecting whether each Accessor\n * would benefit from sparse data storage. Currently, sparse data storage is used only\n * when many values (>= ratio) are zeroes. Particularly for assets using morph target\n * (\"shape key\") animation, sparse data storage may significantly reduce file sizes.\n *\n * Example:\n *\n * ```ts\n * import { sparse } from '@gltf-transform/functions';\n *\n * accessor.getArray(); // → [ 0, 0, 0, 0, 0, 25.0, 0, 0, ... ]\n * accessor.getSparse(); // → false\n *\n * await document.transform(sparse({ratio: 1 / 10}));\n *\n * accessor.getSparse(); // → true\n * ```\n *\n * @experimental\n * @category Transforms\n */\nexport function sparse(_options: SparseOptions = SPARSE_DEFAULTS): Transform {\n\tconst options = assignDefaults(SPARSE_DEFAULTS, _options);\n\n\tconst ratio = options.ratio;\n\tif (ratio < 0 || ratio > 1) {\n\t\tthrow new Error(`${NAME}: Ratio must be between 0 and 1.`);\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\tlet modifiedCount = 0;\n\n\t\tfor (const accessor of root.listAccessors()) {\n\t\t\tconst count = accessor.getCount();\n\t\t\tconst base = Array(accessor.getElementSize()).fill(0);\n\t\t\tconst el = Array(accessor.getElementSize()).fill(0);\n\n\t\t\tlet nonZeroCount = 0;\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\taccessor.getElement(i, el);\n\t\t\t\tif (!MathUtils.eq(el, base, 0)) nonZeroCount++;\n\t\t\t\tif (nonZeroCount / count >= ratio) break;\n\t\t\t}\n\n\t\t\tconst sparse = nonZeroCount / count < ratio;\n\t\t\tif (sparse !== accessor.getSparse()) {\n\t\t\t\taccessor.setSparse(sparse);\n\t\t\t\tmodifiedCount++;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Updated ${modifiedCount} accessors.`);\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import {\n\tBufferUtils,\n\tDocument,\n\tFileUtils,\n\tImageUtils,\n\tTexture,\n\tTextureChannel,\n\tTransform,\n\tvec2,\n} from '@gltf-transform/core';\nimport { EXTTextureAVIF, EXTTextureWebP } from '@gltf-transform/extensions';\nimport { getTextureChannelMask } from './list-texture-channels.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport type sharp from 'sharp';\nimport { assignDefaults, createTransform, fitPowerOfTwo, fitWithin, formatBytes } from './utils.js';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\n\nconst NAME = 'textureCompress';\n\ntype Format = (typeof TEXTURE_COMPRESS_SUPPORTED_FORMATS)[number];\nexport const TEXTURE_COMPRESS_SUPPORTED_FORMATS = ['jpeg', 'png', 'webp', 'avif'] as const;\nconst SUPPORTED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp', 'image/avif'];\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport interface TextureCompressOptions {\n\t/** Instance of the Sharp encoder, which must be installed from the\n\t * 'sharp' package and provided by the caller. When not provided, a\n\t * platform-specific fallback implementation will be used, and most\n\t * quality- and compression-related options are ignored.\n\t */\n\tencoder?: unknown;\n\t/**\n\t * Target image format. If specified, included textures in other formats\n\t * will be converted. Default: original format.\n\t */\n\ttargetFormat?: Format;\n\t/**\n\t * Resizes textures to given maximum width/height, preserving aspect ratio.\n\t * For example, a 4096x8192 texture, resized with limit [2048, 2048] will\n\t * be reduced to 1024x2048.\n\t *\n\t * Presets \"nearest-pot\", \"ceil-pot\", and \"floor-pot\" resize textures to\n\t * power-of-two dimensions, for older graphics APIs including WebGL 1.0.\n\t */\n\tresize?: vec2 | 'nearest-pot' | 'ceil-pot' | 'floor-pot';\n\t/** Interpolation used if resizing. Default: TextureResizeFilter.LANCZOS3. */\n\tresizeFilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to compress, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/**\n\t * Pattern matching the format(s) to be compressed or converted. Some examples\n\t * of formats include \"jpeg\" and \"png\".\n\t */\n\tformats?: RegExp | null;\n\t/**\n\t * Pattern matching the material texture slot(s) to be compressed or converted.\n\t * Some examples of slot names include \"baseColorTexture\", \"occlusionTexture\",\n\t * \"metallicRoughnessTexture\", and \"normalTexture\".\n\t */\n\tslots?: RegExp | null;\n\n\t/** Quality, 1-100. Default: auto. */\n\tquality?: number | null;\n\t/**\n\t * Level of CPU effort to reduce file size, 0-100. PNG, WebP, and AVIF\n\t * only. Supported only when a Sharp encoder is provided. Default: auto.\n\t */\n\teffort?: number | null;\n\t/**\n\t * Use lossless compression mode. WebP and AVIF only. Supported only when a\n\t * Sharp encoder is provided. Default: false.\n\t */\n\tlossless?: boolean;\n\t/**\n\t * Use near lossless compression mode. WebP only. Supported only when a\n\t * Sharp encoder is provided. Default: false.\n\t */\n\tnearLossless?: boolean;\n\n\t/**\n\t * Attempts to avoid processing images that could exceed memory or other other\n\t * limits, throwing an error instead. Default: true.\n\t * @experimental\n\t */\n\tlimitInputPixels?: boolean;\n}\n\nexport type CompressTextureOptions = Omit<TextureCompressOptions, 'pattern' | 'formats' | 'slots'>;\n\n// IMPORTANT: No defaults for quality flags, see https://github.com/donmccurdy/glTF-Transform/issues/969.\nexport const TEXTURE_COMPRESS_DEFAULTS: Omit<TextureCompressOptions, 'resize' | 'targetFormat' | 'encoder'> = {\n\tresizeFilter: TextureResizeFilter.LANCZOS3,\n\tpattern: undefined,\n\tformats: undefined,\n\tslots: undefined,\n\tquality: undefined,\n\teffort: undefined,\n\tlossless: false,\n\tnearLossless: false,\n\tlimitInputPixels: true,\n};\n\n/**\n * Optimizes images, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * For best results use a Node.js environment, install the `sharp` module, and\n * provide an encoder. When the encoder is omitted — `sharp` works only in Node.js —\n * the implementation will use a platform-specific fallback encoder, and most\n * quality- and compression-related options are ignored.\n *\n * Example:\n *\n * ```javascript\n * import { textureCompress } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * // (A) Optimize without conversion.\n * await document.transform(\n * \ttextureCompress({encoder: sharp})\n * );\n *\n * // (B) Optimize and convert images to WebP.\n * await document.transform(\n * \ttextureCompress({\n * \t\tencoder: sharp,\n * \t\ttargetFormat: 'webp',\n * \t\tslots: /^(?!normalTexture).*$/ // exclude normal maps\n * \t})\n * );\n *\n * // (C) Resize and convert images to WebP in a browser, without a Sharp\n * // encoder. Most quality- and compression-related options are ignored.\n * await document.transform(\n * \ttextureCompress({ targetFormat: 'webp', resize: [1024, 1024] })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function textureCompress(_options: TextureCompressOptions): Transform {\n\tconst options = assignDefaults(TEXTURE_COMPRESS_DEFAULTS, _options);\n\tconst targetFormat = options.targetFormat as Format | undefined;\n\tconst patternRe = options.pattern;\n\tconst formatsRe = options.formats;\n\tconst slotsRe = options.slots;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst textures = document.getRoot().listTextures();\n\n\t\tawait Promise.all(\n\t\t\ttextures.map(async (texture, textureIndex) => {\n\t\t\t\tconst slots = listTextureSlots(texture);\n\t\t\t\tconst channels = getTextureChannelMask(texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${document.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `${NAME}(${textureLabel})`;\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (!SUPPORTED_MIME_TYPES.includes(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (patternRe && !patternRe.test(texture.getName()) && !patternRe.test(texture.getURI())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (formatsRe && !formatsRe.test(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, \"${texture.getMimeType()}\" excluded by \"formats\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slotsRe && slots.length && !slots.some((slot) => slotsRe.test(slot))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (options.targetFormat === 'jpeg' && channels & TextureChannel.A) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, [${slots.join(', ')}] requires alpha channel.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst srcFormat = getFormat(texture);\n\t\t\t\tconst dstFormat = targetFormat || srcFormat;\n\t\t\t\tlogger.debug(`${prefix}: Format = ${srcFormat} → ${dstFormat}`);\n\t\t\t\tlogger.debug(`${prefix}: Slots = [${slots.join(', ')}]`);\n\n\t\t\t\tconst srcImage = texture.getImage()!;\n\t\t\t\tconst srcByteLength = srcImage.byteLength;\n\n\t\t\t\tawait compressTexture(texture, options);\n\n\t\t\t\tconst dstImage = texture.getImage()!;\n\t\t\t\tconst dstByteLength = dstImage.byteLength;\n\n\t\t\t\tconst flag = srcImage === dstImage ? ' (SKIPPED' : '';\n\n\t\t\t\tlogger.debug(`${prefix}: Size = ${formatBytes(srcByteLength)} → ${formatBytes(dstByteLength)}${flag}`);\n\t\t\t}),\n\t\t);\n\n\t\t// Attach EXT_texture_webp if needed.\n\t\tconst webpExtension = document.createExtension(EXTTextureWebP);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/webp')) {\n\t\t\twebpExtension.setRequired(true);\n\t\t} else {\n\t\t\twebpExtension.dispose();\n\t\t}\n\n\t\t// Attach EXT_texture_avif if needed.\n\t\tconst avifExtension = document.createExtension(EXTTextureAVIF);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/avif')) {\n\t\t\tavifExtension.setRequired(true);\n\t\t} else {\n\t\t\tavifExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Optimizes a single {@link Texture}, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * For best results use a Node.js environment, install the `sharp` module, and\n * provide an encoder. When the encoder is omitted — `sharp` works only in Node.js —\n * the implementation will use a platform-specific fallback encoder, and most\n * quality- and compression-related options are ignored.\n *\n * Example:\n *\n * ```javascript\n * import { compressTexture } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * const texture = document.getRoot().listTextures()\n * \t.find((texture) => texture.getName() === 'MyTexture');\n *\n * // (A) Node.js.\n * await compressTexture(texture, {\n * \tencoder: sharp,\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n *\n * // (B) Web.\n * await compressTexture(texture, {\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n * ```\n */\nexport async function compressTexture(texture: Texture, _options: CompressTextureOptions) {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<CompressTextureOptions>;\n\tconst encoder = options.encoder as typeof sharp | null;\n\n\tconst srcURI = texture.getURI();\n\tconst srcFormat = getFormat(texture);\n\tconst dstFormat = options.targetFormat || srcFormat;\n\tconst srcMimeType = texture.getMimeType();\n\tconst dstMimeType = `image/${dstFormat}`;\n\n\tconst srcImage = texture.getImage()!;\n\tconst dstImage = encoder\n\t\t? await _encodeWithSharp(srcImage, srcMimeType, dstMimeType, options)\n\t\t: await _encodeWithNdarrayPixels(srcImage, srcMimeType, dstMimeType, options);\n\n\tconst srcByteLength = srcImage.byteLength;\n\tconst dstByteLength = dstImage.byteLength;\n\n\tif (srcMimeType === dstMimeType && dstByteLength >= srcByteLength && !options.resize) {\n\t\t// Skip if src/dst formats match and dst is larger than the original.\n\t\treturn;\n\t} else if (srcMimeType === dstMimeType) {\n\t\t// Overwrite if src/dst formats match and dst is smaller than the original.\n\t\ttexture.setImage(dstImage);\n\t} else {\n\t\t// Overwrite, then update path and MIME type if src/dst formats differ.\n\t\tconst srcExtension = srcURI ? FileUtils.extension(srcURI) : ImageUtils.mimeTypeToExtension(srcMimeType);\n\t\tconst dstExtension = ImageUtils.mimeTypeToExtension(dstMimeType);\n\t\tconst dstURI = texture.getURI().replace(new RegExp(`\\\\.${srcExtension}$`), `.${dstExtension}`);\n\t\ttexture.setImage(dstImage).setMimeType(dstMimeType).setURI(dstURI);\n\t}\n}\n\nasync function _encodeWithSharp(\n\tsrcImage: Uint8Array,\n\t_srcMimeType: string,\n\tdstMimeType: string,\n\toptions: Required<CompressTextureOptions>,\n): Promise<Uint8Array> {\n\tconst encoder = options.encoder as typeof sharp;\n\tlet encoderOptions: sharp.JpegOptions | sharp.PngOptions | sharp.WebpOptions | sharp.AvifOptions = {};\n\n\tconst dstFormat = getFormatFromMimeType(dstMimeType);\n\n\tswitch (dstFormat) {\n\t\tcase 'jpeg':\n\t\t\tencoderOptions = { quality: options.quality } as sharp.JpegOptions;\n\t\t\tbreak;\n\t\tcase 'png':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 10),\n\t\t\t} as sharp.PngOptions;\n\t\t\tbreak;\n\t\tcase 'webp':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 6),\n\t\t\t\tlossless: options.lossless,\n\t\t\t\tnearLossless: options.nearLossless,\n\t\t\t} as sharp.WebpOptions;\n\t\t\tbreak;\n\t\tcase 'avif':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 9),\n\t\t\t\tlossless: options.lossless,\n\t\t\t} as sharp.AvifOptions;\n\t\t\tbreak;\n\t}\n\n\tconst limitInputPixels = options.limitInputPixels;\n\tconst instance = encoder(srcImage, { limitInputPixels }).toFormat(dstFormat, encoderOptions);\n\n\tif (options.resize) {\n\t\tconst srcSize = ImageUtils.getSize(srcImage, _srcMimeType)!;\n\t\tconst dstSize = Array.isArray(options.resize)\n\t\t\t? fitWithin(srcSize, options.resize)\n\t\t\t: fitPowerOfTwo(srcSize, options.resize);\n\t\tinstance.resize(dstSize[0], dstSize[1], { fit: 'fill', kernel: options.resizeFilter });\n\t}\n\n\treturn BufferUtils.toView(await instance.toBuffer());\n}\n\nasync function _encodeWithNdarrayPixels(\n\tsrcImage: Uint8Array,\n\tsrcMimeType: string,\n\tdstMimeType: string,\n\toptions: Required<CompressTextureOptions>,\n): Promise<Uint8Array> {\n\tconst srcPixels = (await getPixels(srcImage, srcMimeType)) as ndarray.NdArray<Uint8Array>;\n\n\tif (options.resize) {\n\t\tconst [w, h] = srcPixels.shape;\n\t\tconst dstSize = Array.isArray(options.resize)\n\t\t\t? fitWithin([w, h], options.resize)\n\t\t\t: fitPowerOfTwo([w, h], options.resize);\n\t\tconst dstPixels = ndarray(new Uint8Array(dstSize[0] * dstSize[1] * 4), [...dstSize, 4]);\n\t\toptions.resizeFilter === TextureResizeFilter.LANCZOS3\n\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\treturn savePixels(dstPixels, dstMimeType);\n\t}\n\n\treturn savePixels(srcPixels, dstMimeType);\n}\n\nfunction getFormat(texture: Texture): Format {\n\treturn getFormatFromMimeType(texture.getMimeType());\n}\n\nfunction getFormatFromMimeType(mimeType: string): Format {\n\tconst format = mimeType.split('/').pop() as Format | undefined;\n\tif (!format || !TEXTURE_COMPRESS_SUPPORTED_FORMATS.includes(format)) {\n\t\tthrow new Error(`Unknown MIME type \"${mimeType}\".`);\n\t}\n\treturn format;\n}\n\nfunction remap(value: number | null | undefined, srcMax: number, dstMax: number): number | undefined {\n\tif (value == null) return undefined;\n\treturn Math.round((value / srcMax) * dstMax);\n}\n","import { Accessor, Document, ILogger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { assignDefaults, createTransform } from './utils.js';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array;\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean;\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function tangents(_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tconst options = assignDefaults(TANGENTS_DEFAULTS, _options);\n\n\tif (!options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents!(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord),\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor().setBuffer(tangentBuffer).setArray(tangentArray).setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(prim: Primitive, logger: ILogger, meshName: string, i: number, overwrite: boolean): boolean {\n\tif (\n\t\tprim.getMode() !== Primitive.Mode.TRIANGLES ||\n\t\t!prim.getAttribute('POSITION') ||\n\t\t!prim.getAttribute('NORMAL') ||\n\t\t!prim.getAttribute('TEXCOORD_0')\n\t) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` +\n\t\t\t\t' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.',\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\tlogger.warn(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` + ' be unwelded.');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import { Accessor, Document, Node, Transform } from '@gltf-transform/core';\nimport { EXTMeshGPUInstancing, InstancedMesh } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'uninstance';\n\nexport interface UninstanceOptions {}\nconst UNINSTANCE_DEFAULTS: Required<UninstanceOptions> = {};\n\n/**\n * Removes extension {@link EXTMeshGPUInstancing}, reversing the effects of the\n * {@link instance} transform or similar instancing operations. For each {@link Node}\n * associated with an {@link InstancedMesh}, the Node's {@link Mesh} and InstancedMesh will\n * be detached. In their place, one Node per instance will be attached to the original\n * Node as children, associated with the same Mesh. The extension, `EXT_mesh_gpu_instancing`,\n * will be removed from the {@link Document}.\n *\n * In applications that support `EXT_mesh_gpu_instancing`, removing the extension\n * is likely to substantially increase draw calls and reduce performance. Removing\n * the extension may be helpful for compatibility in applications without such support.\n *\n * Example:\n *\n * ```ts\n * import { uninstance } from '@gltf-transform/functions';\n *\n * document.getRoot().listNodes(); // → [ Node x 10 ]\n *\n * await document.transform(uninstance());\n *\n * document.getRoot().listNodes(); // → [ Node x 1000 ]\n * ```\n *\n * @category Transforms\n */\nexport function uninstance(_options: UninstanceOptions = UNINSTANCE_DEFAULTS): Transform {\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\n\t\tconst instanceAttributes = new Set<Accessor>();\n\n\t\tfor (const srcNode of document.getRoot().listNodes()) {\n\t\t\tconst batch = srcNode.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\t\t\tif (!batch) continue;\n\n\t\t\t// For each instance, attach a new Node under the source Node.\n\t\t\tfor (const instanceNode of createInstanceNodes(srcNode)) {\n\t\t\t\tsrcNode.addChild(instanceNode);\n\t\t\t}\n\n\t\t\tfor (const instanceAttribute of batch.listAttributes()) {\n\t\t\t\tinstanceAttributes.add(instanceAttribute);\n\t\t\t}\n\n\t\t\tsrcNode.setMesh(null);\n\t\t\tbatch.dispose();\n\t\t}\n\n\t\t// Clean up unused instance attributes.\n\t\tfor (const attribute of instanceAttributes) {\n\t\t\tif (attribute.listParents().every((parent) => parent === root)) {\n\t\t\t\tattribute.dispose();\n\t\t\t}\n\t\t}\n\n\t\t// Remove Extension from Document.\n\t\tdocument.createExtension(EXTMeshGPUInstancing).dispose();\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Given a {@link Node} with an {@link InstancedMesh} extension, returns a list\n * containing one Node per instance in the InstancedMesh. Each Node will have\n * the transform (translation/rotation/scale) of the corresponding instance,\n * and will be assigned to the same {@link Mesh}.\n *\n * May be used to unpack instancing previously applied with {@link instance}\n * and {@link EXTMeshGPUInstancing}. For a transform that applies this operation\n * to the entire {@link Document}, see {@link uninstance}.\n *\n * Example:\n * ```javascript\n * import { createInstanceNodes } from '@gltf-transform/functions';\n *\n * for (const instanceNode of createInstanceNodes(batchNode)) {\n *  batchNode.addChild(instanceNode);\n * }\n *\n * batchNode.setMesh(null).setExtension('EXTMeshGPUInstancing', null);\n * ```\n */\nexport function createInstanceNodes(batchNode: Node): Node[] {\n\tconst batch = batchNode.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\tif (!batch) return [];\n\n\tconst semantics = batch.listSemantics();\n\tif (semantics.length === 0) return [];\n\n\tconst document = Document.fromGraph(batchNode.getGraph())!;\n\tconst instanceCount = batch.listAttributes()[0].getCount();\n\tconst instanceCountDigits = String(instanceCount).length;\n\tconst mesh = batchNode.getMesh();\n\tconst batchName = batchNode.getName();\n\n\tconst instanceNodes = [];\n\n\t// For each instance construct a Node, assign attributes, and push to list.\n\tfor (let i = 0; i < instanceCount; i++) {\n\t\tconst instanceNode = document.createNode().setMesh(mesh);\n\n\t\t// MyNode_001, MyNode_002, ...\n\t\tif (batchName) {\n\t\t\tconst paddedIndex = String(i).padStart(instanceCountDigits, '0');\n\t\t\tinstanceNode.setName(`${batchName}_${paddedIndex}`);\n\t\t}\n\n\t\t// TRS attributes are applied to node transform; all other attributes are extras.\n\t\tfor (const semantic of semantics) {\n\t\t\tconst attribute = batch.getAttribute(semantic)!;\n\t\t\tswitch (semantic) {\n\t\t\t\tcase 'TRANSLATION':\n\t\t\t\t\tinstanceNode.setTranslation(attribute.getElement(i, [0, 0, 0]));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ROTATION':\n\t\t\t\t\tinstanceNode.setRotation(attribute.getElement(i, [0, 0, 0, 1]));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SCALE':\n\t\t\t\t\tinstanceNode.setScale(attribute.getElement(i, [1, 1, 1]));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t_setInstanceExtras(instanceNode, semantic, attribute, i);\n\t\t\t}\n\t\t}\n\n\t\tinstanceNodes.push(instanceNode);\n\t}\n\n\treturn instanceNodes;\n}\n\nfunction _setInstanceExtras(node: Node, semantic: string, attribute: Accessor, index: number): void {\n\tconst value = attribute.getType() === 'SCALAR' ? attribute.getScalar(index) : attribute.getElement(index, []);\n\tnode.setExtras({ ...node.getExtras(), [semantic]: value });\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRMaterialsUnlit } from '@gltf-transform/extensions';\n\n/**\n * @category Transforms\n */\nexport function unlit(): Transform {\n\treturn (doc: Document): void => {\n\t\tconst unlitExtension = doc.createExtension(KHRMaterialsUnlit) as KHRMaterialsUnlit;\n\t\tconst unlit = unlitExtension.createUnlit();\n\t\tdoc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tmaterial.setExtension('KHR_materials_unlit', unlit);\n\t\t\t});\n\t};\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'unpartition';\n\nexport interface UnpartitionOptions {}\nconst UNPARTITION_DEFAULTS: Required<UnpartitionOptions> = {};\n\n/**\n * Removes partitions from the binary payload of a glTF file, so that the asset\n * contains at most one (1) `.bin` {@link Buffer}. This process reverses the\n * changes from a {@link partition} transform.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n *\n * @category Transforms\n */\nexport function unpartition(_options: UnpartitionOptions = UNPARTITION_DEFAULTS): Transform {\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tconst buffer = document.getRoot().listBuffers()[0];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listAccessors()\n\t\t\t.forEach((a) => a.setBuffer(buffer));\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.forEach((b, index) => (index > 0 ? b.dispose() : null));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'vertexColorSpace';\n\n/** Options for the {@link vertexColorSpace} function. */\nexport interface ColorSpaceOptions {\n\t/** Input color space of vertex colors, to be converted to \"srgb-linear\". Required. */\n\tinputColorSpace: 'srgb' | 'srgb-linear';\n}\n\n/**\n * Vertex color color space correction. The glTF format requires vertex colors to be stored\n * in Linear Rec. 709 D65 color space, and this function provides a way to correct vertex\n * colors that are (incorrectly) stored in sRGB.\n *\n * Example:\n *\n * ```typescript\n * import { vertexColorSpace } from '@gltf-transform/functions';\n *\n * await document.transform(\n *   vertexColorSpace({ inputColorSpace: 'srgb' })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function vertexColorSpace(options: ColorSpaceOptions): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst inputColorSpace = (options.inputColorSpace || '').toLowerCase();\n\n\t\tif (inputColorSpace === 'srgb-linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (inputColorSpace !== 'srgb') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input color space \"${inputColorSpace}\" – should be \"srgb\" or ` +\n\t\t\t\t\t'\"srgb-linear\". Skipping conversion.',\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear(c: number): number {\n\t\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n"],"names":["POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Primitive","Mode","createTransform","name","fn","Object","defineProperty","value","isTransformPending","context","initial","pending","initialIndex","stack","lastIndexOf","pendingIndex","assignDefaults","defaults","options","result","_extends","key","undefined","rewriteTexture","source","target","srcImage","getImage","pixels","getPixels","getMimeType","i","shape","j","dstImage","savePixels","setImage","setMimeType","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","getCount","Error","SetMap","constructor","_map","Map","size","has","k","add","v","entry","get","Set","set","keys","formatBytes","bytes","decimals","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","_longFormatter","Intl","NumberFormat","maximumFractionDigits","formatLong","x","format","formatDelta","a","b","prefix","suffix","abs","formatDeltaOp","deepListAttributes","accessors","attribute","listAttributes","push","listTargets","Array","from","deepSwapAttribute","src","dst","swap","shallowEqualsArray","length","shallowCloneAccessor","document","accessor","createAccessor","getName","setArray","getArray","setType","getType","setBuffer","getBuffer","setNormalized","getNormalized","setSparse","getSparse","createIndices","count","maxIndex","array","createIndicesEmpty","Uint16Array","Uint32Array","isUsed","prop","listParents","some","parent","propertyType","PropertyType","ROOT","isEmptyObject","object","createPrimGroupKey","Document","fromGraph","getGraph","material","getMaterial","materialIndex","getRoot","listMaterials","indexOf","mode","BASIC_MODE_MAPPING","attributes","listSemantics","sort","map","semantic","elementSize","getElementSize","componentType","getComponentType","join","targets","fitWithin","limit","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","fitPowerOfTwo","method","isPowerOfTwo","nearestPowerOfTwo","ceilPowerOfTwo","floorPowerOfTwo","lo","hi","LN2","ceil","NAME","CENTER_DEFAULTS","pivot","center","_options","doc","logger","getLogger","root","isAnimated","listAnimations","listSkins","listScenes","forEach","scene","index","debug","bbox","getBounds","max","min","offset","offsetNode","createNode","setTranslation","listChildren","child","addChild","t","getTranslation","listNodeScenes","node","visited","getParentNode","filter","Scene","clearNodeParent","scenes","setMatrix","getWorldMatrix","removeChild","invert","multiply","create","glMatrix.ARRAY_TYPE","scale","mul","DEDUP_DEFAULTS","keepUniqueNames","propertyTypes","ACCESSOR","MESH","TEXTURE","MATERIAL","SKIN","dedup","includes","dedupAccessors","dedupImages","dedupMaterials","dedupMeshes","dedupSkins","indicesMap","attributeMap","inputMap","outputMap","meshes","listMeshes","mesh","listPrimitives","primitive","hashAccessor","animation","sampler","listSamplers","getInput","getOutput","group","hash","hashSet","detectDuplicates","duplicates","aData","BufferUtils","toView","equals","total","hashGroup","values","input","output","dispose","refs","listAccessors","numMeshes","uniqueMeshes","srcKeyItems","createPrimitiveKey","meshKey","targetMesh","textures","listTextures","bData","aSize","getSize","bSize","entries","property","Root","materials","modifierCache","skip","hasModifier","skins","listJoints","primKeyItems","cache","graph","visitedNodes","edgeQueue","listParentEdges","edge","pop","getAttributes","modifyChild","getChild","childEdge","listChildEdges","SRGB_PATTERN","getTextureColorSpace","texture","edges","isSRGB","isColor","test","listTextureInfo","results","textureEdge","getParent","TextureInfo","listTextureInfoByMaterial","traverse","textureInfoNames","Texture","ExtensionProperty","listTextureSlots","slots","EPS","PRUNE_DEFAULTS","NODE","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","keepLeaves","keepAttributes","keepIndices","keepSolidTextures","keepExtras","prune","counter","DisposeCounter","onDispose","event","addEventListener","nodeTreeShake","listNodes","treeShake","skin","camera","listCameras","indirectTreeShake","materialPrims","required","listRequiredSemantics","unused","listUnusedSemantics","pruneAttributes","prims","shiftTexCoords","pruneIndices","anim","channel","listChannels","getTargetNode","samplers","pruneSolidTextures","listBuffers","buffer","removeEventListener","empty","str","type","info","disposed","parents","p","AnimationChannel","needsExtras","getExtras","listEdges","e","ptype","SCENE","isEmpty","setAttribute","indicesArray","il","setIndices","startsWith","semantics","textureNames","replace","getTexCoord","match","isLit","Material","getExtension","isPoints","textureInfoList","texCoordSet","texCoordList","texCoordMap","texCoord","semanticMap","textureInfo","setTexCoord","updatePrim","srcSemantics","srcSemantic","uv","dstSemantic","_texture$getSize","factor","getTextureFactor","ColorUtils","convertSRGBToLinear","getURI","applyMaterialFactor","Promise","all","slot","setBaseColorFactor","getBaseColorFactor","setEmissiveFactor","mulVec3","slice","getEmissiveFactor","setRoughnessFactor","getRoughnessFactor","setMetallicFactor","getMetallicFactor","len","sub","warn","maybeGetPixels","Infinity","width","height","_unused","EMPTY_U32","VertexStream","u8","u32","byteStride","_initAttribute","Uint8Array","byteOffset","byteLength","getComponentSize","paddedByteStride","padNumber","murmurHash2","equal","h","m","r","imul","hashLookup","table","buckets","stream","hashmod","hashval","bucket","probe","item","VertexCountMethod","getSceneVertexCount","_getSubtreeVertexCount","getNodeVertexCount","instancedMeshes","nonInstancedMeshes","getMesh","batch","flatMap","positions","uniquePositions","uniquePrims","RENDER","RENDER_CACHED","_sum","getMeshVertexCount","UPLOAD_NAIVE","UPLOAD","DISTINCT","DISTINCT_POSITION","_assertNotImplemented","UNUSED","_sumUnused","_assertUnreachable","getPrimitiveVertexCount","attributeIndexMap","indicesSet","usedIndices","compactPrimitive","remap","dstVertexCount","createCompactPlan","srcIndices","srcIndicesArray","srcIndicesCount","dstIndices","dstIndicesCount","dstIndicesArray","srcAttributesPrev","srcAttribute","dstAttribute","compactAttribute","srcArray","dstArray","dstDone","srcIndex","dstIndex","srcVertexCount","fill","WELD_DEFAULTS","overwrite","cleanup","weld","weldPrimitive","transform","tableSize","writeMap","hashIndex","FLOAT","Accessor","ComponentType","transformPrimitive","matrix","applyMatrix","normal","applyNormalMatrix","tangent","applyTangentMatrix","determinant","reversePrimitiveWindingOrder","normalized","Float32Array","vector","createVec3","MathUtils","decodeNormalizedInt","transformMat4","normalMatrix","createMat3","fromMat4","transpose","transformMat3","normalizeVec3","v3","getScalar","c","setScalar","transformMesh","srcPrim","dstPrim","shallowClonePrimitive","removePrimitive","addPrimitive","parentMesh","isSharedPrimitive","Mesh","clone","isSharedTarget","removeTarget","addTarget","IDENTITY","clearNodeTransform","localMatrix","getMatrix","eq","multiplyMat4","convertPrimitiveToLines","dstGLPrimitiveCount","IndicesArray","ComponentTypeToTypedArray","srcMode","setMode","convertPrimitiveToTriangles","DEQUANTIZE_DEFAULTS","pattern","dequantize","dequantizePrimitive","createExtension","KHRMeshQuantization","dequantizeAttribute","dequantizeAttributeArray","TEXTURE_INFO","NO_TRANSFER_TYPES","cloneDocument","setLogger","resolve","createDefaultPropertyResolver","mergeDocuments","copy","sourceExtension","listExtensionsUsed","targetExtension","isRequired","setRequired","_copyToDocument","listNonRootProperties","moveToDocument","sourceProperties","targetProperties","copyToDocument","sourcePropertyDependencies","listPropertyDependencies","propertyMap","sourceProp","targetProp","PropertyClass","queue","next","DRACO_DEFAULTS","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","draco","KHRDracoMeshCompression","setEncoderOptions","EncoderMethod","EDGEBREAKER","SEQUENTIAL","quantizationBits","POSITION","NORMAL","COLOR","TEX_COORD","GENERIC","FLATTEN_DEFAULTS","flatten","joints","joint","animated","getTargetPath","hasJointParent","hasAnimatedParent","_getBounds","inspect","animations","sceneBounds","rootName","bboxMin","toPrecision","bboxMax","renderVertexCount","uploadVertexCount","uploadNaiveVertexCount","properties","instances","glPrimitives","meshIndices","meshAccessors","attr","accessorToTypeLabel","targ","modes","MeshPrimitiveModeLabels","meshPrimitives","vertices","extensions","listExtensions","ref","alphaMode","getAlphaMode","doubleSided","getDoubleSided","resolution","ImageUtils","compression","container","readKTX","dfd","dataFormatDescriptor","colorModel","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","uri","mimeType","gpuSize","getVRAMByteLength","minTime","maxTime","getMin","getMax","keyframes","channels","duration","round","NumericTypeLabels","Int32Array","Int16Array","Int8Array","Number","base","INSTANCE_DEFAULTS","instance","batchExtension","EXTMeshGPUInstancing","numBatches","numInstances","meshInstances","modifiedNodes","nodes","getSkin","hasVolume","hasScale","createBatch","batchTranslation","batchRotation","batchScale","batchNode","setMesh","setExtension","needsTranslation","needsRotation","needsScale","s","setElement","getWorldTranslation","getWorldRotation","getWorldScale","pruneUnusedNodes","listProperties","unusedNodes","getCamera","nodeParent","createInstancedMesh","JOIN_PRIMITIVE_DEFAULTS","skipValidation","joinPrimitives","templatePrim","primRemaps","primVertexCounts","primIndex","createPrimitive","setMaterial","tplAttribute","AttributeArray","tplIndices","dstIndicesOffset","remapIndices","remapAttribute","done","dstOffset","srcCount","_matrix","JOIN_DEFAULTS","keepMeshes","keepNamed","_joinLevel","groups","children","nodeIndex","dequantizeTransformableAttributes","isNamed","primMeshes","primNodes","dstNode","dstMesh","joinGroups","srcNodes","isSharedMesh","dstMatrix","primNode","primMesh","_deepClonePrimitive","listTextureChannels","mask","getTextureChannelMask","TextureChannel","R","G","B","A","AlphaMode","OPAQUE","REORDER_DEFAULTS","reorder","encoder","ready","plan","createLayoutPlan","indicesToAttributes","unique","reorderMesh","indicesToMode","indicesToPrimitives","attributesToPrimitives","sortPrimitiveWeights","isFinite","vertexCount","setCount","srcWeights","dstWeights","srcJoints","dstJoints","getVertexArray","setVertexArray","weights","normalizePrimitiveWeights","isNormalizeSafe","templateAttribute","templateArray","normalizedComponentType","delta","EPSILON","weightsSum","sum","floatValue","encodeNormalizedInt","sign","vertexIndex","el","getElement","normList","typeList","SIGNED_INT","TRANSLATION","ROTATION","SCALE","WEIGHTS","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizeWeight","normalizeWeights","quantize","patternTargets","nodeTransform","getNodeTransform","expandBounds","getPositionQuantizationVolume","transformMeshParents","transformMeshMaterials","renderCount","uploadCount","quantizePrimitive","needsExtension","isQuantizedPrimitive","isTarget","PrimitiveTarget","bits","ctor","getQuantizationSettings","fromTransform","fromScaling","quantizeAttribute","volume","transformMatrix","Node","animChannels","isParentNode","setSkin","transformSkin","transformBatch","targetNode","setTargetNode","nodeMatrix","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","_batch$getAttribute","_batch$getAttribute2","_batch$getAttribute3","instanceTranslation","instanceRotation","instanceScale","tpl","T_IDENTITY","R_IDENTITY","S_IDENTITY","makeArray","instanceMatrix","compose","decompose","getThicknessFactor","setThicknessFactor","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","range","di","clamp","getMinNormalized","getMaxNormalized","relativePositions","flatBounds","relMin","relMax","isQuantizedAttribute","componentSize","UNSIGNED_BYTE","UNSIGNED_SHORT","tmpMin","tmpMax","bboxes","fromRotationTranslationScale","elementCount","initialElement","MESHOPT_DEFAULTS","level","meshopt","EXTMeshoptCompression","QUANTIZE","FILTER","METALROUGH_DEFAULTS","metalRough","extensionsUsed","ext","extensionName","iorExtension","KHRMaterialsIOR","specExtension","KHRMaterialsSpecular","specGlossExtension","KHRMaterialsPBRSpecularGlossiness","inputTextures","specGloss","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","getDiffuseFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","tex","UNWELD_DEFAULTS","unweld","unweldPrimitive","unweldAttribute","TypedArray","NORMALS_DEFAULTS","normals","modified","faceNormal","computeNormal","n","normalize","PALETTE_DEFAULTS","blockSize","palette","materialKeys","materialKeyMap","materialProps","baseColor","emissive","metallicRoughness","encodeRGBA","encodeFloat","metallic","keyCount","w","padWidth","paletteTexturePixels","skipProps","props","baseColorTexture","emissiveTexture","metallicRoughnessTexture","setURI","ndarray","visitedKeys","materialIndices","paletteMaterials","nextIndex","convertLinearToSRGB","writeBlock","image","nextPaletteMaterialIndex","srcMaterial","blockIndex","baseUV","padUV","dstMaterial","toString","padStart","setName","setMinFilter","MinFilter","NEAREST","setMagFilter","MagFilter","setEmissiveTexture","getEmissiveTextureInfo","hex","PARTITION_DEFAULTS","partition","partitionMeshes","partitionAnimations","existingURIs","meshIndex","isArray","createBuffer","createBufferURI","primTarget","animIndex","SANITIZE_BASENAME_RE","basename","existing","EMPTY_ARRAY","RESAMPLE_DEFAULTS","resample","resampleDebug","tolerance","accessorsVisited","srcAccessorCount","samplerTargetPaths","getSampler","samplerInterpolation","getInterpolation","tmpTimes","toFloat32Array","tmpValues","dstCount","srcTimes","srcValues","dstTimes","fromFloat32Array","dstValues","setInput","setOutput","used","dstAccessorCount","SEQUENCE_DEFAULTS","fps","sequence","sequenceNodes","createAnimation","animBuffer","inputArray","outputArray","Type","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","SIMPLIFY_DEFAULTS","ratio","error","lockBorder","simplify","simplifier","numUnsupported","simplifyPrimitive","simplifyPoints","_simplifyPoints","srcIndexCount","positionArray","targetCount","flags","color","colorArray","colorStride","useExperimentalFeatures","compactMesh","SPARSE_DEFAULTS","sparse","modifiedCount","nonZeroCount","TEXTURE_COMPRESS_SUPPORTED_FORMATS","SUPPORTED_MIME_TYPES","TextureResizeFilter","TEXTURE_COMPRESS_DEFAULTS","resizeFilter","LANCZOS3","formats","quality","effort","lossless","nearLossless","limitInputPixels","textureCompress","targetFormat","patternRe","formatsRe","slotsRe","textureIndex","textureLabel","srcFormat","getFormat","dstFormat","srcByteLength","compressTexture","dstByteLength","flag","webpExtension","EXTTextureWebP","avifExtension","EXTTextureAVIF","srcURI","srcMimeType","dstMimeType","_encodeWithSharp","_encodeWithNdarrayPixels","resize","srcExtension","FileUtils","extension","mimeTypeToExtension","dstExtension","dstURI","RegExp","_srcMimeType","encoderOptions","getFormatFromMimeType","toFormat","srcSize","dstSize","fit","kernel","toBuffer","srcPixels","dstPixels","lanczos3","lanczos2","split","srcMax","dstMax","TANGENTS_DEFAULTS","tangents","generateTangents","attributeIDs","tangentCache","meshName","filterPrimitive","texcoordSemantic","getNormalTexcoord","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangentBuffer","tangentArray","normalTextureInfo","getNormalTextureInfo","UNINSTANCE_DEFAULTS","uninstance","instanceAttributes","srcNode","instanceNode","createInstanceNodes","instanceAttribute","every","instanceCount","instanceCountDigits","String","batchName","instanceNodes","paddedIndex","setRotation","setScale","_setInstanceExtras","setExtras","unlit","unlitExtension","KHRMaterialsUnlit","createUnlit","UNPARTITION_DEFAULTS","unpartition","vertexColorSpace","inputColorSpace","toLowerCase","converted","sRGBToLinear","updatePrimitive"],"mappings":"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AChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAA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AM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC;AACA,EAAE,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC/E,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACpC,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB;AACA,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,E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"}