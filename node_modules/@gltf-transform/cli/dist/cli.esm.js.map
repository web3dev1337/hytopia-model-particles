{"version":3,"file":"cli.esm.js","sources":["../src/util.ts","../src/inspect.ts","../src/transforms/ktxfix.ts","../src/transforms/merge.ts","../src/transforms/toktx.ts","../src/transforms/xmp.ts","../src/session.ts","../src/validate.ts","../src/config.ts","../src/program.ts","../src/cli.ts"],"sourcesContent":["import { spawn as _spawn } from 'child_process';\nimport type { ChildProcess } from 'child_process';\nimport _commandExists from 'command-exists';\nimport CLITable from 'cli-table3';\nimport { stringify } from 'csv-stringify';\nimport stripAnsi from 'strip-ansi';\nimport micromatch from 'micromatch';\n\n// Constants.\n\nexport const XMPContext: Record<string, string> = {\n\tdc: 'http://purl.org/dc/elements/1.1/',\n\tmodel3d: 'https://schema.khronos.org/model3d/xsd/1.0/',\n\trdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n\txmp: 'http://ns.adobe.com/xap/1.0/',\n\txmpRights: 'http://ns.adobe.com/xap/1.0/rights/',\n};\n\n// Using 'micromatch' because 'contains: true' did not work as expected with\n// minimatch. Need to ensure that '*' matches patterns like 'image/png'.\nexport const MICROMATCH_OPTIONS = { nocase: true, contains: true };\n\n// See: https://github.com/micromatch/micromatch/issues/224\nexport function regexFromArray(values: string[]): RegExp {\n\tconst pattern = values.map((s) => `(${s})`).join('|');\n\treturn micromatch.makeRe(pattern, MICROMATCH_OPTIONS);\n}\n\n// Mocks for tests.\n\nexport let spawn = _spawn;\n// See https://github.com/mathisonian/command-exists/issues/22\nexport let commandExists = (cmd: string) => _commandExists(cmd).catch(() => false);\nexport let waitExit = _waitExit;\n\nexport function mockSpawn(_spawn: unknown): void {\n\tspawn = _spawn as typeof spawn;\n}\n\nexport function mockCommandExists(_commandExists: (n: string) => Promise<boolean>): void {\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tcommandExists = _commandExists as any;\n}\n\nexport function mockWaitExit(_waitExit: (process: ChildProcess) => Promise<[unknown, string, string]>): void {\n\twaitExit = _waitExit;\n}\n\nexport async function _waitExit(process: ChildProcess): Promise<[unknown, string, string]> {\n\tlet stdout = '';\n\tif (process.stdout) {\n\t\tfor await (const chunk of process.stdout) {\n\t\t\tstdout += chunk;\n\t\t}\n\t}\n\tlet stderr = '';\n\tif (process.stderr) {\n\t\tfor await (const chunk of process.stderr) {\n\t\t\tstderr += chunk;\n\t\t}\n\t}\n\tconst status = await new Promise((resolve, _) => {\n\t\tprocess.on('close', resolve);\n\t});\n\treturn [status, stdout, stderr];\n}\n\n// Formatting.\n\nconst _longFormatter = new Intl.NumberFormat(undefined, { maximumFractionDigits: 0 });\nexport function formatLong(x: number): string {\n\treturn _longFormatter.format(x);\n}\n\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function formatParagraph(str: string): string {\n\treturn str\n\t\t.match(/.{1,80}(\\s|$)/g)!\n\t\t.map((line) => line.trim())\n\t\t.join('\\n');\n}\n\nexport function formatHeader(title: string): string {\n\treturn '' + '\\n ' + title.toUpperCase() + '\\n ────────────────────────────────────────────';\n}\n\nexport enum TableFormat {\n\tPRETTY = 'pretty',\n\tCSV = 'csv',\n\tMD = 'md',\n}\n\nconst CLI_TABLE_MARKDOWN_CHARS = {\n\ttop: '',\n\t'top-mid': '',\n\t'top-left': '',\n\t'top-right': '',\n\tbottom: '',\n\t'bottom-mid': '',\n\t'bottom-left': '',\n\t'bottom-right': '',\n\tleft: '|',\n\t'left-mid': '',\n\tmid: '',\n\t'mid-mid': '',\n\tright: '|',\n\t'right-mid': '',\n\tmiddle: '|',\n};\n\nexport async function formatTable(format: TableFormat, head: string[], rows: string[][]): Promise<string> {\n\tswitch (format) {\n\t\tcase TableFormat.PRETTY: {\n\t\t\tconst table = new CLITable({ head });\n\t\t\ttable.push(...rows);\n\t\t\treturn table.toString();\n\t\t}\n\t\tcase TableFormat.CSV:\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tstringify([head, ...rows], (err, output) => {\n\t\t\t\t\terr ? reject(err) : resolve(output);\n\t\t\t\t});\n\t\t\t});\n\t\tcase TableFormat.MD: {\n\t\t\tconst table = new CLITable({ head, chars: CLI_TABLE_MARKDOWN_CHARS });\n\t\t\ttable.push(new Array(rows[0].length).fill('---'));\n\t\t\ttable.push(...rows);\n\t\t\treturn stripAnsi(table.toString());\n\t\t}\n\t}\n}\n\nexport function formatXMP(value: string | number | boolean | Record<string, unknown> | null): string {\n\tif (!value) {\n\t\treturn '';\n\t}\n\n\tif (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n\t\treturn value.toString();\n\t}\n\n\tif (value['@list']) {\n\t\tconst list = value['@list'] as string[];\n\t\tconst hasCommas = list.some((value) => value.indexOf(',') > 0);\n\t\treturn list.join(hasCommas ? '; ' : ', ');\n\t}\n\n\tif (value['@type'] === 'rdf:Alt') {\n\t\treturn (value['rdf:_1'] as Record<string, string>)['@value'];\n\t}\n\n\treturn JSON.stringify(value);\n}\n\nexport function underline(str: string): string {\n\treturn `\\x1b[4m${str}\\x1b[0m`;\n}\n\nexport function dim(str: string): string {\n\treturn `\\x1b[2m${str}\\x1b[0m`;\n}\n","import type { JSONDocument, ILogger, NodeIO, WebIO } from '@gltf-transform/core';\nimport {\n\tInspectAnimationReport,\n\tInspectMaterialReport,\n\tInspectMeshReport,\n\tInspectPropertyReport,\n\tInspectSceneReport,\n\tInspectTextureReport,\n\tinspect as inspectDoc,\n} from '@gltf-transform/functions';\nimport { formatBytes, formatHeader, formatLong, formatParagraph, formatTable, formatXMP, TableFormat } from './util.js';\nimport type { Packet } from '@gltf-transform/extensions';\n\ntype AnyPropertyReport =\n\t| InspectSceneReport\n\t| InspectMeshReport\n\t| InspectMaterialReport\n\t| InspectTextureReport\n\t| InspectAnimationReport;\n\nexport async function inspect(\n\tjsonDoc: JSONDocument,\n\tio: NodeIO | WebIO,\n\tlogger: ILogger,\n\tformat: TableFormat,\n): Promise<void> {\n\t// Summary (does not require parsing).\n\tconst extensionsUsed = jsonDoc.json.extensionsUsed || [];\n\tconst extensionsRequired = jsonDoc.json.extensionsRequired || [];\n\tconsole.log(formatHeader('overview'));\n\tconsole.log(\n\t\t(await formatTable(\n\t\t\tformat,\n\t\t\t['key', 'value'],\n\t\t\t[\n\t\t\t\t['version', jsonDoc.json.asset.version],\n\t\t\t\t['generator', jsonDoc.json.asset.generator || ''],\n\t\t\t\t['extensionsUsed', extensionsUsed.join(', ') || 'none'],\n\t\t\t\t['extensionsRequired', extensionsRequired.join(', ') || 'none'],\n\t\t\t],\n\t\t)) + '\\n\\n',\n\t);\n\n\t// Parse.\n\tlet document;\n\ttry {\n\t\tdocument = await io.readJSON(jsonDoc);\n\t} catch (e) {\n\t\tlogger.warn('Unable to parse document.');\n\t\tthrow e;\n\t}\n\n\t// XMP report.\n\tconst rootPacket = document.getRoot().getExtension('KHR_xmp_json_ld') as Packet | null;\n\tif (rootPacket && rootPacket.listProperties().length > 0) {\n\t\tconsole.log(formatHeader('metadata'));\n\t\tconsole.log(\n\t\t\t(await formatTable(\n\t\t\t\tformat,\n\t\t\t\t['key', 'value'],\n\t\t\t\trootPacket.listProperties().map((name) => [name, formatXMP(rootPacket.getProperty(name)) as string]),\n\t\t\t)) + '\\n\\n',\n\t\t);\n\t}\n\n\t// Detailed report.\n\tconst report = inspectDoc(document);\n\tawait reportSection('scenes', format, logger, report.scenes);\n\tawait reportSection('meshes', format, logger, report.meshes);\n\tawait reportSection('materials', format, logger, report.materials);\n\tawait reportSection('textures', format, logger, report.textures);\n\tawait reportSection('animations', format, logger, report.animations);\n}\n\nasync function reportSection(\n\ttype: string,\n\tformat: TableFormat,\n\tlogger: ILogger,\n\tsection: InspectPropertyReport<AnyPropertyReport>,\n) {\n\tconst properties = section.properties;\n\n\tconsole.log(formatHeader(type));\n\tif (!properties.length) {\n\t\tconsole.log(`No ${type} found.\\n`);\n\t\treturn;\n\t}\n\n\tconst formattedRecords = properties.map((property: AnyPropertyReport, index: number) => {\n\t\treturn formatPropertyReport(property, index, format);\n\t});\n\tconst header = Object.keys(formattedRecords[0]);\n\tconst rows = formattedRecords.map((p: Record<string, string>) => Object.values(p));\n\tconst footnotes = format !== TableFormat.CSV ? getFootnotes(type, rows, header) : [];\n\tconsole.log(await formatTable(format, header, rows));\n\tif (footnotes.length) console.log('\\n' + footnotes.join('\\n'));\n\tif (section.warnings) {\n\t\tsection.warnings.forEach((warning) => logger.warn(formatParagraph(warning)));\n\t}\n\tconsole.log('\\n');\n}\n\nfunction formatPropertyReport(property: AnyPropertyReport, index: number, format: TableFormat): Record<string, string> {\n\tconst row: Record<string, string | number> = { '#': index };\n\tfor (const key in property) {\n\t\tconst value = (property as unknown as Record<string, string | number>)[key];\n\t\tif (Array.isArray(value)) {\n\t\t\trow[key] = value.join(', ');\n\t\t} else if (key.match(/size/i) && format !== TableFormat.CSV) {\n\t\t\trow[key] = (value as number) > 0 ? formatBytes(value as number) : '';\n\t\t} else if (typeof value === 'number') {\n\t\t\trow[key] = format !== TableFormat.CSV ? formatLong(value) : value;\n\t\t} else if (typeof value === 'boolean') {\n\t\t\trow[key] = value ? '✓' : '';\n\t\t} else {\n\t\t\trow[key] = value;\n\t\t}\n\t}\n\treturn row as Record<string, string>;\n}\n\nfunction getFootnotes(type: string, rows: string[][], header: string[]): string[] {\n\tconst footnotes = [];\n\tif (type === 'scenes') {\n\t\tfor (let i = 0; i < header.length; i++) {\n\t\t\tif (header[i] === 'renderVertexCount') header[i] += '¹';\n\t\t\tif (header[i] === 'gpuVertexCount') header[i] += '²';\n\t\t\tif (header[i] === 'gpuNaiveVertexCount') header[i] += '³';\n\t\t}\n\t\tfootnotes.push(\n\t\t\t'¹ Expected number of vertices processed by the vertex shader for one render\\n' +\n\t\t\t\t'  pass, without considering the vertex cache.\\n',\n\t\t);\n\t\tfootnotes.push(\n\t\t\t'² Expected number of vertices uploaded to GPU, assuming each Accessor\\n' +\n\t\t\t\t'  is uploaded only once. Actual number uploaded may be higher, \\n' +\n\t\t\t\t'  dependent on the implementation and vertex buffer layout.\\n',\n\t\t);\n\t\tfootnotes.push(\n\t\t\t'³ Expected number of vertices uploaded to GPU, assuming each Primitive\\n' +\n\t\t\t\t'  is uploaded once, duplicating vertex attributes shared among Primitives.',\n\t\t);\n\t}\n\tif (type === 'meshes') {\n\t\tfor (let i = 0; i < header.length; i++) {\n\t\t\tif (header[i] === 'size') header[i] += '¹';\n\t\t}\n\t\tfootnotes.push(\n\t\t\t'⁴ size estimates GPU memory required by a mesh, in isolation. If accessors are\\n' +\n\t\t\t\t'  shared by other mesh primitives, but the meshes themselves are not reused, then\\n' +\n\t\t\t\t'  the sum of all mesh sizes will overestimate the asset\\'s total size. See \"dedup\".',\n\t\t);\n\t}\n\tif (type === 'textures') {\n\t\tfor (let i = 0; i < header.length; i++) {\n\t\t\tif (header[i] === 'gpuSize') header[i] += '⁵';\n\t\t}\n\t\tfootnotes.push(\n\t\t\t'⁵ gpuSize estimates minimum VRAM memory allocation. Older devices may require\\n' +\n\t\t\t\t'  additional memory for GPU compression formats.',\n\t\t);\n\t}\n\treturn footnotes;\n}\n","import { KHR_DF_PRIMARIES_BT709, KHR_DF_PRIMARIES_UNSPECIFIED, read, write } from 'ktx-parse';\nimport type { Document, Transform } from '@gltf-transform/core';\nimport { getTextureColorSpace, listTextureSlots } from '@gltf-transform/functions';\n\nconst NAME = 'ktxfix';\n\nexport function ktxfix(): Transform {\n\treturn async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tlet numChanged = 0;\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tif (texture.getMimeType() !== 'image/ktx2') continue;\n\n\t\t\tconst image = texture.getImage();\n\t\t\tif (!image) continue;\n\n\t\t\tconst ktx = read(image);\n\t\t\tconst dfd = ktx.dataFormatDescriptor[0];\n\t\t\tconst slots = listTextureSlots(texture);\n\n\t\t\t// Don't make changes if we have no information.\n\t\t\tif (slots.length === 0) continue;\n\n\t\t\tconst colorSpace = getTextureColorSpace(texture);\n\t\t\tconst colorPrimaries = colorSpace === 'srgb' ? KHR_DF_PRIMARIES_BT709 : KHR_DF_PRIMARIES_UNSPECIFIED;\n\t\t\tconst name = texture.getURI() || texture.getName();\n\n\t\t\tlet changed = false;\n\n\t\t\t// See: https://github.com/donmccurdy/glTF-Transform/issues/218\n\t\t\tif (dfd.colorPrimaries !== colorPrimaries) {\n\t\t\t\tdfd.colorPrimaries = colorPrimaries;\n\t\t\t\tlogger.info(`${NAME}: Set colorPrimaries=${colorPrimaries} for texture \"${name}\"`);\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tif (changed) {\n\t\t\t\ttexture.setImage(write(ktx));\n\t\t\t\tnumChanged++;\n\t\t\t}\n\t\t}\n\n\t\tlogger.info(`${NAME}: Found and repaired issues in ${numChanged} textures`);\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n}\n","import fs from 'fs';\nimport {\n\tDocument,\n\tFileUtils,\n\tImageUtils,\n\tNodeIO,\n\tTransform,\n\tTexture,\n\tBuffer,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { dedup, mergeDocuments, unpartition } from '@gltf-transform/functions';\n\nconst NAME = 'merge';\n\nexport interface MergeOptions {\n\tio: NodeIO;\n\tpaths: string[];\n\tpartition?: boolean;\n\tmergeScenes?: boolean;\n}\n\nconst merge = (options: MergeOptions): Transform => {\n\tconst { paths, io } = options;\n\n\treturn async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst path = paths[i];\n\n\t\t\tlogger.debug(`Merging ${i + 1} / ${paths.length}, ${path}`);\n\n\t\t\tconst basename = FileUtils.basename(path);\n\t\t\tconst extension = FileUtils.extension(path).toLowerCase();\n\t\t\tif (['png', 'jpg', 'jpeg', 'webp', 'ktx2'].includes(extension)) {\n\t\t\t\tdocument\n\t\t\t\t\t.createTexture(basename)\n\t\t\t\t\t.setImage(fs.readFileSync(path))\n\t\t\t\t\t.setMimeType(ImageUtils.extensionToMimeType(extension))\n\t\t\t\t\t.setURI(basename + '.' + extension);\n\t\t\t} else if (['gltf', 'glb'].includes(extension)) {\n\t\t\t\tmergeDocuments(document, renameScenes(basename, await io.read(path)));\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unknown file extension: \"${extension}\".`);\n\t\t\t}\n\t\t}\n\n\t\tconst rootScene = root.listScenes()[0];\n\n\t\tfor (const scene of document.getRoot().listScenes()) {\n\t\t\tif (scene === rootScene) {\n\t\t\t\troot.setDefaultScene(rootScene);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!options.mergeScenes) continue;\n\n\t\t\tfor (const child of scene.listChildren()) {\n\t\t\t\tscene.removeChild(child);\n\t\t\t\trootScene.addChild(child);\n\t\t\t}\n\n\t\t\tscene.dispose();\n\t\t}\n\n\t\t// De-duplicate textures, then ensure that all remaining textures and buffers\n\t\t// have unique URIs. See https://github.com/donmccurdy/glTF-Transform/issues/586.\n\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.TEXTURE] }));\n\t\tcreateUniqueURIs(document.getRoot().listBuffers());\n\t\tcreateUniqueURIs(document.getRoot().listTextures());\n\n\t\tif (!options.partition) {\n\t\t\tawait document.transform(unpartition());\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n};\n\nfunction renameScenes(name: string, document: Document): Document {\n\tconst scenes = document.getRoot().listScenes();\n\n\tfor (let i = 0; i < scenes.length; i++) {\n\t\tif (!scenes[i].getName()) {\n\t\t\tscenes[i].setName(name + (scenes.length > 1 ? ` (${i + 1}/${scenes.length})` : ''));\n\t\t}\n\t}\n\n\treturn document;\n}\n\n/** Replaces conflicting URIs to ensure all URIs are unique. */\nfunction createUniqueURIs(resources: Buffer[] | Texture[]): void {\n\tconst total = {} as Record<string, number>;\n\tconst used = {} as Record<string, boolean>;\n\n\tfor (const resource of resources) {\n\t\tconst uri = resource.getURI();\n\t\tif (!uri) continue;\n\t\tif (!total[uri]) total[uri] = 0;\n\t\ttotal[uri]++;\n\t\tused[uri] = false;\n\t}\n\n\tfor (const resource of resources) {\n\t\tlet uri = resource.getURI();\n\t\tif (!uri || total[uri] === 1) continue;\n\n\t\tconst extension = FileUtils.extension(uri);\n\t\tconst prefix = uri.replace(new RegExp(`\\\\.${extension}`), '');\n\t\tfor (let i = 2; used[uri]; i++) {\n\t\t\turi = `${prefix}_${i++}.${extension}`;\n\t\t}\n\t\tresource.setURI(uri);\n\t\tused[uri] = true;\n\t}\n}\n\nexport { merge };\n","import fs, { rm } from 'fs/promises';\nimport { join } from 'path';\nimport micromatch from 'micromatch';\nimport os from 'os';\nimport tmp from 'tmp';\nimport pLimit from 'p-limit';\nimport type sharp from 'sharp';\n\nimport {\n\tDocument,\n\tFileUtils,\n\tILogger,\n\tImageUtils,\n\tTextureChannel,\n\tTransform,\n\tvec2,\n\tuuid,\n\tTexture,\n\tBufferUtils,\n} from '@gltf-transform/core';\nimport { KHRTextureBasisu } from '@gltf-transform/extensions';\nimport {\n\tTextureResizeFilter,\n\tcreateTransform,\n\tfitPowerOfTwo,\n\tfitWithin,\n\tgetTextureChannelMask,\n\tgetTextureColorSpace,\n\tlistTextureSlots,\n} from '@gltf-transform/functions';\nimport { spawn, commandExists, formatBytes, waitExit, MICROMATCH_OPTIONS } from '../util.js';\n\nconst NUM_CPUS = os.cpus().length || 1; // microsoft/vscode#112122\nconst KTX_SOFTWARE_VERSION_MIN = '4.3.0';\n\nconst { R, G, A } = TextureChannel;\n\n/**********************************************************************************************\n * Interfaces.\n */\n\nexport const Mode = {\n\tETC1S: 'etc1s',\n\tUASTC: 'uastc',\n};\n\nexport const Filter = {\n\tBOX: 'box',\n\tTENT: 'tent',\n\tBELL: 'bell',\n\tBSPLINE: 'b-spline',\n\tMITCHELL: 'mitchell',\n\tLANCZOS3: 'lanczos3',\n\tLANCZOS4: 'lanczos4',\n\tLANCZOS6: 'lanczos6',\n\tLANCZOS12: 'lanczos12',\n\tBLACKMAN: 'blackman',\n\tKAISER: 'kaiser',\n\tGAUSSIAN: 'gaussian',\n\tCATMULLROM: 'catmullrom',\n\tQUADRATIC_INTERP: 'quadratic_interp',\n\tQUADRATIC_APPROX: 'quadratic_approx',\n\tQUADRATIC_MIX: 'quadratic_mix',\n};\n\ninterface GlobalOptions {\n\t/** Instance of the Sharp encoder, required if resizing textures. */\n\tencoder: unknown;\n\tmode: string;\n\t/** Pattern identifying textures to compress, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/**\n\t * Pattern matching the material texture slot(s) to be compressed or converted.\n\t * Passing a string (glob) is deprecated; use a RegExp instead.\n\t */\n\tslots?: RegExp | null;\n\t/** Interpolation used for generating mipmaps. Default: 'lanczos4'. */\n\tfilter?: string;\n\tfilterScale?: number;\n\tresize?: vec2 | 'nearest-pot' | 'ceil-pot' | 'floor-pot';\n\t/** Interpolation used if resizing. Default: TextureResizeFilter.LANCZOS3. */\n\tresizeFilter?: TextureResizeFilter;\n\tjobs?: number;\n\t/**\n\t * Whether to clean up temporary files created during texture compression. See\n\t * verbose log output for temporary file paths. Default: true.\n\t */\n\tcleanup?: boolean;\n\t/**\n\t * Attempts to avoid processing images that could exceed memory or other other\n\t * limits, throwing an error instead. Default: true.\n\t * @experimental\n\t */\n\tlimitInputPixels?: boolean;\n}\n\nexport interface ETC1SOptions extends GlobalOptions {\n\tquality?: number;\n\tcompression?: number;\n\tmaxEndpoints?: number;\n\tmaxSelectors?: number;\n\trdo?: boolean;\n\trdoThreshold?: number;\n}\n\nexport interface UASTCOptions extends GlobalOptions {\n\tlevel?: number;\n\trdo?: boolean;\n\trdoLambda?: number;\n\trdoDictionarySize?: number;\n\trdoBlockScale?: number;\n\trdoStdDev?: number;\n\trdoMultithreading?: boolean;\n\tzstd?: number;\n}\n\nconst GLOBAL_DEFAULTS: Omit<GlobalOptions, 'encoder' | 'mode'> = {\n\tresizeFilter: TextureResizeFilter.LANCZOS3,\n\tfilter: Filter.LANCZOS4,\n\tfilterScale: 1,\n\tpattern: null,\n\tslots: null,\n\t// See: https://github.com/donmccurdy/glTF-Transform/pull/389#issuecomment-1089842185\n\tjobs: 2 * NUM_CPUS,\n\tcleanup: true,\n\tlimitInputPixels: true,\n};\n\nexport const ETC1S_DEFAULTS: Omit<ETC1SOptions, 'encoder' | 'mode'> = {\n\tquality: 128,\n\tcompression: 1,\n\trdo: true,\n\trdoThreshold: 1.25,\n\tmaxSelectors: 0,\n\tmaxEndpoints: 0,\n\t...GLOBAL_DEFAULTS,\n};\n\nexport const UASTC_DEFAULTS: Omit<UASTCOptions, 'encoder' | 'mode'> = {\n\tlevel: 2,\n\trdo: false,\n\trdoLambda: 1.0,\n\trdoDictionarySize: 32768,\n\trdoBlockScale: 10.0,\n\trdoStdDev: 18.0,\n\trdoMultithreading: true,\n\tzstd: 18,\n\t...GLOBAL_DEFAULTS,\n};\n\n/**********************************************************************************************\n * Implementation.\n */\n\nexport const toktx = function (options: ETC1SOptions | UASTCOptions): Transform {\n\toptions = {\n\t\t...(options.mode === Mode.ETC1S ? ETC1S_DEFAULTS : UASTC_DEFAULTS),\n\t\t...options,\n\t};\n\n\treturn createTransform(options.mode, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\t// Confirm recent version of KTX-Software is installed.\n\t\tawait checkKTXSoftware(logger);\n\n\t\t// Create workspace. Avoid 'unsafeCleanup' and 'setGracefulCleanup', which\n\t\t// are not working as expected and are slated for removal:\n\t\t// https://github.com/raszi/node-tmp/pull/281\n\t\tconst batchPrefix = uuid();\n\t\tconst batchDir = tmp.dirSync({ prefix: 'gltf-transform-' });\n\n\t\tconst basisuExtension = doc.createExtension(KHRTextureBasisu).setRequired(true);\n\n\t\tconst limit = pLimit(options.jobs!);\n\t\tconst textures = doc.getRoot().listTextures();\n\t\tconst numTextures = textures.length;\n\t\tconst promises = textures.map((texture, textureIndex) =>\n\t\t\tlimit(async () => {\n\t\t\t\tconst slots = listTextureSlots(texture);\n\t\t\t\tconst channels = getTextureChannelMask(texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${doc.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `ktx:texture(${textureLabel})`;\n\t\t\t\tlogger.debug(`${prefix}: Slots → [${slots.join(', ')}]`);\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (typeof options.slots === 'string') {\n\t\t\t\t\toptions.slots = micromatch.makeRe(options.slots, MICROMATCH_OPTIONS);\n\t\t\t\t\tlogger.warn('ktx: Argument \"slots\" should be of type `RegExp | null`.');\n\t\t\t\t}\n\n\t\t\t\tconst patternRe = options.pattern as RegExp | null;\n\t\t\t\tconst slotsRe = options.slots as RegExp | null;\n\n\t\t\t\tlet srcMimeType = texture.getMimeType();\n\n\t\t\t\tif (srcMimeType === 'image/ktx2') {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, already KTX.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (srcMimeType !== 'image/png' && srcMimeType !== 'image/jpeg') {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slotsRe && !slots.find((slot) => slot.match(slotsRe))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (patternRe && !(texture.getURI().match(patternRe) || texture.getName().match(patternRe))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet srcImage = texture.getImage()!;\n\t\t\t\tlet srcExtension = texture.getURI()\n\t\t\t\t\t? FileUtils.extension(texture.getURI())\n\t\t\t\t\t: ImageUtils.mimeTypeToExtension(texture.getMimeType());\n\t\t\t\tconst srcSize = texture.getSize();\n\t\t\t\tconst srcBytes = srcImage ? srcImage.byteLength : null;\n\n\t\t\t\tif (!srcImage || !srcSize || !srcBytes) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, unreadable texture.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// RESIZE: Resize textures using Sharp. KTX Software --width and --height\n\t\t\t\t// flags apply only for raw texture creation.\n\t\t\t\t// https://github.com/donmccurdy/glTF-Transform/issues/1348\n\t\t\t\t//\n\t\t\t\t// Minimum size on any dimension is 4px.\n\t\t\t\t// https://github.com/donmccurdy/glTF-Transform/issues/502\n\n\t\t\t\tif (options.resize || !isMultipleOfFour(srcSize[0]) || !isMultipleOfFour(srcSize[1])) {\n\t\t\t\t\tconst limitInputPixels = options.limitInputPixels;\n\t\t\t\t\tconst encoder = options.encoder as typeof sharp;\n\t\t\t\t\tconst instance = encoder(srcImage, { limitInputPixels }).toFormat('png');\n\t\t\t\t\tconst srcSize = ImageUtils.getSize(srcImage, srcMimeType)!;\n\n\t\t\t\t\tconst dstSize = options.resize\n\t\t\t\t\t\t? Array.isArray(options.resize)\n\t\t\t\t\t\t\t? fitWithin(srcSize, options.resize)\n\t\t\t\t\t\t\t: fitPowerOfTwo(srcSize, options.resize)\n\t\t\t\t\t\t: srcSize;\n\t\t\t\t\tdstSize[0] = ceilMultipleOfFour(dstSize[0]);\n\t\t\t\t\tdstSize[1] = ceilMultipleOfFour(dstSize[1]);\n\n\t\t\t\t\tlogger.debug(`${prefix}: Resizing ${srcSize.join('x')} → ${dstSize.join('x')}px`);\n\t\t\t\t\tinstance.resize(dstSize[0], dstSize[1], { fit: 'fill', kernel: options.resizeFilter });\n\n\t\t\t\t\tsrcImage = BufferUtils.toView(await instance.toBuffer());\n\t\t\t\t\tsrcExtension = 'png';\n\t\t\t\t\tsrcMimeType = 'image/png';\n\t\t\t\t}\n\n\t\t\t\t// PREPARE: Create temporary in/out paths for the 'ktx' CLI tool, and determine\n\t\t\t\t// necessary command-line flags.\n\n\t\t\t\tconst srcPath = join(batchDir.name, `${batchPrefix}_${textureIndex}.${srcExtension}`);\n\t\t\t\tconst dstPath = join(batchDir.name, `${batchPrefix}_${textureIndex}.ktx2`);\n\n\t\t\t\tawait fs.writeFile(srcPath, srcImage);\n\n\t\t\t\tconst params = [\n\t\t\t\t\t'create',\n\t\t\t\t\t...createParams(texture, slots, channels, srcSize, logger, numTextures, options),\n\t\t\t\t\tsrcPath,\n\t\t\t\t\tdstPath,\n\t\t\t\t];\n\t\t\t\tlogger.debug(`${prefix}: Spawning → ktx ${params.join(' ')}`);\n\n\t\t\t\t// COMPRESS: Run `ktx create` CLI tool.\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\t\tconst [status, _stdout, stderr] = await waitExit(spawn('ktx', params as string[]));\n\n\t\t\t\tif (status !== 0) {\n\t\t\t\t\tlogger.error(`${prefix}: Failed → \\n\\n${stderr.toString()}`);\n\t\t\t\t} else {\n\t\t\t\t\t// PACK: Replace image data in the glTF asset.\n\t\t\t\t\ttexture.setImage(await fs.readFile(dstPath)).setMimeType('image/ktx2');\n\t\t\t\t\tif (texture.getURI()) {\n\t\t\t\t\t\ttexture.setURI(FileUtils.basename(texture.getURI()) + '.ktx2');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dstBytes = texture.getImage()!.byteLength;\n\t\t\t\tlogger.debug(`${prefix}: ${formatBytes(srcBytes)} → ${formatBytes(dstBytes)} bytes`);\n\t\t\t}),\n\t\t);\n\n\t\tawait Promise.all(promises);\n\n\t\tif (options.cleanup) {\n\t\t\tawait rm(batchDir.name, { recursive: true });\n\t\t}\n\n\t\tconst usesKTX2 = doc\n\t\t\t.getRoot()\n\t\t\t.listTextures()\n\t\t\t.some((t) => t.getMimeType() === 'image/ktx2');\n\n\t\tif (!usesKTX2) {\n\t\t\tbasisuExtension.dispose();\n\t\t}\n\t});\n};\n\n/**********************************************************************************************\n * Utilities.\n */\n\n/** Create CLI parameters from the given options. Attempts to write only non-default options. */\nfunction createParams(\n\ttexture: Texture,\n\tslots: string[],\n\tchannels: number,\n\tsize: vec2,\n\tlogger: ILogger,\n\tnumTextures: number,\n\toptions: ETC1SOptions | UASTCOptions,\n): (string | number)[] {\n\tconst colorSpace = getTextureColorSpace(texture);\n\tconst params: (string | number)[] = ['--generate-mipmap'];\n\n\tif (options.filter !== GLOBAL_DEFAULTS.filter) {\n\t\tparams.push('--mipmap-filter', options.filter!);\n\t}\n\n\tif (options.filterScale !== GLOBAL_DEFAULTS.filterScale) {\n\t\tparams.push('--mipmap-filter-scale', options.filterScale!);\n\t}\n\n\t// See: https://github.com/KhronosGroup/KTX-Software/issues/600\n\tconst isNormalMap = slots.find((slot) => micromatch.isMatch(slot, '*normal*', MICROMATCH_OPTIONS));\n\n\tif (options.mode === Mode.UASTC) {\n\t\tconst _options = options as UASTCOptions;\n\t\tparams.push('--encode', 'uastc');\n\t\tparams.push('--uastc-quality', _options.level!);\n\n\t\tif (_options.rdo && !isNormalMap) {\n\t\t\tparams.push('--uastc-rdo');\n\t\t\tif (_options.rdoLambda !== UASTC_DEFAULTS.rdoLambda) {\n\t\t\t\tparams.push('--uastc-rdo-l', _options.rdoLambda!);\n\t\t\t}\n\t\t\tif (_options.rdoDictionarySize !== UASTC_DEFAULTS.rdoDictionarySize) {\n\t\t\t\tparams.push('--uastc-rdo-d', _options.rdoDictionarySize!);\n\t\t\t}\n\t\t\tif (_options.rdoBlockScale !== UASTC_DEFAULTS.rdoBlockScale) {\n\t\t\t\tparams.push('--uastc-rdo-b', _options.rdoBlockScale!);\n\t\t\t}\n\t\t\tif (_options.rdoStdDev !== UASTC_DEFAULTS.rdoStdDev) {\n\t\t\t\tparams.push('--uastc-rdo-s', _options.rdoStdDev!);\n\t\t\t}\n\t\t\tif (!_options.rdoMultithreading) {\n\t\t\t\tparams.push('--uastc-rdo-m');\n\t\t\t}\n\t\t}\n\n\t\tif (_options.zstd && _options.zstd > 0) {\n\t\t\tparams.push('--zstd', _options.zstd);\n\t\t}\n\t} else {\n\t\tconst _options = options as ETC1SOptions;\n\t\tparams.push('--encode', 'basis-lz');\n\n\t\tif (_options.quality !== ETC1S_DEFAULTS.quality) {\n\t\t\tparams.push('--qlevel', _options.quality!);\n\t\t}\n\t\tif (_options.compression !== ETC1S_DEFAULTS.compression) {\n\t\t\tparams.push('--clevel', _options.compression!);\n\t\t}\n\t\tif (_options.rdo && !isNormalMap) {\n\t\t\tif (_options.maxEndpoints !== ETC1S_DEFAULTS.maxEndpoints) {\n\t\t\t\tparams.push('--max-endpoints', _options.maxEndpoints!);\n\t\t\t}\n\t\t\tif (_options.maxSelectors !== ETC1S_DEFAULTS.maxSelectors) {\n\t\t\t\tparams.push('--max-selectors', _options.maxSelectors!);\n\t\t\t}\n\t\t\tif (_options.rdoThreshold !== ETC1S_DEFAULTS.rdoThreshold) {\n\t\t\t\tparams.push('--endpoint-rdo-threshold', _options.rdoThreshold!);\n\t\t\t\tparams.push('--selector-rdo-threshold', _options.rdoThreshold!);\n\t\t\t}\n\t\t} else {\n\t\t\tparams.push('--no-endpoint-rdo', '--no-selector-rdo');\n\t\t}\n\t}\n\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/215\n\tif (colorSpace === 'srgb') {\n\t\tparams.push('--assign-oetf', 'srgb', '--assign-primaries', 'bt709');\n\t} else if (colorSpace === 'srgb-linear') {\n\t\tparams.push('--assign-oetf', 'linear', '--assign-primaries', 'bt709');\n\t} else if (slots.length && !colorSpace) {\n\t\tparams.push('--assign-oetf', 'linear', '--assign-primaries', 'none');\n\t}\n\n\tif (channels === R) {\n\t\tparams.push('--format', 'R8_UNORM');\n\t} else if (channels === G || channels === (R | G)) {\n\t\tparams.push('--format', 'R8G8_UNORM');\n\t} else if (!(channels & A)) {\n\t\tparams.push('--format', colorSpace === 'srgb' ? 'R8G8B8_SRGB' : 'R8G8B8_UNORM');\n\t} else {\n\t\tparams.push('--format', colorSpace === 'srgb' ? 'R8G8B8A8_SRGB' : 'R8G8B8A8_UNORM');\n\t}\n\n\tif (options.jobs && options.jobs > 1 && numTextures > 1) {\n\t\t// See: https://github.com/donmccurdy/glTF-Transform/pull/389#issuecomment-1089842185\n\t\tconst threads = Math.max(2, Math.min(NUM_CPUS, Math.round((3 * NUM_CPUS) / numTextures)));\n\t\tparams.push('--threads', threads);\n\t}\n\n\treturn params;\n}\n\nasync function checkKTXSoftware(logger: ILogger): Promise<string> {\n\tif (!(await commandExists('ktx')) && !process.env.CI) {\n\t\tthrow new Error(\n\t\t\t`Command \"ktx\" not found. Please install KTX-Software ${KTX_SOFTWARE_VERSION_MIN}+, ` +\n\t\t\t\t'from:\\n\\nhttps://github.com/KhronosGroup/KTX-Software',\n\t\t);\n\t}\n\n\tconst [status, stdout, stderr] = await waitExit(spawn('ktx', ['--version']));\n\n\tconst version = ((stdout || stderr) as string)\n\t\t.replace(/ktx version:\\s+/, '')\n\t\t.replace(/~\\d+/, '')\n\t\t.trim();\n\n\tif (status !== 0 || !version) {\n\t\tthrow new Error(\n\t\t\t`Unable to find \"ktx\" version. Confirm KTX-Software ${KTX_SOFTWARE_VERSION_MIN}+ is installed.`,\n\t\t);\n\t} else {\n\t\tlogger.debug(`ktx: Found KTX-Software ${version}.`);\n\t}\n\n\treturn version;\n}\n\nfunction isMultipleOfFour(value: number): boolean {\n\treturn value % 4 === 0;\n}\n\nfunction ceilMultipleOfFour(value: number): number {\n\tif (value <= 4) return 4;\n\treturn value % 4 ? value + 4 - (value % 4) : value;\n}\n","import type { Document, ILogger, Transform } from '@gltf-transform/core';\nimport { Packet, KHRXMP } from '@gltf-transform/extensions';\nimport prompts, { PromptObject } from 'prompts';\nimport languageTags from 'language-tags';\nimport validateSPDX from 'spdx-correct';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { XMPContext } from '../util.js';\n\nconst DEFAULT_LANG = 'en-US';\n\nexport interface XMPOptions {\n\tpacket?: string;\n\treset?: boolean;\n}\n\nexport const XMP_DEFAULTS = {\n\tpacket: '',\n\treset: false,\n};\n\nenum Prompt {\n\tCREATOR,\n\tDESCRIPTION,\n\tLANGUAGE,\n\tTITLE,\n\tRELATED,\n\tPREFERRED_SURFACE,\n\tCREATE_DATE,\n\tRIGHTS,\n}\n\nasync function* generateQuestions(results: Record<string, unknown>): AsyncGenerator<PromptObject> {\n\tlet lang = (results['dc:language'] as string) || DEFAULT_LANG;\n\n\tyield {\n\t\ttype: 'multiselect',\n\t\tname: '_prompts',\n\t\tmessage: 'Select XMP metadata:',\n\t\tchoices: [\n\t\t\t{ value: Prompt.CREATOR, title: 'Creator' },\n\t\t\t{ value: Prompt.TITLE, title: 'Title' },\n\t\t\t{ value: Prompt.DESCRIPTION, title: 'Description' },\n\t\t\t{ value: Prompt.RELATED, title: 'Related links' },\n\t\t\t{ value: Prompt.CREATE_DATE, title: 'Date created' },\n\t\t\t{ value: Prompt.LANGUAGE, title: 'Language' },\n\t\t\t{ value: Prompt.RIGHTS, title: 'License and rights' },\n\t\t\t{ value: Prompt.PREFERRED_SURFACE, title: 'Preferred surfaces (AR)' },\n\t\t],\n\t} as PromptObject;\n\n\tconst prompts = new Set<Prompt>(results._prompts as Prompt[]);\n\n\t// Prompt for 'dc:language' first, used as the default for Language Alternative entries.\n\tif (prompts.has(Prompt.LANGUAGE)) {\n\t\tyield {\n\t\t\ttype: 'text',\n\t\t\tname: 'dc:language',\n\t\t\tmessage: 'Language?',\n\t\t\thint: ' (dc:language)',\n\t\t\tinitial: DEFAULT_LANG,\n\t\t\tvalidate: (input: string) =>\n\t\t\t\tlanguageTags.check(input) ? true : 'Invalid language; refer to IETF RFC 3066.',\n\t\t};\n\n\t\tlang = results['dc:language'] as string;\n\t}\n\n\tif (prompts.has(Prompt.CREATOR)) {\n\t\tyield {\n\t\t\ttype: 'text',\n\t\t\tname: 'dc:creator',\n\t\t\tmessage: 'Creator of the model?',\n\t\t\thint: ' (dc:creator)',\n\t\t\tformat: (input: string) => createList([input]),\n\t\t} as PromptObject;\n\t}\n\n\tif (prompts.has(Prompt.TITLE)) {\n\t\tyield {\n\t\t\ttype: 'text',\n\t\t\tname: 'dc:title',\n\t\t\tmessage: 'Title of the model?',\n\t\t\thint: ' (dc:title)',\n\t\t\tformat: (input: string) => createLanguageAlternative(input, lang),\n\t\t} as PromptObject;\n\t}\n\n\tif (prompts.has(Prompt.DESCRIPTION)) {\n\t\tyield {\n\t\t\ttype: 'text',\n\t\t\tname: 'dc:description',\n\t\t\tmessage: 'Description of the model?',\n\t\t\thint: ' (dc:description)',\n\t\t\tformat: (input: string) => createLanguageAlternative(input, lang),\n\t\t} as PromptObject;\n\t}\n\n\tif (prompts.has(Prompt.RELATED)) {\n\t\tyield {\n\t\t\ttype: 'list',\n\t\t\tname: 'dc:relation',\n\t\t\tmessage: 'Related links?',\n\t\t\thint: ' Comma-separated URLs. (dc:relation)',\n\t\t\tformat: (input: string[]) => createList(input),\n\t\t} as PromptObject;\n\t}\n\n\tif (prompts.has(Prompt.RIGHTS)) {\n\t\tyield {\n\t\t\ttype: 'select',\n\t\t\tname: '_rights',\n\t\t\tmessage: 'Is the model rights-managed?',\n\t\t\thint: ' (dc:rights, xmpRights:Marked, model3d:spdxLicense)',\n\t\t\tchoices: [\n\t\t\t\t// Common SPDX license identifiers applicable to creative works.\n\t\t\t\t{ value: '', title: 'Unspecified' },\n\t\t\t\t{ value: 'UNLICENSED', title: 'Restricted by copyright, trademark, or other marking' },\n\t\t\t\t{ value: 'CC0-1.0', title: 'Public domain (CC0-1.0)' },\n\t\t\t\t{ value: 'CC-BY-4.0', title: 'Creative Commons Attribution (CC-BY-4.0)' },\n\t\t\t\t{ value: 'CC-BY-ND-4.0', title: 'Creative Commons Attribution-NoDerivs (CC-BY-ND-4.0)' },\n\t\t\t\t{ value: 'CC-BY-SA-4.0', title: 'Creative Commons Attribution-ShareAlike (CC-BY-SA-4.0)' },\n\t\t\t\t{ value: 'CC-BY-NC-4.0', title: 'Creative Commons Attribution-NonCommercial (CC-BY-NC-4.0)' },\n\t\t\t\t{\n\t\t\t\t\tvalue: 'CC-BY-NC-ND-4.0',\n\t\t\t\t\ttitle: 'Creative Commons Attribution-NonCommercial-NoDerivs (CC-BY-NC-ND-4.0)',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'CC-BY-NC-SA-4.0',\n\t\t\t\t\ttitle: 'Creative Commons Attribution-NonCommercial-ShareAlike (CC-BY-NC-SA-4.0)',\n\t\t\t\t},\n\t\t\t\t{ value: 'OTHER', title: 'Other license' },\n\t\t\t],\n\t\t} as PromptObject;\n\n\t\tif (results._rights === 'UNLICENSED') {\n\t\t\tresults['xmpRights:Marked'] = true;\n\n\t\t\tyield {\n\t\t\t\ttype: 'text',\n\t\t\t\tname: 'xmpRights:Owner',\n\t\t\t\tmessage: 'Who is the intellectual property (IP) owner?',\n\t\t\t\thint: ' (xmpRights:Owner)',\n\t\t\t\tformat: (input: string) => createList([input]),\n\t\t\t} as PromptObject;\n\n\t\t\tyield {\n\t\t\t\ttype: 'text',\n\t\t\t\tname: '_usage',\n\t\t\t\tmessage: 'Other usage instructions?',\n\t\t\t\thint: ' Plain text or URL. (xmpRights:UsageTerms, xmpRights:WebStatement)',\n\t\t\t} as PromptObject;\n\n\t\t\tconst usage = results._usage as string;\n\t\t\tif (/^https?:\\/\\//.test(usage)) {\n\t\t\t\tresults['xmpRights:WebStatement'] = usage;\n\t\t\t} else if (usage) {\n\t\t\t\tresults['xmpRights:UsageTerms'] = createLanguageAlternative(usage, lang);\n\t\t\t}\n\t\t}\n\n\t\tif (results._rights === 'OTHER') {\n\t\t\tyield {\n\t\t\t\ttype: 'confirm',\n\t\t\t\tname: '_isLicenseSPDX',\n\t\t\t\tmessage: 'Does the license have an SPDX ID?',\n\t\t\t\thint: ' See https://spdx.dev/.',\n\t\t\t} as PromptObject;\n\n\t\t\tif (results._isLicenseSPDX) {\n\t\t\t\tyield {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tname: 'model3d:spdxLicense',\n\t\t\t\t\tmessage: 'What is the SPDX license ID?',\n\t\t\t\t\thint: ' (model3d:spdxLicense)',\n\t\t\t\t\tvalidate: (input: string) =>\n\t\t\t\t\t\tvalidateSPDX(input) ? true : 'Invalid SPDX ID; refer to https://spdx.dev/.',\n\t\t\t\t} as PromptObject;\n\t\t\t} else {\n\t\t\t\tyield {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tname: 'dc:rights',\n\t\t\t\t\tmessage: 'What is the plain text license or rights statement?',\n\t\t\t\t\thint: ' (dc:rights)',\n\t\t\t\t\tformat: (input: string) => createLanguageAlternative(input, lang),\n\t\t\t\t} as PromptObject;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (prompts.has(Prompt.CREATE_DATE)) {\n\t\tyield {\n\t\t\ttype: 'date',\n\t\t\tname: 'xmp:CreateDate',\n\t\t\tmessage: 'Date created?',\n\t\t\thint: ' (xmp:CreateDate)',\n\t\t\tmask: 'YYYY-MM-DD',\n\t\t\tformat: (d) => d.toISOString().substring(0, 10)\n\t\t} as PromptObject;\n\t}\n\n\tif (prompts.has(Prompt.PREFERRED_SURFACE)) {\n\t\tyield {\n\t\t\ttype: 'multiselect',\n\t\t\tname: 'model3d:preferredSurfaces',\n\t\t\tmessage: 'Preferred surfaces for augmented reality (AR)? Select all that apply.',\n\t\t\thint: ' (model3d:preferredSurfaces)',\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tvalue: 'horizontal_up',\n\t\t\t\t\ttitle: 'horizontal_up (rests on top of horizontal surfaces)',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'horizontal_down',\n\t\t\t\t\ttitle: 'horizontal_down (suspended from horizonal surfaces)',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'vertical',\n\t\t\t\t\ttitle: 'vertical (attaches to vertical surfaces)',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'human_face',\n\t\t\t\t\ttitle: 'human_face (worn or displayed on a human face)',\n\t\t\t\t},\n\t\t\t],\n\t\t\tformat: (input: string[]) => createList(input),\n\t\t} as PromptObject;\n\t}\n}\n\nexport const xmp = (_options: XMPOptions = XMP_DEFAULTS): Transform => {\n\tconst options = { ...XMP_DEFAULTS, ..._options } as Required<XMPOptions>;\n\n\treturn async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\t\tconst xmpExtension = document.createExtension(KHRXMP);\n\n\t\tif (options.reset) {\n\t\t\txmpExtension.dispose();\n\t\t\tlogger.info('[xmp]: Reset XMP metadata.');\n\t\t\tlogger.debug('[xmp]: Complete.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.packet) {\n\t\t\tconst packetPath = path.resolve(options.packet);\n\t\t\tlogger.info(`[xmp]: Loading \"${packetPath}\"...`);\n\t\t\tconst packetJSON = await fs.readFile(packetPath, 'utf-8');\n\t\t\tconst packetDef = validatePacket(JSON.parse(packetJSON));\n\t\t\tconst packet = xmpExtension.createPacket().fromJSONLD(packetDef);\n\t\t\troot.setExtension('KHR_xmp_json_ld', packet);\n\t\t\tlogger.debug('[xmp]: Complete.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst packet = root.getExtension<Packet>('KHR_xmp_json_ld') || xmpExtension.createPacket();\n\t\tconst results = packet.toJSONLD();\n\n\t\ttry {\n\t\t\tfor await (const question of generateQuestions(results)) {\n\t\t\t\tObject.assign(results, await prompts(question));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tcheckTTY(e, logger);\n\t\t\tthrow e;\n\t\t}\n\n\t\t// Context.\n\t\tpacket.setContext({\n\t\t\t...packet.getContext(),\n\t\t\t...createContext(results),\n\t\t\txmp: XMPContext.xmp, // required for xmp:MetadataDate below.\n\t\t});\n\n\t\t// Properties.\n\t\tlet numProperties = 0;\n\t\tfor (const name in results) {\n\t\t\t// NOTICE: Calling 'continue' in this context hits a Babel bug.\n\t\t\tif (!name.startsWith('_') && !name.startsWith('@') && results[name]) {\n\t\t\t\tpacket.setProperty(name, results[name] as string);\n\t\t\t\tnumProperties++;\n\t\t\t}\n\t\t}\n\n\t\tif (numProperties === 0) {\n\t\t\tthrow new Error('xmp: No properties added.');\n\t\t}\n\n\t\t// xmp:MetadataDate should be the same as, or more recent than, xmp:ModifyDate.\n\t\tpacket.setProperty('xmp:MetadataDate', new Date().toISOString().substring(0, 10));\n\n\t\troot.setExtension('KHR_xmp_json_ld', packet);\n\n\t\tlogger.debug(`[xmp]: Packet contents: ${JSON.stringify(packet.toJSONLD(), null, 2)}`);\n\t\tlogger.debug('[xmp]: Complete.');\n\t};\n};\n\n/** Validates a JSON-LD XMP packet for basic expectations. */\nfunction validatePacket(packetDef: Record<string, unknown>): Record<string, unknown> {\n\t// Check context.\n\tconst context = packetDef['@context'] as Record<string, unknown>;\n\tif (!context) {\n\t\tthrow new Error('Missing @context in packet.');\n\t}\n\n\t// Check properties.\n\tfor (const name in packetDef) {\n\t\tif (name.startsWith('@')) continue;\n\n\t\tconst prefix = name.split(':')[0];\n\t\tif (!prefix) {\n\t\t\tthrow new Error(`Invalid property, \"${name}\"`);\n\t\t}\n\t\tif (!(prefix in context)) {\n\t\t\tthrow new Error(`Missing context definition, \"${prefix}\"`);\n\t\t}\n\t}\n\n\treturn packetDef;\n}\n\n/**\n * The 'inquirer' library supports most terminal clients, but won't run in non-interactive\n * environments. Check errors and try to provide a useful warning to the user.\n * See: https://github.com/SBoudrias/Inquirer.js#Support.\n */\nfunction checkTTY(error: unknown, logger: ILogger) {\n\tif ((error as { isTtyError?: boolean }).isTtyError) {\n\t\tlogger.warn(\n\t\t\t'Unable to run \"inquirer\" session in this terminal environment.' +\n\t\t\t\t' Try another terminal or provide a --packet JSON-LD input.',\n\t\t);\n\t}\n}\n\n/** Creates a Language Alternative entry with a single language. */\nfunction createLanguageAlternative(value: string, language: string): Record<string, unknown> | null {\n\tif (!value) return null;\n\treturn {\n\t\t'@type': 'rdf:Alt',\n\t\t'rdf:_1': {\n\t\t\t'@language': language,\n\t\t\t'@value': value,\n\t\t},\n\t};\n}\n\n/** Creates a List entry. */\nfunction createList(list: string[]): Record<string, unknown> | null {\n\tlist = list.filter((value) => !!value);\n\tif (!list.length) return null;\n\treturn { '@list': list };\n}\n\nfunction createContext(_object: unknown, acc: Record<string, string> = {}): Record<string, string> {\n\tif (Object.prototype.toString.call(_object) !== '[object Object]') return acc;\n\n\tconst object = _object as Record<string, unknown>;\n\tfor (const key in object) {\n\t\tconst value = object[key];\n\t\tconst [prefix, suffix] = key.split(':');\n\t\tif (prefix && suffix && prefix in XMPContext) {\n\t\t\tacc[prefix] = XMPContext[prefix];\n\t\t\tcreateContext(value, acc);\n\t\t}\n\t}\n\n\treturn acc;\n}\n","import { Document, NodeIO, FileUtils, Transform, Format, Verbosity } from '@gltf-transform/core';\nimport type { Packet, KHRXMP } from '@gltf-transform/extensions';\nimport { unpartition } from '@gltf-transform/functions';\nimport { Listr, ListrTask } from 'listr2';\nimport { dim, formatBytes, formatLong, XMPContext } from './util.js';\nimport { performance } from 'perf_hooks'; // global in Node.js v16+\nimport { Logger } from './program.js';\n\n/** Helper class for managing a CLI command session. */\nexport class Session {\n\tprivate _outputFormat: Format;\n\tprivate _display = false;\n\n\tconstructor(\n\t\tprivate _io: NodeIO,\n\t\tprivate _logger: Logger,\n\t\tprivate _input: string,\n\t\tprivate _output: string,\n\t) {\n\t\t_io.setLogger(_logger);\n\t\tthis._outputFormat = FileUtils.extension(_output) === 'glb' ? Format.GLB : Format.GLTF;\n\t}\n\n\tpublic static create(io: NodeIO, logger: Logger, input: unknown, output: unknown): Session {\n\t\treturn new Session(io, logger, input as string, output as string);\n\t}\n\n\tpublic setDisplay(display: boolean): this {\n\t\tthis._display = display;\n\t\treturn this;\n\t}\n\n\tpublic async transform(...transforms: Transform[]): Promise<void> {\n\t\tconst logger = this._logger;\n\t\tconst document = this._input\n\t\t\t? (await this._io.read(this._input)).setLogger(this._logger)\n\t\t\t: new Document().setLogger(this._logger);\n\n\t\t// Warn and remove lossy compression, to avoid increasing loss on round trip.\n\t\tfor (const extensionName of ['KHR_draco_mesh_compression', 'EXT_meshopt_compression']) {\n\t\t\tconst extension = document\n\t\t\t\t.getRoot()\n\t\t\t\t.listExtensionsUsed()\n\t\t\t\t.find((extension) => extension.extensionName === extensionName);\n\t\t\tif (extension) {\n\t\t\t\textension.dispose();\n\t\t\t\tthis._logger.warn(`Decoded ${extensionName}. Further compression will be lossy.`);\n\t\t\t}\n\t\t}\n\n\t\tif (this._display) {\n\t\t\tconst tasks = [] as ListrTask[];\n\t\t\tfor (const transform of transforms) {\n\t\t\t\ttasks.push({\n\t\t\t\t\ttitle: transform.name,\n\t\t\t\t\ttask: async (ctx, task) => {\n\t\t\t\t\t\tlet time = performance.now();\n\t\t\t\t\t\tawait document.transform(transform);\n\t\t\t\t\t\ttime = Math.round(performance.now() - time);\n\t\t\t\t\t\ttask.title = task.title.padEnd(20) + dim(` ${formatLong(time)}ms`);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst prevLevel = logger.getVerbosity();\n\t\t\tif (prevLevel === Verbosity.INFO) logger.setVerbosity(Verbosity.WARN);\n\n\t\t\t// Disable signal listeners so Ctrl+C works. Note that 'simple' and 'default'\n\t\t\t// renderers have different capability to display errors and warnings.\n\t\t\tawait new Listr(tasks, { renderer: 'default', registerSignalListeners: false }).run();\n\t\t\tconsole.log('');\n\n\t\t\tlogger.setVerbosity(prevLevel);\n\t\t} else {\n\t\t\tawait document.transform(...transforms);\n\t\t}\n\n\t\tawait document.transform(updateMetadata);\n\n\t\tif (this._outputFormat === Format.GLB) {\n\t\t\tawait document.transform(unpartition());\n\t\t}\n\n\t\tawait this._io.write(this._output, document);\n\n\t\tconst { lastReadBytes, lastWriteBytes } = this._io;\n\t\tif (!this._input) {\n\t\t\tconst output = FileUtils.basename(this._output) + '.' + FileUtils.extension(this._output);\n\t\t\tthis._logger.info(`${output} (${formatBytes(lastWriteBytes)})`);\n\t\t} else {\n\t\t\tconst input = FileUtils.basename(this._input) + '.' + FileUtils.extension(this._input);\n\t\t\tconst output = FileUtils.basename(this._output) + '.' + FileUtils.extension(this._output);\n\t\t\tthis._logger.info(\n\t\t\t\t`${input} (${formatBytes(lastReadBytes)})` + ` → ${output} (${formatBytes(lastWriteBytes)})`,\n\t\t\t);\n\t\t}\n\t}\n}\n\nfunction updateMetadata(document: Document): void {\n\tconst root = document.getRoot();\n\tconst xmpExtension = root\n\t\t.listExtensionsUsed()\n\t\t.find((ext) => ext.extensionName === 'KHR_xmp_json_ld') as KHRXMP | null;\n\n\t// Do not add KHR_xmp_json_ld to assets that don't already use it.\n\tif (!xmpExtension) return;\n\n\tconst rootPacket = root.getExtension<Packet>('KHR_xmp_json_ld') || xmpExtension.createPacket();\n\n\t// xmp:MetadataDate should be the same as, or more recent than, xmp:ModifyDate.\n\t// https://github.com/adobe/xmp-docs/blob/master/XMPNamespaces/xmp.md\n\tconst date = new Date().toISOString().substring(0, 10);\n\trootPacket\n\t\t.setContext({ ...rootPacket.getContext(), xmp: XMPContext.xmp })\n\t\t.setProperty('xmp:ModifyDate', date)\n\t\t.setProperty('xmp:MetadataDate', date);\n}\n","import fs from 'node:fs/promises';\nimport path from 'node:path';\nimport type { ILogger } from '@gltf-transform/core';\nimport { formatHeader, formatTable, TableFormat } from './util.js';\n\nexport interface ValidateOptions {\n\tlimit: number;\n\tignore: string[];\n\tformat: TableFormat;\n}\n\ninterface ValidatorReport {\n\tissues: { messages: ValidatorMessage[] };\n}\n\ninterface ValidatorMessage {\n\tseverity: number;\n}\n\nconst HEADER = ['code', 'message', 'severity', 'pointer'];\n\nexport async function validate(input: string, options: ValidateOptions, logger: ILogger): Promise<void> {\n\tconst [buffer, validator] = await Promise.all([fs.readFile(input), import('gltf-validator')]);\n\treturn validator\n\t\t.validateBytes(new Uint8Array(buffer), {\n\t\t\tmaxIssues: options.limit,\n\t\t\tignoredIssues: options.ignore,\n\t\t\texternalResourceFunction: (uri: string) => {\n\t\t\t\turi = path.resolve(path.dirname(input), decodeURIComponent(uri));\n\t\t\t\treturn fs.readFile(uri).catch((err) => {\n\t\t\t\t\tlogger.warn(`Unable to validate \"${uri}\": ${err.toString()}.`);\n\t\t\t\t\tthrow err.toString();\n\t\t\t\t});\n\t\t\t},\n\t\t})\n\t\t.then(async (report: ValidatorReport) => {\n\t\t\tif (options.format === TableFormat.CSV) {\n\t\t\t\tawait printCSV(report);\n\t\t\t} else {\n\t\t\t\tawait printTable('error', 0, report, logger, options.format);\n\t\t\t\tawait printTable('warning', 1, report, logger, options.format);\n\t\t\t\tawait printTable('info', 2, report, logger, options.format);\n\t\t\t\tawait printTable('hint', 3, report, logger, options.format);\n\t\t\t}\n\t\t\treturn report;\n\t\t})\n\t\t.then((report: ValidatorReport) => {\n\t\t\tif (report.issues.messages.some((message) => message.severity === 0)) {\n\t\t\t\tthrow new Error('Validation detected errors.');\n\t\t\t}\n\t\t});\n}\n\nasync function printCSV(report: ValidatorReport): Promise<void> {\n\tconst messages = report.issues.messages;\n\tconsole.log(await formatTable(TableFormat.CSV, HEADER, messages.map(Object.values)));\n\treturn;\n}\n\nasync function printTable(\n\theader: string,\n\tseverity: number,\n\treport: ValidatorReport,\n\tlogger: ILogger,\n\tformat: TableFormat,\n): Promise<void> {\n\tconsole.log(formatHeader(header));\n\tconst messages = report.issues.messages.filter((msg) => msg.severity === severity);\n\tif (messages.length) {\n\t\tconsole.log(await formatTable(format, HEADER, messages.map(Object.values)));\n\t} else {\n\t\tlogger.info(`No ${header}s found.`);\n\t}\n\tconsole.log('\\n');\n}\n","import type { Extension, NodeIO } from '@gltf-transform/core';\nimport { ALL_EXTENSIONS } from '@gltf-transform/extensions';\nimport { resolve } from 'path';\nimport draco3d from 'draco3dgltf';\nimport { MeshoptEncoder, MeshoptDecoder } from 'meshoptimizer';\nimport type { Session } from './session.js';\nimport { program } from './program.js';\n\ninterface Config {\n\textensions: (typeof Extension)[];\n\tdependencies: Record<string, unknown>;\n\tonProgramReady?: (params: { program: typeof program; io: NodeIO; Session: typeof Session }) => Promise<void>;\n}\n\nexport type CustomConfig = Partial<Config>;\n\ntype ConfigModule = { default: CustomConfig };\n\nlet customConfigPromise: Promise<ConfigModule> | null = null;\n\nexport async function defineConfig(\n\tconfigProvider: CustomConfig | (() => Promise<CustomConfig>),\n): Promise<CustomConfig> {\n\tif (typeof configProvider === 'function') {\n\t\tconfigProvider = await configProvider();\n\t}\n\treturn configProvider;\n}\n\nexport function createDefaultConfig(): Promise<Config> {\n\treturn Promise.all([\n\t\tdraco3d.createDecoderModule(),\n\t\tdraco3d.createEncoderModule(),\n\t\tMeshoptDecoder.ready,\n\t\tMeshoptEncoder.ready,\n\t]).then(([decoder, encoder, _]) => {\n\t\treturn {\n\t\t\textensions: ALL_EXTENSIONS,\n\t\t\tdependencies: {\n\t\t\t\t'draco3d.decoder': decoder,\n\t\t\t\t'draco3d.encoder': encoder,\n\t\t\t\t'meshopt.decoder': MeshoptDecoder,\n\t\t\t\t'meshopt.encoder': MeshoptEncoder,\n\t\t\t},\n\t\t\tonProgramReady: undefined,\n\t\t};\n\t});\n}\n\nexport function loadConfig(path: string) {\n\tpath = resolve(process.cwd(), path);\n\tpath = `file:${path}`; // Required on Windows.\n\tcustomConfigPromise = import(path).then(validateConfig) as Promise<ConfigModule>;\n}\n\nexport function validateConfig(config: CustomConfig): CustomConfig {\n\tfor (const extension of config.extensions || []) {\n\t\tif (!extension.EXTENSION_NAME) {\n\t\t\tthrow new Error('Invalid extension in config.extensions.');\n\t\t}\n\t}\n\treturn config;\n}\n\nexport async function getConfig(): Promise<Config> {\n\tconst config = await createDefaultConfig();\n\tif (customConfigPromise) {\n\t\tconst { default: customConfig } = await customConfigPromise;\n\t\tObject.assign(config, customConfig);\n\t}\n\treturn config;\n}\n","import {\n\tprogram as _program,\n\tCommand,\n\tParsedOption,\n\tValidator as CaporalValidator,\n\tLogger as WinstonLogger,\n} from '@donmccurdy/caporal';\nimport { ILogger, Verbosity } from '@gltf-transform/core';\n\nconst PAD_EMOJI = new Set(['🫖', '🖼', '⏯️']);\n\n/**********************************************************************************************\n * Program.\n */\n\nexport interface IProgram {\n\tcommand: (name: string, desc: string) => ICommand;\n\toption: (name: string, desc: string, options: IProgramOptions) => this;\n\tsection: (name: string, icon: string) => this;\n}\n\ninterface IExecOptions {\n\tsilent?: boolean;\n}\n\ninterface IInternalProgram extends IProgram {\n\tversion: (version: string) => this;\n\tdescription: (desc: string) => this;\n\tdisableGlobalOption: (name: string) => this;\n\trun: () => this;\n\texec: (args: unknown[], options?: IExecOptions) => Promise<void>;\n}\n\nexport interface IProgramOptions<T = unknown> {\n\tdefault?: T;\n\tvalidator?: CaporalValidator;\n\taction?: IActionFn;\n\thidden?: boolean;\n}\n\nexport type IActionFn = (params: {\n\targs: Record<string, unknown>;\n\toptions: Record<string, unknown>;\n\tlogger: Logger;\n}) => void;\n\nexport interface IHelpOptions {\n\tsectionName?: string;\n}\n\nclass ProgramImpl implements IInternalProgram {\n\tversion(version: string) {\n\t\t_program.version(version);\n\t\treturn this;\n\t}\n\tdescription(desc: string) {\n\t\t_program.description(desc);\n\t\treturn this;\n\t}\n\thelp(help: string, options?: IHelpOptions) {\n\t\t_program.help(help, options);\n\t\treturn this;\n\t}\n\tsection(_name: string, _icon: string) {\n\t\tconst icon = _icon + (PAD_EMOJI.has(_icon) ? ' ' : '');\n\t\tconst name = _name.toUpperCase();\n\t\tconst line = ''.padEnd(50 - name.length - 1, '─');\n\t\t_program.command('', `\\n\\n${icon} ${name} ${line}`);\n\t\treturn this;\n\t}\n\tcommand(name: string, desc: string): ICommand {\n\t\treturn new CommandImpl(_program, name, desc);\n\t}\n\toption<T>(name: string, desc: string, options: IProgramOptions<T>) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t_program.option(name, desc, { global: true, ...options } as any);\n\t\treturn this;\n\t}\n\tdisableGlobalOption(name: string) {\n\t\t_program.disableGlobalOption(name);\n\t\treturn this;\n\t}\n\trun() {\n\t\t_program.run();\n\t\treturn this;\n\t}\n\tasync exec(args: unknown[], options?: IExecOptions) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tawait _program.exec(args as any, options as any);\n\t}\n}\n\n/**********************************************************************************************\n * Command.\n */\n\nexport interface ICommand {\n\thelp: (text: string) => this;\n\targument: (name: string, desc: string) => this;\n\toption: (name: string, desc: string, options?: ICommandOptions) => this;\n\taction: (fn: IActionFn) => this;\n\talias: (name: string) => this;\n}\n\nexport interface ICommandOptions {\n\trequired?: boolean;\n\tdefault?: ParsedOption;\n\tvalidator?: CaporalValidator;\n\thidden?: boolean;\n}\n\nclass CommandImpl implements ICommand {\n\t_ctx: Command;\n\tconstructor(program: typeof _program, name: string, desc: string) {\n\t\tthis._ctx = program.command(name, desc);\n\t}\n\thelp(text: string) {\n\t\tthis._ctx.help(text);\n\t\treturn this;\n\t}\n\targument(name: string, desc: string) {\n\t\tthis._ctx.argument(name, desc);\n\t\treturn this;\n\t}\n\toption(name: string, desc: string, options?: ICommandOptions) {\n\t\tthis._ctx.option(name, desc, options);\n\t\treturn this;\n\t}\n\taction(fn: IActionFn) {\n\t\tthis._ctx.action(async (args) => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst logger = new Logger(args.logger as any);\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\treturn fn({ ...args, logger } as any);\n\t\t});\n\t\treturn this;\n\t}\n\talias(name: string) {\n\t\tthis._ctx.alias(name);\n\t\treturn this;\n\t}\n}\n\nexport const program = new ProgramImpl();\n\n/**********************************************************************************************\n * Validator.\n */\n\nexport const Validator: Record<'NUMBER' | 'ARRAY' | 'BOOLEAN' | 'STRING', CaporalValidator> = {\n\tNUMBER: _program.NUMBER,\n\tARRAY: _program.ARRAY,\n\tBOOLEAN: _program.BOOLEAN,\n\tSTRING: _program.STRING,\n};\n\n/**********************************************************************************************\n * Logger.\n */\n\nexport class Logger implements ILogger {\n\t_logger: WinstonLogger;\n\t_verbosity: Verbosity;\n\tconstructor(logger: WinstonLogger) {\n\t\tthis._logger = logger;\n\n\t\tswitch (logger.level) {\n\t\t\tcase 'info':\n\t\t\t\tthis._verbosity = Verbosity.INFO;\n\t\t\t\tbreak;\n\t\t\tcase 'warn':\n\t\t\t\tthis._verbosity = Verbosity.WARN;\n\t\t\t\tbreak;\n\t\t\tcase 'error':\n\t\t\t\tthis._verbosity = Verbosity.ERROR;\n\t\t\t\tbreak;\n\t\t\tcase 'debug':\n\t\t\tdefault:\n\t\t\t\tthis._verbosity = Verbosity.DEBUG;\n\t\t}\n\t}\n\tgetVerbosity() {\n\t\treturn this._verbosity;\n\t}\n\tsetVerbosity(verbosity: Verbosity) {\n\t\tswitch (verbosity) {\n\t\t\tcase Verbosity.INFO:\n\t\t\t\tthis._logger.level = 'info';\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.WARN:\n\t\t\t\tthis._logger.level = 'warn';\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.ERROR:\n\t\t\t\tthis._logger.level = 'error';\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.DEBUG:\n\t\t\t\tthis._logger.level = 'debug';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected verbosity, \"${verbosity}\".`);\n\t\t}\n\t\tthis._verbosity = verbosity;\n\t}\n\tdebug(msg: string) {\n\t\tthis._logger.debug(msg);\n\t}\n\tinfo(msg: string) {\n\t\tthis._logger.info(msg);\n\t}\n\twarn(msg: string) {\n\t\tthis._logger.warn(msg);\n\t}\n\terror(msg: string) {\n\t\tthis._logger.error(msg);\n\t}\n}\n","import { URL } from 'url';\nimport { promises as fs, readFileSync } from 'fs';\nimport micromatch from 'micromatch';\nimport { gzip } from 'node-gzip';\nimport fetch from 'node-fetch'; // TODO(deps): Replace when v20 reaches end of maintenance.\nimport mikktspace from 'mikktspace';\nimport { MeshoptEncoder, MeshoptSimplifier } from 'meshoptimizer';\nimport { ready as resampleReady, resample as resampleWASM } from 'keyframe-resample';\nimport { Logger, NodeIO, PropertyType, VertexLayout, vec2, Transform } from '@gltf-transform/core';\nimport {\n\tCenterOptions,\n\tInstanceOptions,\n\tINSTANCE_DEFAULTS,\n\tPartitionOptions,\n\tPruneOptions,\n\tQUANTIZE_DEFAULTS,\n\tResampleOptions,\n\tSequenceOptions,\n\tTextureResizeFilter,\n\tUnweldOptions,\n\tWeldOptions,\n\tcenter,\n\tdedup,\n\tinstance,\n\tmetalRough,\n\tpartition,\n\tprune,\n\tquantize,\n\tresample,\n\tsequence,\n\ttangents,\n\tunweld,\n\tweld,\n\treorder,\n\tdequantize,\n\tunlit,\n\tmeshopt,\n\tDRACO_DEFAULTS,\n\tdraco,\n\tDracoOptions,\n\tsimplify,\n\tSIMPLIFY_DEFAULTS,\n\ttextureCompress,\n\tFlattenOptions,\n\tflatten,\n\tJOIN_DEFAULTS,\n\tjoin,\n\tJoinOptions,\n\tsparse,\n\tSparseOptions,\n\tpalette,\n\tPaletteOptions,\n\tPALETTE_DEFAULTS,\n\tMESHOPT_DEFAULTS,\n\tTEXTURE_COMPRESS_SUPPORTED_FORMATS,\n\tPRUNE_DEFAULTS,\n} from '@gltf-transform/functions';\nimport { inspect } from './inspect.js';\nimport {\n\tETC1S_DEFAULTS,\n\tFilter,\n\tMode,\n\tUASTC_DEFAULTS,\n\tktxfix,\n\tmerge,\n\ttoktx,\n\tXMPOptions,\n\txmp,\n} from './transforms/index.js';\nimport { formatBytes, MICROMATCH_OPTIONS, underline, TableFormat, dim, regexFromArray } from './util.js';\nimport { Session } from './session.js';\nimport { ValidateOptions, validate } from './validate.js';\nimport { getConfig, loadConfig } from './config.js';\nimport { Validator, program } from './program.js';\n\nlet io: NodeIO;\n\nconst programReady = new Promise<void>((resolve) => {\n\t// Manually detect and handle --config, before program actually runs.\n\tif (process.argv.includes('--config')) {\n\t\tloadConfig(process.argv[process.argv.indexOf('--config') + 1]);\n\t}\n\treturn getConfig().then(async (config) => {\n\t\tio = new NodeIO(fetch).registerExtensions(config.extensions).registerDependencies(config.dependencies);\n\t\tif (config.onProgramReady) {\n\t\t\tprogram.section('User', '👤');\n\t\t\tawait config.onProgramReady({ program, io, Session });\n\t\t}\n\t\tresolve();\n\t});\n});\n\nconst INPUT_DESC = 'Path to read glTF 2.0 (.glb, .gltf) model';\nconst OUTPUT_DESC = 'Path to write output';\n\nconst PACKAGE = JSON.parse(readFileSync(new URL('../package.json', import.meta.url), 'utf-8'));\n\nprogram.version(PACKAGE.version).description('Command-line interface (CLI) for the glTF Transform SDK.');\n\nif (process.argv && !process.argv.includes('--no-editorial')) {\n\tprogram\n\t\t.help(\n\t\t\t`\nTo run the most common optimizations in one easy step, use the 'optimize' command:\n\n▸ gltf-transform optimize <input> <output> --compress draco --texture-compress webp\n\nDefaults in the 'optimize' command may not be ideal for all scenes. Some of its\nfeatures can be configured (${dim(`optimize --help`)}), or more advanced users may wish\nto inspect their scenes then pick and choose optimizations.\n\n▸ gltf-transform inspect <input>\n\nThe report printed by the 'inspect' command should identify performance issues,\nand whether the scene is generally geometry-heavy, texture-heavy, has too many\ndraw calls, etc. Apply individual commands below to deal with any of these\nissues as needed.\n`.trim(),\n\t\t)\n\t\t.help(\n\t\t\t`\n${underline('Using glTF Transform for a personal project?')} That's great! Sponsorship is\nneither expected nor required. Feel free to share screenshots if you've\nmade something you're excited about — I enjoy seeing those!\n\n${underline('Using glTF Transform in for-profit work?')} That's wonderful! Your support is\nimportant to keep glTF Transform maintained, independent, and open source under\nMIT License. Please consider a subscription or GitHub sponsorship.\n\nLearn more in the glTF Transform Pro FAQs (https://gltf-transform.dev/pro).\n`.trim(),\n\t\t\t{ sectionName: 'COMMERCIAL USE' },\n\t\t);\n}\n\nprogram.section('Inspect', '🔎');\n\n// INSPECT\nprogram\n\t.command('inspect', 'Inspect contents of the model')\n\t.help(\n\t\t`\nInspect the contents of the model, printing a table with properties and\nstatistics for scenes, meshes, materials, textures, and animations contained\nby the file. This data is useful for understanding how much of a file's size\nis comprised of geometry vs. textures, which extensions are needed when loading\nthe file, and which material properties are being used.\n\nUse --format=csv or --format=md for alternative display formats.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.option('--format <format>', 'Table output format', {\n\t\tvalidator: [TableFormat.PRETTY, TableFormat.CSV, TableFormat.MD],\n\t\tdefault: TableFormat.PRETTY,\n\t})\n\t.action(async ({ args, options, logger }) => {\n\t\tio.setLogger(logger as unknown as Logger);\n\t\tawait inspect(\n\t\t\tawait io.readAsJSON(args.input as string),\n\t\t\tio,\n\t\t\tlogger as unknown as Logger,\n\t\t\toptions.format as TableFormat,\n\t\t);\n\t});\n\n// VALIDATE\nprogram\n\t.command('validate', 'Validate model against the glTF spec')\n\t.help(\n\t\t`\nValidate the model with official glTF validator. The validator detects whether\na file conforms correctly to the glTF specification, and is useful for\ndebugging issues with a model. Validation errors typically suggest a problem\nin the authoring process, and can be reported as bugs on the software used to\nexport the file. Certain lower-priority issues are not technically invalid, but\nmay indicate an unintended situation in the file, like unused data not attached\nto any particular scene.\n\nFor more details about the official validation suite used here, see:\nhttps://github.com/KhronosGroup/glTF-Validator\n\nExample:\n\n  ▸ gltf-transform validate input.glb --ignore ACCESSOR_WEIGHTS_NON_NORMALIZED\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.option('--limit <limit>', 'Limit number of issues to display', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: 1e7,\n\t})\n\t.option('--ignore <CODE>,<CODE>,...', 'Issue codes to be ignored', {\n\t\tvalidator: Validator.ARRAY,\n\t\tdefault: [],\n\t})\n\t.option('--format <format>', 'Table output format', {\n\t\tvalidator: [TableFormat.PRETTY, TableFormat.CSV, TableFormat.MD],\n\t\tdefault: TableFormat.PRETTY,\n\t})\n\t.action(({ args, options, logger }) => {\n\t\treturn validate(args.input as string, options as unknown as ValidateOptions, logger as unknown as Logger);\n\t});\n\nprogram.section('Package', '📦');\n\n// COPY\nprogram\n\t.command('copy', 'Copy model with minimal changes')\n\t.alias('cp')\n\t.help(\n\t\t`\nCopy the model from <input> to <output> with minimal changes. Unlike filesystem\n\\`cp\\`, this command does parse the file into glTF Transform's internal\nrepresentation before serializing it to disk again. No other intentional\nchanges are made, so copying a model can be a useful first step to confirm that\nglTF Transform is reading and writing the model correctly when debugging issues\nin a larger script doing more complex processing of the file. Copying may also\nbe used to ensure consistent data layout across glTF files from different\nexporters, e.g. if your engine always requires interleaved vertex attributes.\n\nWhile vertex data remains byte-for-byte the same before and after copying, and\nscene, node, material, and other properties are also preserved losslessly,\ncertain aspects of data layout may change slightly with this process:\n\n- Vertex attributes within a mesh are interleaved.\n- Accessors are organized into buffer views according to usage.\n- Draco compression is removed to avoid a lossy decompress/compress round trip.\n`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.action(({ args, logger }) => Session.create(io, logger, args.input, args.output).transform());\n\n// OPTIMIZE\nprogram\n\t.command('optimize', 'Optimize model by all available methods')\n\t.help(\n\t\t`\nOptimize the model by all available methods. Combines many features of the\nglTF Transform CLI into a single command for convenience and faster results.\nFor more control over the optimization process, consider running individual\ncommands or using the scripting API.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--instance <bool>', 'Use GPU instancing with shared mesh references.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--instance-min <min>', 'Number of instances required for instancing.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: INSTANCE_DEFAULTS.min,\n\t})\n\t.option('--meshopt-level <level>', 'Meshopt compression level.', {\n\t\tvalidator: ['medium', 'high'],\n\t\tdefault: 'high',\n\t})\n\t.option('--palette <bool>', 'Creates palette textures and merges materials.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option(\n\t\t'--palette-min <min>',\n\t\t'Minimum number of blocks in the palette texture. If fewer unique ' +\n\t\t\t'material values are found, no palettes will be generated.',\n\t\t{\n\t\t\tvalidator: Validator.NUMBER,\n\t\t\tdefault: PALETTE_DEFAULTS.min,\n\t\t},\n\t)\n\t.option('--simplify <bool>', 'Simplify mesh geometry with meshoptimizer.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--simplify-error <error>', 'Simplification error tolerance, as a fraction of mesh extent.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: SIMPLIFY_DEFAULTS.error,\n\t})\n\t.option('--simplify-ratio <ratio>', 'Target ratio (0–1) of vertices to keep.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: SIMPLIFY_DEFAULTS.ratio,\n\t})\n\t.option('--simplify-lock-border <bool>', 'Whether to lock topological borders of the mesh.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: SIMPLIFY_DEFAULTS.lockBorder,\n\t})\n\t.option('--prune <bool>', 'Removes properties from the file if they are not referenced by a Scene.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--prune-attributes <bool>', 'Whether to prune unused vertex attributes.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option(\n\t\t'--prune-solid-textures <bool>',\n\t\t'Whether to prune solid (single-color) textures, converting them to material factors.',\n\t\t{\n\t\t\tvalidator: Validator.BOOLEAN,\n\t\t\tdefault: true,\n\t\t},\n\t)\n\t.option(\n\t\t'--compress <method>',\n\t\t'Floating point compression method. Draco compresses geometry; Meshopt ' +\n\t\t\t'and quantization compress geometry and animation.',\n\t\t{\n\t\t\tvalidator: ['draco', 'meshopt', 'quantize', false],\n\t\t\tdefault: 'meshopt',\n\t\t},\n\t)\n\t.option(\n\t\t'--texture-compress <format>',\n\t\t'Texture compression format. KTX2 optimizes VRAM usage and performance; ' +\n\t\t\t'AVIF and WebP optimize transmission size. Auto recompresses in original format.',\n\t\t{\n\t\t\tvalidator: ['ktx2', 'webp', 'avif', 'auto', false],\n\t\t\tdefault: 'auto',\n\t\t},\n\t)\n\t.option('--texture-size <size>', 'Maximum texture dimensions, in pixels.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: 2048,\n\t})\n\t.option('--flatten <bool>', 'Flatten scene graph.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--join <bool>', 'Join meshes and reduce draw calls. Requires `--flatten`.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--join-meshes <bool>', 'Join distinct meshes and nodes. Requires `--join`.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: !JOIN_DEFAULTS.keepMeshes,\n\t})\n\t.option('--join-named <bool>', 'Join named meshes and nodes. Requires `--join`.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: !JOIN_DEFAULTS.keepNamed,\n\t})\n\t.option('--weld <bool>', 'Merge equivalent vertices. Required when simplifying geometry.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.action(async ({ args, options, logger }) => {\n\t\tconst opts = options as {\n\t\t\tinstance: boolean;\n\t\t\tinstanceMin: number;\n\t\t\tmeshoptLevel: 'medium' | 'high';\n\t\t\tpalette: boolean;\n\t\t\tpaletteMin: number;\n\t\t\tsimplify: boolean;\n\t\t\tsimplifyError: number;\n\t\t\tsimplifyRatio: number;\n\t\t\tsimplifyLockBorder: boolean;\n\t\t\tprune: boolean;\n\t\t\tpruneAttributes: boolean;\n\t\t\tpruneSolidTextures: boolean;\n\t\t\tcompress: 'draco' | 'meshopt' | 'quantize' | false;\n\t\t\ttextureCompress: 'ktx2' | 'webp' | 'webp' | 'auto' | false;\n\t\t\ttextureSize: number;\n\t\t\tflatten: boolean;\n\t\t\tjoin: boolean;\n\t\t\tjoinNamed: boolean;\n\t\t\tjoinMeshes: boolean;\n\t\t\tweld: boolean;\n\t\t};\n\n\t\t// Baseline transforms.\n\t\tconst transforms: Transform[] = [dedup()];\n\n\t\tif (opts.instance) transforms.push(instance({ min: opts.instanceMin }));\n\n\t\tif (opts.palette) {\n\t\t\ttransforms.push(\n\t\t\t\tpalette({\n\t\t\t\t\tmin: opts.paletteMin,\n\t\t\t\t\tkeepAttributes: !opts.prune || !opts.pruneAttributes,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tif (opts.flatten) transforms.push(flatten());\n\t\tif (opts.join) {\n\t\t\ttransforms.push(\n\t\t\t\tjoin({\n\t\t\t\t\tkeepNamed: !opts.joinNamed,\n\t\t\t\t\tkeepMeshes: !opts.joinMeshes,\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (opts.weld) transforms.push(weld());\n\n\t\tif (opts.simplify) {\n\t\t\ttransforms.push(\n\t\t\t\tsimplify({\n\t\t\t\t\tsimplifier: MeshoptSimplifier,\n\t\t\t\t\terror: opts.simplifyError,\n\t\t\t\t\tratio: opts.simplifyRatio,\n\t\t\t\t\tlockBorder: opts.simplifyLockBorder,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\ttransforms.push(resample({ ready: resampleReady, resample: resampleWASM }));\n\n\t\tif (opts.prune) {\n\t\t\ttransforms.push(\n\t\t\t\tprune({\n\t\t\t\t\tkeepAttributes: !opts.pruneAttributes,\n\t\t\t\t\tkeepIndices: false,\n\t\t\t\t\tkeepLeaves: false,\n\t\t\t\t\tkeepSolidTextures: !opts.pruneSolidTextures,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\ttransforms.push(sparse());\n\n\t\t// Texture compression.\n\t\tif (opts.textureCompress === 'ktx2') {\n\t\t\tconst { default: encoder } = await import('sharp');\n\t\t\tconst slotsUASTC = micromatch.makeRe(\n\t\t\t\t'{normalTexture,occlusionTexture,metallicRoughnessTexture}',\n\t\t\t\tMICROMATCH_OPTIONS,\n\t\t\t);\n\t\t\ttransforms.push(\n\t\t\t\ttoktx({\n\t\t\t\t\tencoder,\n\t\t\t\t\tresize: [opts.textureSize, opts.textureSize],\n\t\t\t\t\tmode: Mode.UASTC,\n\t\t\t\t\tslots: slotsUASTC,\n\t\t\t\t\tlevel: 4,\n\t\t\t\t\trdo: true,\n\t\t\t\t\trdoLambda: 4,\n\t\t\t\t\tlimitInputPixels: options.limitInputPixels as boolean,\n\t\t\t\t}),\n\t\t\t\ttoktx({\n\t\t\t\t\tencoder,\n\t\t\t\t\tresize: [opts.textureSize, opts.textureSize],\n\t\t\t\t\tmode: Mode.ETC1S,\n\t\t\t\t\tquality: 255,\n\t\t\t\t\tlimitInputPixels: options.limitInputPixels as boolean,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (opts.textureCompress !== false) {\n\t\t\tconst { default: encoder } = await import('sharp');\n\t\t\ttransforms.push(\n\t\t\t\ttextureCompress({\n\t\t\t\t\tencoder,\n\t\t\t\t\tresize: [opts.textureSize, opts.textureSize],\n\t\t\t\t\ttargetFormat: opts.textureCompress === 'auto' ? undefined : opts.textureCompress,\n\t\t\t\t\tlimitInputPixels: options.limitInputPixels as boolean,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\t// Mesh compression last. Doesn't matter here, but in one-off CLI\n\t\t// commands we want to avoid recompressing mesh data.\n\t\tif (opts.compress === 'draco') {\n\t\t\ttransforms.push(draco());\n\t\t} else if (opts.compress === 'meshopt') {\n\t\t\ttransforms.push(meshopt({ encoder: MeshoptEncoder, level: opts.meshoptLevel }));\n\t\t} else if (opts.compress === 'quantize') {\n\t\t\ttransforms.push(quantize());\n\t\t}\n\n\t\treturn Session.create(io, logger, args.input, args.output)\n\t\t\t.setDisplay(true)\n\t\t\t.transform(...transforms);\n\t});\n\n// MERGE\nprogram\n\t.command('merge', 'Merge two or more models into one')\n\t.help(\n\t\t`\nMerge two or more models into one, each in a separate Scene. Optionally, the\nbinary data for each model may be kept in a separate buffer with the\n--partition flag.\n\nExample:\n\n  ▸ gltf-transform merge a.glb b.glb c.glb output.glb\n\t`.trim(),\n\t)\n\t.argument('<path...>', `${INPUT_DESC}(s). Final path is used to write output.`)\n\t.option('--partition', 'Whether to keep separate buffers for each input file. Invalid for GLB output.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: false,\n\t})\n\t.option('--merge-scenes', 'Whether to merge scenes, or keep one scene per input file.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: false,\n\t})\n\t.action(({ args, options, logger }) => {\n\t\tconst paths = typeof args.path === 'string' ? args.path.split(',') : (args.path as string[]);\n\t\tconst output = paths.pop();\n\t\treturn Session.create(io, logger, '', output).transform(merge({ io, paths, ...options }));\n\t});\n\n// PARTITION\nprogram\n\t.command('partition', 'Partition binary data into separate .bin files')\n\t.help(\n\t\t`\nPartition binary data for meshes or animations into separate .bin files. In\nengines that support lazy-loading resources within glTF files, this allows\nrestructuring the data to minimize initial load time, fetching additional\nresources as needed. Partitioning is supported only for .gltf, not .glb, files.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--animations', 'Partition each animation into a separate .bin file', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: false,\n\t})\n\t.option('--meshes', 'Partition each mesh into a separate .bin file', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: false,\n\t})\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(partition(options as PartitionOptions)),\n\t);\n\n// DEDUP\nprogram\n\t.command('dedup', 'Deduplicate accessors and textures')\n\t.help(\n\t\t`\nDeduplicate accessors, textures, materials, meshes, and skins. Some exporters or\npipeline processing may lead to multiple resources within a file containing\nredundant copies of the same information. This functions scans for these cases\nand merges the duplicates where possible, reducing file size. The process may\nbe very slow on large files with many accessors.\n\nDeduplication early in a pipeline may also help other optimizations, like\ncompression and instancing, to be more effective.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--accessors <accessors>', 'Remove duplicate accessors', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--materials <materials>', 'Remove duplicate materials', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--meshes <meshes>', 'Remove duplicate meshes', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--skins <skins>', 'Remove duplicate skins', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.option('--textures <textures>', 'Remove duplicate textures', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.action(({ args, options, logger }) => {\n\t\tconst propertyTypes: string[] = [];\n\t\tif (options.accessors) propertyTypes.push(PropertyType.ACCESSOR);\n\t\tif (options.materials) propertyTypes.push(PropertyType.MATERIAL);\n\t\tif (options.meshes) propertyTypes.push(PropertyType.MESH);\n\t\tif (options.skins) propertyTypes.push(PropertyType.SKIN);\n\t\tif (options.textures) propertyTypes.push(PropertyType.TEXTURE);\n\t\treturn Session.create(io, logger, args.input, args.output).transform(dedup({ propertyTypes }));\n\t});\n\n// PRUNE\nprogram\n\t.command('prune', 'Remove unreferenced properties from the file')\n\t.help(\n\t\t`\nRemoves properties from the file if they are not referenced by a Scene. Helpful\nwhen cleaning up after complex workflows or a faulty exporter. This function\nmay (conservatively) fail to identify some unused extension properties, such as\nlights, but it will not remove anything that is still in use, even if used by\nan extension. Animations are considered unused if they do not target any nodes\nthat are children of a scene.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--keep-attributes <keepAttributes>', 'Whether to keep unused vertex attributes', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: PRUNE_DEFAULTS.keepAttributes,\n\t})\n\t.option('--keep-indices <keepIndices>', 'Whether to keep unused mesh indices', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: PRUNE_DEFAULTS.keepIndices,\n\t})\n\t.option('--keep-leaves <keepLeaves>', 'Whether to keep empty leaf nodes', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: PRUNE_DEFAULTS.keepLeaves,\n\t})\n\t.option(\n\t\t'--keep-solid-textures <keepSolidTextures>',\n\t\t'Whether to keep solid (single-color) textures, or convert to material factors',\n\t\t{\n\t\t\tvalidator: Validator.BOOLEAN,\n\t\t\tdefault: PRUNE_DEFAULTS.keepSolidTextures,\n\t\t},\n\t)\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(prune(options as unknown as PruneOptions)),\n\t);\n\n// GZIP\nprogram\n\t.command('gzip', 'Compress model with lossless gzip')\n\t.help(\n\t\t`\nCompress the model with gzip. Gzip is a general-purpose file compression\ntechnique, not specific to glTF models. On the web, decompression is\nhandled automatically by the web browser, without any intervention from the\nclient application.\n\nWhen the model contains resources that are already effectively compressed, like\nJPEG textures or Draco geometry, gzip is unlikely to add much further benefit\nand can be skipped. Other compression strategies, like Meshopt and quantization,\nwork best when combined with gzip.\n`,\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.action(async ({ args, logger }) => {\n\t\tconst inBuffer = await fs.readFile(args.input as string);\n\t\tconst outBuffer = await gzip(inBuffer);\n\t\tconst fileName = args.input + '.gz';\n\t\tconst inSize = formatBytes(inBuffer.byteLength);\n\t\tconst outSize = formatBytes(outBuffer.byteLength);\n\t\tawait fs.writeFile(fileName, outBuffer);\n\t\tlogger.info(`Created ${fileName} (${inSize} → ${outSize})`);\n\t});\n\n// XMP\nprogram\n\t.command('xmp', 'Add or modify XMP metadata')\n\t.help(\n\t\t`\nXMP metadata provides standardized fields describing the content, provenance, usage restrictions,\nor other attributes of a 3D model. Such metadata does not generally affect the parsing or runtime\nbehavior of the content — for that, use custom extensions, custom vertex attributes, or extras.\n\nThe easiest (and default) mode of the CLI 'xmp' command provides interactive prompts, walking\nthrough a series of questions and then constructing appropriate JSONLD output. These interactive\nprompts do not include all possible XMP namespaces and fields, but should cover most common cases.\n\nFor more advanced cases, provide an external .jsonld or .json file specified by the --packet\nflag, or use the scripting API to manually input JSONLD fields.\n\nTo remove XMP metadata and the KHR_xmp_json_ld extension, use the --reset flag.\n\n${underline('Documentation')}\n- https://gltf-transform.dev/classes/extensions.xmp.html\n`,\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--packet <path>', 'Path to XMP packet (.jsonld or .json)')\n\t.option('--reset', 'Reset metadata and remove XMP extension', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: false,\n\t})\n\t.action(async ({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(xmp({ ...options } as XMPOptions)),\n\t);\n\nprogram.section('Scene', '🌍');\n\n// CENTER\nprogram\n\t.command('center', 'Center the scene at the origin, or above/below it')\n\t.help(\n\t\t`\nCenter the scene at the origin, or above/below it. When loading a model into\na larger scene, or into an augmented reality context, it's often best to ensure\nthe model's pivot is centered beneath the object. For objects meant to be\nattached a surface, like a ceiling fan, the pivot may be located above instead.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--pivot <pivot>', 'Method used to determine the scene pivot', {\n\t\tvalidator: ['center', 'above', 'below'],\n\t\tdefault: 'center',\n\t})\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(center({ ...options } as CenterOptions)),\n\t);\n\n// INSTANCE\nprogram\n\t.command('instance', 'Create GPU instances from shared mesh references')\n\t.help(\n\t\t`\nFor meshes reused by more than one node in a scene, this command creates an\nEXT_mesh_gpu_instancing extension to aid with GPU instancing. In engines that\nsupport the extension, this may allow GPU instancing to be used, reducing draw\ncalls and improving framerate.\n\nEngines may use GPU instancing with or without the presence of this extension,\nand are strongly encouraged to do so. However, particularly when loading a\nmodel at runtime, the extension provides useful context allowing the engine to\nuse this technique efficiently.\n\nInstanced meshes cannot be animated, and must share the same materials. For\nfurther details, see:\n\nhttps://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option(\n\t\t'--min <count>',\n\t\t'Minimum number of meshes in a batch. If fewer compatible meshes ' +\n\t\t\t'are found, no instanced batches will be generated.',\n\t\t{\n\t\t\tvalidator: Validator.NUMBER,\n\t\t\tdefault: INSTANCE_DEFAULTS.min,\n\t\t},\n\t)\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(instance({ ...options } as InstanceOptions)),\n\t);\n\n// FLATTEN\nprogram\n\t.command('flatten', 'Flatten scene graph')\n\t.help(\n\t\t`\nFlattens the scene graph, leaving Nodes with Meshes, Cameras, and other\nattachments as direct children of the Scene. Skeletons and their\ndescendants are left in their original Node structure.\n\nAnimation targeting a Node or its parents will prevent that Node from being\nmoved.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(flatten({ ...options } as FlattenOptions)),\n\t);\n\n// JOIN\nprogram\n\t.command('join', 'Join meshes and reduce draw calls')\n\t.help(\n\t\t`\nJoins compatible Primitives and reduces draw calls. Primitives are eligible for\njoining if they are members of the same Mesh or, optionally, attached to sibling\nNodes in the scene hierarchy. Implicitly runs \\`dedup\\` and \\`flatten\\` commands\nfirst, to maximize the number of Primitives that can be joined.\n\nNOTE: In a Scene that heavily reuses the same Mesh data, joining may increase\nvertex count. Consider alternatives, like \\`instance\\` with\nEXT_mesh_gpu_instancing.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--keepMeshes <bool>', 'Prevents joining distinct meshes and nodes.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: JOIN_DEFAULTS.keepMeshes,\n\t})\n\t.option('--keepNamed <bool>', 'Prevents joining named meshes and nodes.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: JOIN_DEFAULTS.keepNamed,\n\t})\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(\n\t\t\tdedup({ propertyTypes: [PropertyType.MATERIAL] }),\n\t\t\tflatten(),\n\t\t\tjoin({ ...options } as unknown as JoinOptions),\n\t\t),\n\t);\n\nprogram.section('Geometry', '🫖');\n\n// DRACO\nprogram\n\t.command('draco', 'Compress geometry with Draco')\n\t.help(\n\t\t`\nCompress mesh geometry with the Draco library. This type of compression affects\nonly geometry data — animation and textures are not compressed.\n\nCompresses\n- geometry (only triangle meshes)\n\n${underline('Documentation')}\n- https://gltf-transform.dev/classes/extensions.dracomeshcompression.html\n\n${underline('References')}\n- draco: https://github.com/google/draco\n- KHR_draco_mesh_compression: https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Khronos/KHR_draco_mesh_compression/\n`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--method <method>', 'Compression method.', {\n\t\tvalidator: ['edgebreaker', 'sequential'],\n\t\tdefault: 'edgebreaker',\n\t})\n\t.option('--encode-speed <encodeSpeed>', 'Encoding speed vs. compression level, 1–10.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: DRACO_DEFAULTS.encodeSpeed,\n\t})\n\t.option('--decode-speed <decodeSpeed>', 'Decoding speed vs. compression level, 1–10.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: DRACO_DEFAULTS.decodeSpeed,\n\t})\n\t.option('--quantize-position <bits>', 'Quantization bits for POSITION, 1-16.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: DRACO_DEFAULTS.quantizePosition,\n\t})\n\t.option('--quantize-normal <bits>', 'Quantization bits for NORMAL, 1-16.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: DRACO_DEFAULTS.quantizeNormal,\n\t})\n\t.option('--quantize-color <bits>', 'Quantization bits for COLOR_*, 1-16.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: DRACO_DEFAULTS.quantizeColor,\n\t})\n\t.option('--quantize-texcoord <bits>', 'Quantization bits for TEXCOORD_*, 1-16.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: DRACO_DEFAULTS.quantizeTexcoord,\n\t})\n\t.option('--quantize-generic <bits>', 'Quantization bits for other attributes, 1-16.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: DRACO_DEFAULTS.quantizeGeneric,\n\t})\n\t.option('--quantization-volume <volume>', 'Bounds for quantization grid.', {\n\t\tvalidator: ['mesh', 'scene'],\n\t\tdefault: DRACO_DEFAULTS.quantizationVolume,\n\t})\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(draco(options as unknown as DracoOptions)),\n\t);\n\n// MESHOPT\nprogram\n\t.command('meshopt', 'Compress geometry and animation with Meshopt')\n\t.help(\n\t\t`\nCompress geometry, morph targets, and animation with Meshopt. Meshopt\ncompression decodes very quickly, and is best used in combination with a\nlossless compression method like brotli or gzip.\n\nCompresses\n- geometry (points, lines, triangle meshes)\n- morph targets\n- animation tracks\n\n${underline('Documentation')}\n- https://gltf-transform.dev/classes/extensions.meshoptcompression.html\n\n${underline('References')}\n- meshoptimizer: https://github.com/zeux/meshoptimizer\n- EXT_meshopt_compression: https://github.com/KhronosGroup/gltf/blob/main/extensions/2.0/Vendor/EXT_meshopt_compression/\n`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--level <level>', 'Compression level.', {\n\t\tvalidator: ['medium', 'high'],\n\t\tdefault: 'high',\n\t})\n\t.option('--quantize-position <bits>', 'Precision for POSITION attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: MESHOPT_DEFAULTS.quantizePosition,\n\t})\n\t.option('--quantize-normal <bits>', 'Precision for NORMAL and TANGENT attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: MESHOPT_DEFAULTS.quantizeNormal,\n\t})\n\t.option('--quantize-texcoord <bits>', 'Precision for TEXCOORD_* attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: MESHOPT_DEFAULTS.quantizeTexcoord,\n\t})\n\t.option('--quantize-color <bits>', 'Precision for COLOR_* attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: MESHOPT_DEFAULTS.quantizeColor,\n\t})\n\t.option('--quantize-weight <bits>', 'Precision for WEIGHTS_* attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: MESHOPT_DEFAULTS.quantizeWeight,\n\t})\n\t.option('--quantize-generic <bits>', 'Precision for custom (_*) attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: MESHOPT_DEFAULTS.quantizeGeneric,\n\t})\n\t.option('--quantization-volume <volume>', 'Bounds for quantization grid.', {\n\t\tvalidator: ['mesh', 'scene'],\n\t\tdefault: QUANTIZE_DEFAULTS.quantizationVolume,\n\t})\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(meshopt({ encoder: MeshoptEncoder, ...options })),\n\t);\n\n// QUANTIZE\nprogram\n\t.command('quantize', 'Quantize geometry, reducing precision and memory')\n\t.help(\n\t\t`\nQuantization is a simple type of compression taking 32-bit float vertex\nattributes and storing them as 16-bit or 8-bit integers. A quantization factor\nrestoring the original value (with some error) is applied on the GPU, although\nnode scales and positions may also be changed to account for the quantization.\n\nQuantized vertex attributes require less space, both on disk and on the GPU.\nMost vertex attribute types can be quantized from 8–16 bits, but are always\nstored in 8- or 16-bit accessors. While a value quantized to 12 bits still\noccupies 16 bits on disk, gzip (or other lossless compression) will be more\neffective on values quantized to lower bit depths. As a result, the default\nbit depths used by this command are generally between 8 and 16 bits.\n\nBit depths for indices and JOINTS_* are determined automatically.\n\nRequires KHR_mesh_quantization support.`.trim(),\n\t)\n\t.argument('<input>', 'Path to read glTF 2.0 (.glb, .gltf) input')\n\t.argument('<output>', 'Path to write output')\n\t.option('--pattern <pattern>', 'Pattern for vertex attributes (case-insensitive glob)', {\n\t\tvalidator: Validator.STRING,\n\t\tdefault: '*',\n\t})\n\t.option('--quantize-position <bits>', 'Precision for POSITION attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: QUANTIZE_DEFAULTS.quantizePosition,\n\t})\n\t.option('--quantize-normal <bits>', 'Precision for NORMAL and TANGENT attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: QUANTIZE_DEFAULTS.quantizeNormal,\n\t})\n\t.option('--quantize-texcoord <bits>', 'Precision for TEXCOORD_* attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: QUANTIZE_DEFAULTS.quantizeTexcoord,\n\t})\n\t.option('--quantize-color <bits>', 'Precision for COLOR_* attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: QUANTIZE_DEFAULTS.quantizeColor,\n\t})\n\t.option('--quantize-weight <bits>', 'Precision for WEIGHTS_* attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: QUANTIZE_DEFAULTS.quantizeWeight,\n\t})\n\t.option('--quantize-generic <bits>', 'Precision for custom (_*) attributes.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: QUANTIZE_DEFAULTS.quantizeGeneric,\n\t})\n\t.option('--quantization-volume <volume>', 'Bounds for quantization grid.', {\n\t\tvalidator: ['mesh', 'scene'],\n\t\tdefault: QUANTIZE_DEFAULTS.quantizationVolume,\n\t})\n\t.action(({ args, options, logger }) => {\n\t\tconst pattern = micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS);\n\t\treturn Session.create(io, logger, args.input, args.output).transform(quantize({ ...options, pattern }));\n\t});\n\n// DEQUANTIZE\nprogram\n\t.command('dequantize', 'Dequantize geometry')\n\t.help(\n\t\t`\nRemoves quantization from an asset. This will increase the size of the asset on\ndisk and in memory, but may be necessary for applications that don't support\nquantization.\n\nRemoves KHR_mesh_quantization, if present.`.trim(),\n\t)\n\t.argument('<input>', 'Path to read glTF 2.0 (.glb, .gltf) input')\n\t.argument('<output>', 'Path to write output')\n\t.option('--pattern <pattern>', 'Pattern for vertex attributes (case-insensitive glob)', {\n\t\tvalidator: Validator.STRING,\n\t\tdefault: '!JOINTS_*',\n\t})\n\t.action(({ args, options, logger }) => {\n\t\tconst pattern = micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS);\n\t\treturn Session.create(io, logger, args.input, args.output).transform(dequantize({ ...options, pattern }));\n\t});\n\n// WELD\nprogram\n\t.command('weld', 'Merge equivalent vertices to optimize geometry')\n\t.help(\n\t\t`\nWelds mesh geometry, merging bitwise identical vertices. When merged and\nindexed, data is shared more efficiently between vertices. File size\ncan be reduced, and the GPU uses the vertex cache more efficiently.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(weld(options as unknown as WeldOptions)),\n\t);\n\n// UNWELD\nprogram\n\t.command('unweld', 'De-index geometry, disconnecting any shared vertices')\n\t.help(\n\t\t`\nDe-index geometry, disconnecting any shared vertices. This tends to increase\nthe file size of the geometry and decrease efficiency, and so is not\nrecommended unless disconnected vertices (\"vertex soup\") are required for some\nparicular software application.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(unweld(options as unknown as UnweldOptions)),\n\t);\n\n// TANGENTS\nprogram\n\t.command('tangents', 'Generate MikkTSpace vertex tangents')\n\t.help(\n\t\t`\nGenerates MikkTSpace vertex tangents.\n\nIn some situations normal maps may appear incorrectly, displaying hard edges\nat seams, or unexpectedly inverted insets and extrusions. The issue is most\ncommonly caused by a mismatch between the software used to bake the normal map\nand the pixel shader or other code used to render it. While this may be a\nfrustration to an artist/designer, it is not always possible for the rendering\nengine to reconstruct the tangent space used by the authoring software.\n\nMost normal map bakers use the MikkTSpace standard (http://www.mikktspace.com/)\nto generate vertex tangents while creating a normal map, and the technique is\nrecommended by the glTF 2.0 specification. Generating vertex tangents with this\ntool may resolve rendering issues related to normal maps in engines that cannot\ncompute MikkTSpace tangents at runtime.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--overwrite', 'Overwrite existing vertex tangents', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: false,\n\t})\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(\n\t\t\tunweld(),\n\t\t\ttangents({ generateTangents: mikktspace.generateTangents, ...options }),\n\t\t\tweld(),\n\t\t),\n\t);\n\n// REORDER\nprogram\n\t.command('reorder', 'Optimize vertex data for locality of reference')\n\t.help(\n\t\t`\nOptimize vertex data for locality of reference.\n\nChoose whether the order should be optimal for transmission size (recommended for Web) or for GPU\nrendering performance. When optimizing for transmission size, reordering is expected to be a pre-\nprocessing step before applying Meshopt compression and lossless supercompression (such as gzip or\nbrotli). Reordering will only reduce size when used in combination with other compression methods.\n\nBased on the meshoptimizer library (https://github.com/zeux/meshoptimizer).\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--target', 'Whether to optimize for transmission size or GPU performance', {\n\t\tvalidator: ['size', 'performance'],\n\t\tdefault: 'size',\n\t})\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(reorder({ encoder: MeshoptEncoder, ...options })),\n\t);\n\n// SIMPLIFY\nprogram\n\t.command('simplify', 'Simplify mesh, reducing number of vertices')\n\t.help(\n\t\t`\nSimplify mesh, reducing number of vertices.\n\nSimplification algorithm producing meshes with fewer triangles and\nvertices. Simplification is lossy, but the algorithm aims to\npreserve visual quality as much as possible, for given parameters.\n\nThe algorithm aims to reach the target --ratio, while minimizing error. If\nerror exceeds the specified --error threshold, the algorithm will quit\nbefore reaching the target ratio. Examples:\n\n- ratio=0.5, error=0.001: Aims for 50% simplification, constrained to 0.1% error.\n- ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error.\n- ratio=0.0, error=0.01: Aims for maximum simplification, constrained to 1% error.\n\nTopology, particularly split vertices, will also limit the simplifier. For\nbest results, apply a 'weld' operation before simplification.\n\nBased on the meshoptimizer library (https://github.com/zeux/meshoptimizer).\n`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--ratio <ratio>', 'Target ratio (0–1) of vertices to keep', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: SIMPLIFY_DEFAULTS.ratio,\n\t})\n\t.option('--error <error>', 'Limit on error, as a fraction of mesh radius', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: SIMPLIFY_DEFAULTS.error,\n\t})\n\t.option('--lock-border <bool>', 'Whether to lock topological borders of the mesh', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: SIMPLIFY_DEFAULTS.lockBorder,\n\t})\n\t.action(async ({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(\n\t\t\tsimplify({ simplifier: MeshoptSimplifier, ...options }),\n\t\t),\n\t);\n\nprogram.section('Material', '🎨');\n\n// METALROUGH\nprogram\n\t.command('metalrough', 'Convert materials from spec/gloss to metal/rough')\n\t.help(\n\t\t`\nConvert materials from spec/gloss to metal/rough. In general, the metal/rough\nworkflow is better supported, more compact, and more future-proof. All features\nof the spec/gloss workflow can be converted to metal/rough, as long as the\nKHR_materials_specular and KHR_materials_ior extensions are supported. When one\nor both of those extensions are not supported, metallic materials may require\nfurther adjustments after the conversion.\n\nThis conversion rewrites spec/gloss textures, and the resulting textures may\nhave less optimal compression than the original. Ideally, lossless PNG textures\nshould be used as input, and then compressed after this conversion.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.action(({ args, logger }) => Session.create(io, logger, args.input, args.output).transform(metalRough()));\n\n// PALETTE\nprogram\n\t.command('palette', 'Creates palette textures and merges materials')\n\t.help(\n\t\t`\nCreates palette textures containing all unique values of scalar Material\nproperties within the scene, then merges materials. For scenes with many\nsolid-colored materials (often found in CAD, architectural, or low-poly\nstyles), texture palettes can reduce the number of materials used, and\nsignificantly increase the number of Mesh objects eligible for \"join\"\noperations.\n\nMaterials already containing texture coordinates (UVs) are not eligible for\ntexture palette optimizations. Currently only a material's base color,\nalpha, emissive factor, metallic factor, and roughness factor are converted\nto palette textures.\n`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--block-size <px>', 'Size (in pixels) of a single block within each palette texture.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: PALETTE_DEFAULTS.blockSize,\n\t})\n\t.option(\n\t\t'--min <count>',\n\t\t'Minimum number of blocks in the palette texture. If fewer unique ' +\n\t\t\t'material values are found, no palettes will be generated.',\n\t\t{\n\t\t\tvalidator: Validator.NUMBER,\n\t\t\tdefault: PALETTE_DEFAULTS.min,\n\t\t},\n\t)\n\t.action(async ({ args, options, logger }) => {\n\t\treturn Session.create(io, logger, args.input, args.output).transform(\n\t\t\tpalette(options as unknown as PaletteOptions),\n\t\t);\n\t});\n\n// UNLIT\nprogram\n\t.command('unlit', 'Convert materials from metal/rough to unlit')\n\t.help(\n\t\t`\nConvert materials to an unlit, shadeless model. Unlit materials are not\naffected by scene lighting, and can be rendered very efficiently on less\ncapable mobile devices. If device framerate is high when an object occupies a\nsmall part of the viewport, and low when that object fills the viewport, it's\nlikely that the GPU is fragment shader bound, and a simpler material (such as\nan unlit material) may improve performance.\n\nUnlit materials are also helpful for non-physically-based visual styles.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.action(({ args, logger }) => Session.create(io, logger, args.input, args.output).transform(unlit()));\n\nprogram.section('Texture', '🖼');\n\n// RESIZE\nprogram\n\t.command('resize', 'Resize PNG or JPEG textures')\n\t.help(\n\t\t`\nResize PNG or JPEG textures with Lanczos3 (sharp) or Lanczos2 (smooth)\nfiltering. Typically Lanczos3 is the best method, but Lanczos2 may be helpful\nto reduce ringing artifacts in some cases.\n\nLimits --width and --height are applied as maximum dimensions for each texture,\npreserving original aspect ratio. Texture dimensions are never increased.\n`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--pattern <pattern>', 'Pattern (glob) to match textures, by name or URI.', {\n\t\tvalidator: Validator.STRING,\n\t})\n\t.option('--filter', 'Resampling filter', {\n\t\tvalidator: [TextureResizeFilter.LANCZOS3, TextureResizeFilter.LANCZOS2],\n\t\tdefault: TextureResizeFilter.LANCZOS3,\n\t})\n\t.option('--width <pixels>', 'Maximum width (px) of output textures.', {\n\t\tvalidator: Validator.NUMBER,\n\t})\n\t.option('--height <pixels>', 'Maximum height (px) of output textures.', {\n\t\tvalidator: Validator.NUMBER,\n\t})\n\t.option('--power-of-two <pot>', 'Resize in two dimensions. Overrides --width and --height.', {\n\t\tvalidator: ['nearest', 'ceil', 'floor'],\n\t})\n\t.action(async ({ args, options, logger }) => {\n\t\tconst pattern = options.pattern ? micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS) : null;\n\t\tconst { default: encoder } = await import('sharp');\n\n\t\ttype Preset = 'nearest-pot' | 'ceil-pot' | 'floor-pot';\n\t\tlet resize: vec2 | Preset;\n\t\tif (options.powerOfTwo) {\n\t\t\tif (options.width || options.height) {\n\t\t\t\tlogger.warn('When --power-of-two is specified, --width and --height are ignored.');\n\t\t\t}\n\t\t\tresize = `${options.powerOfTwo}-pot` as Preset;\n\t\t} else if (Number.isInteger(options.width) && Number.isInteger(options.height)) {\n\t\t\tresize = [Number(options.width), Number(options.height)];\n\t\t} else {\n\t\t\tthrow new Error(`Must specify --width and --height, or --power-of-two.`);\n\t\t}\n\n\t\treturn Session.create(io, logger, args.input, args.output).transform(\n\t\t\ttextureCompress({\n\t\t\t\tencoder,\n\t\t\t\tresize,\n\t\t\t\tresizeFilter: options.filter as TextureResizeFilter,\n\t\t\t\tpattern,\n\t\t\t}),\n\t\t);\n\t});\n\nconst BASIS_SUMMARY = `\nCompresses textures in the given file to .ktx2 GPU textures using the\n{VARIANT} Basis Universal bitstream. GPU textures offer faster GPU upload\nand less GPU memory consumption than traditional PNG or JPEG textures,\nwhich are fully uncompressed in GPU memory. GPU texture formats require\nmore attention to compression settings to get similar visual results.\n\n{DETAILS}\n\n${underline('Documentation')}\nhttps://gltf-transform.dev/extensions.html#khr_texture_basisu\n\n${underline('Dependencies')}\nKTX-Software (https://github.com/KhronosGroup/KTX-Software/)\n`;\n\n// ETC1S\nprogram\n\t.command('etc1s', 'KTX + Basis ETC1S texture compression')\n\t.help(\n\t\tBASIS_SUMMARY.replace('{VARIANT}', 'ETC1S').replace(\n\t\t\t'{DETAILS}',\n\t\t\t`\nETC1S, one of the two Basis Universal bitstreams, offers lower size and lower\nquality than UASTC. In some cases it may be useful to increase the resolution\nof the texture, to minimize compression artifacts while still retaining an\noverall smaller filesize. Consider using less aggressive compression settings\nfor normal maps than for other texture types: you may want to use UASTC for\nnormal maps and ETC1S for other textures, for example.`.trim(),\n\t\t),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--pattern <pattern>', 'Pattern (glob) to match textures, by name or URI.', {\n\t\tvalidator: Validator.STRING,\n\t})\n\t.option('--slots <slots>', 'Texture slots to include (glob)', { validator: Validator.STRING })\n\t.option('--filter <filter>', 'Specifies the filter to use when generating mipmaps.', {\n\t\tvalidator: Object.values(Filter),\n\t\tdefault: ETC1S_DEFAULTS.filter,\n\t})\n\t.option('--filter-scale <fscale>', 'Specifies the filter scale to use when generating mipmaps.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: ETC1S_DEFAULTS.filterScale,\n\t})\n\t.option(\n\t\t'--compression <clevel>',\n\t\t'Compression level, an encoding speed vs. quality tradeoff.' +\n\t\t\t' Higher values are slower, but give higher quality. Try' +\n\t\t\t' --quality before experimenting with this option.',\n\t\t{ validator: [0, 1, 2, 3, 4, 5], default: ETC1S_DEFAULTS.compression },\n\t)\n\t.option(\n\t\t'--quality <qlevel>',\n\t\t'Quality level. Range is 1 - 255. Lower gives better' +\n\t\t\t' compression, lower quality, and faster encoding. Higher gives less compression,' +\n\t\t\t' higher quality, and slower encoding. Quality level determines values of' +\n\t\t\t' --max_endpoints and --max-selectors, unless those values are explicitly set.',\n\t\t{ validator: Validator.NUMBER, default: ETC1S_DEFAULTS.quality },\n\t)\n\t.option(\n\t\t'--max-endpoints <max_endpoints>',\n\t\t'Manually set the maximum number of color endpoint clusters from' + ' 1-16128.',\n\t\t{ validator: Validator.NUMBER, default: ETC1S_DEFAULTS.maxEndpoints },\n\t)\n\t.option(\n\t\t'--max-selectors <max_selectors>',\n\t\t'Manually set the maximum number of color selector clusters from' + ' 1-16128.',\n\t\t{ validator: Validator.NUMBER, default: ETC1S_DEFAULTS.maxSelectors },\n\t)\n\t.option(\n\t\t'--rdo-threshold <rdo_threshold>',\n\t\t'Set endpoint and selector RDO quality threshold. Lower' +\n\t\t\t' is higher quality but less quality per output bit (try 1.0-3.0).' +\n\t\t\t' Overrides --quality.',\n\t\t{ validator: Validator.NUMBER, default: ETC1S_DEFAULTS.rdoThreshold },\n\t)\n\t.option(\n\t\t'--rdo',\n\t\t'Enable endpoint and selector RDO (slightly' + ' faster, less noisy output, but lower quality per output bit).',\n\t\t{ validator: Validator.BOOLEAN, default: ETC1S_DEFAULTS.rdo },\n\t)\n\t.option('--jobs <num_jobs>', 'Spawns up to num_jobs instances of toktx', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: ETC1S_DEFAULTS.jobs,\n\t})\n\t.action(async ({ args, options, logger }) => {\n\t\tconst { default: encoder } = await import('sharp');\n\t\tconst mode = Mode.ETC1S;\n\t\tconst pattern = options.pattern ? micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS) : null;\n\t\tconst slots = options.slots ? micromatch.makeRe(String(options.slots), MICROMATCH_OPTIONS) : null;\n\t\treturn Session.create(io, logger, args.input, args.output).transform(\n\t\t\ttoktx({ ...options, encoder, mode, pattern, slots }),\n\t\t);\n\t});\n\n// UASTC\nprogram\n\t.command('uastc', 'KTX + Basis UASTC texture compression')\n\t.help(\n\t\tBASIS_SUMMARY.replace('{VARIANT}', 'UASTC').replace(\n\t\t\t'{DETAILS}',\n\t\t\t`\nUASTC, one of the two Basis Universal bitstreams, offers higher size and higher\nquality than ETC1S. While it is suitable for all texture types, you may find it\nuseful to apply UASTC only where higher quality is necessary, and apply ETC1S\nfor textures where the quality is sufficient.`.trim(),\n\t\t),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--pattern <pattern>', 'Pattern (glob) to match textures, by name or URI.', {\n\t\tvalidator: Validator.STRING,\n\t})\n\t.option('--slots <slots>', 'Texture slots to include (glob)', { validator: Validator.STRING })\n\t.option('--filter <filter>', 'Specifies the filter to use when generating mipmaps.', {\n\t\tvalidator: Object.values(Filter),\n\t\tdefault: UASTC_DEFAULTS.filter,\n\t})\n\t.option('--filter-scale <fscale>', 'Specifies the filter scale to use when generating mipmaps.', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: UASTC_DEFAULTS.filterScale,\n\t})\n\t.option(\n\t\t'--level <level>',\n\t\t'Create a texture in high-quality transcodable UASTC format.' +\n\t\t\t' The optional parameter <level> selects a speed' +\n\t\t\t' vs quality tradeoff as shown in the following table:' +\n\t\t\t'\\n\\n' +\n\t\t\t'Level | Speed     | Quality' +\n\t\t\t'\\n——————|———————————|————————' +\n\t\t\t'\\n0     | Fastest   | 43.45dB' +\n\t\t\t'\\n1     | Faster    | 46.49dB' +\n\t\t\t'\\n2     | Default   | 47.47dB' +\n\t\t\t'\\n3     | Slower    | 48.01dB' +\n\t\t\t'\\n4     | Very slow | 48.24dB',\n\t\t{ validator: [0, 1, 2, 3, 4], default: UASTC_DEFAULTS.level },\n\t)\n\t.option('--rdo', 'Enable UASTC RDO post-processing.', { validator: Validator.BOOLEAN, default: UASTC_DEFAULTS.rdo })\n\t.option(\n\t\t'--rdo-lambda <uastc_rdo_l>',\n\t\t'Set UASTC RDO quality scalar (lambda). Lower values yield higher' +\n\t\t\t' quality/larger LZ compressed files, higher values yield lower' +\n\t\t\t' quality/smaller LZ compressed files. A good range to try is [.25, 10].' +\n\t\t\t' For normal maps, try [.25, .75]. Full range is [.001, 10.0].',\n\t\t{ validator: Validator.NUMBER, default: UASTC_DEFAULTS.rdoLambda },\n\t)\n\t.option(\n\t\t'--rdo-dictionary-size <uastc_rdo_d>',\n\t\t'Set UASTC RDO dictionary size in bytes. Default is 32768. Lower' +\n\t\t\t' values=faster, but give less compression. Possible range is [256, 65536].',\n\t\t{ validator: Validator.NUMBER, default: UASTC_DEFAULTS.rdoDictionarySize },\n\t)\n\t.option(\n\t\t'--rdo-block-scale <uastc_rdo_b>',\n\t\t'Set UASTC RDO max smooth block error scale. Range is [1.0, 300.0].' +\n\t\t\t' Default is 10.0, 1.0 is disabled. Larger values suppress more' +\n\t\t\t' artifacts (and allocate more bits) on smooth blocks.',\n\t\t{ validator: Validator.NUMBER, default: UASTC_DEFAULTS.rdoBlockScale },\n\t)\n\t.option(\n\t\t'--rdo-std-dev <uastc_rdo_s>',\n\t\t'Set UASTC RDO max smooth block standard deviation. Range is' +\n\t\t\t' [.01, 65536.0]. Default is 18.0. Larger values expand the range' +\n\t\t\t' of blocks considered smooth.',\n\t\t{ validator: Validator.NUMBER, default: UASTC_DEFAULTS.rdoStdDev },\n\t)\n\t.option(\n\t\t'--rdo-multithreading <uastc_rdo_m>',\n\t\t'Enable RDO multithreading (slightly lower compression, non-deterministic).',\n\t\t{ validator: Validator.BOOLEAN, default: UASTC_DEFAULTS.rdoMultithreading },\n\t)\n\t.option(\n\t\t'--zstd <compressionLevel>',\n\t\t'Supercompress the data with Zstandard.' +\n\t\t\t' Compression level range is [1, 22], or 0 is uncompressed.' +\n\t\t\t' Lower values decode faster but offer less compression. Values above' +\n\t\t\t' 20 should be used with caution, requiring more memory to decompress:' +\n\t\t\t'\\n\\n' +\n\t\t\t// Sources:\n\t\t\t// - https://news.ycombinator.com/item?id=13814475\n\t\t\t// - https://github.com/facebook/zstd/blob/15a7a99653c78a57d1ccbf5c5b4571e62183bf4f/lib/compress/zstd_compress.c#L3250\n\t\t\t'Level | Window Size ' +\n\t\t\t'\\n——————|—————————————' +\n\t\t\t'\\n1     |      256 KB ' +\n\t\t\t'\\n…     |           … ' +\n\t\t\t'\\n10    |        2 MB ' +\n\t\t\t'\\n…     |           … ' +\n\t\t\t'\\n18    |        8 MB ' +\n\t\t\t'\\n19    |        8 MB ' +\n\t\t\t'\\n20    |       34 MB ' +\n\t\t\t'\\n21    |       67 MB ' +\n\t\t\t'\\n22    |      134 MB ',\n\t\t{ validator: Validator.NUMBER, default: UASTC_DEFAULTS.zstd },\n\t)\n\t.option('--jobs <num_jobs>', 'Spawns up to num_jobs instances of toktx', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: UASTC_DEFAULTS.jobs,\n\t})\n\t.action(async ({ args, options, logger }) => {\n\t\tconst { default: encoder } = await import('sharp');\n\t\tconst mode = Mode.UASTC;\n\t\tconst pattern = options.pattern ? micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS) : null;\n\t\tconst slots = options.slots ? micromatch.makeRe(String(options.slots), MICROMATCH_OPTIONS) : null;\n\t\tSession.create(io, logger, args.input, args.output).transform(\n\t\t\ttoktx({ ...options, encoder, mode, pattern, slots }),\n\t\t);\n\t});\n\n// KTXFIX\nprogram\n\t.command('ktxfix', 'Fixes common issues in KTX texture metadata')\n\t.help(\n\t\t`\nCertain KTX texture metadata was written incorrectly in early (pre-release)\nsoftware. In particular, viewers may misinterpret color primaries as sRGB\nincorrectly when a texture exhibits this issue.\n\nThis command determines correct color primaries based on usage in the glTF\nfile, and updates the KTX texture accordingly. The change is lossless, and\naffects only the container metadata.`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.action(({ args, logger }) => Session.create(io, logger, args.input, args.output).transform(ktxfix()));\n\nconst TEXTURE_COMPRESS_SUMMARY = `\nCompresses textures with {VARIANT}, using sharp. Reduces transmitted file\nsize. Compared to GPU texture compression like KTX/Basis, PNG/JPEG/WebP must\nbe fully decompressed in GPU memory — this makes texture GPU upload much\nslower, and may consume 4-8x more GPU memory. However, the PNG/JPEG/WebP\ncompression methods are typically more forgiving than GPU texture compression,\nand require less tuning to achieve good visual and filesize results.\n`.trim();\n\n// AVIF\n// IMPORTANT: No defaults for quality flags, see https://github.com/donmccurdy/glTF-Transform/issues/969.\nprogram\n\t.command('avif', 'AVIF texture compression')\n\t.help(TEXTURE_COMPRESS_SUMMARY.replace(/{VARIANT}/g, 'AVIF'))\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--pattern <pattern>', 'Pattern (glob) to match textures, by name or URI.', {\n\t\tvalidator: Validator.STRING,\n\t})\n\t.option('--formats <formats>', 'Texture formats to include', {\n\t\tvalidator: [...TEXTURE_COMPRESS_SUPPORTED_FORMATS, '*'],\n\t\tdefault: '*',\n\t})\n\t.option('--slots <slots>', 'Texture slots to include (glob)', { validator: Validator.STRING, default: '*' })\n\t.option('--quality <quality>', 'Quality, 1-100', { validator: Validator.NUMBER })\n\t.option('--effort <effort>', 'Level of CPU effort to reduce file size, 0-100', { validator: Validator.NUMBER })\n\t.option('--lossless <lossless>', 'Use lossless compression mode', { validator: Validator.BOOLEAN, default: false })\n\t.action(async ({ args, options, logger }) => {\n\t\tconst pattern = options.pattern ? micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS) : null;\n\t\tconst formats = regexFromArray([options.formats] as string[]);\n\t\tconst slots = micromatch.makeRe(String(options.slots), MICROMATCH_OPTIONS);\n\t\tconst { default: encoder } = await import('sharp');\n\t\treturn Session.create(io, logger, args.input, args.output).transform(\n\t\t\ttextureCompress({\n\t\t\t\ttargetFormat: 'avif',\n\t\t\t\tencoder,\n\t\t\t\tpattern,\n\t\t\t\tformats,\n\t\t\t\tslots,\n\t\t\t\tquality: options.quality as number,\n\t\t\t\teffort: options.effort as number,\n\t\t\t\tlossless: options.lossless as boolean,\n\t\t\t\tlimitInputPixels: options.limitInputPixels as boolean,\n\t\t\t}),\n\t\t);\n\t});\n\n// WEBP\n// IMPORTANT: No defaults for quality flags, see https://github.com/donmccurdy/glTF-Transform/issues/969.\nprogram\n\t.command('webp', 'WebP texture compression')\n\t.help(TEXTURE_COMPRESS_SUMMARY.replace(/{VARIANT}/g, 'WebP'))\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--pattern <pattern>', 'Pattern (glob) to match textures, by name or URI.', {\n\t\tvalidator: Validator.STRING,\n\t})\n\t.option('--formats <formats>', 'Texture formats to include', {\n\t\tvalidator: [...TEXTURE_COMPRESS_SUPPORTED_FORMATS, '*'],\n\t\tdefault: '*',\n\t})\n\t.option('--slots <slots>', 'Texture slots to include (glob)', { validator: Validator.STRING, default: '*' })\n\t.option('--quality <quality>', 'Quality, 1-100', { validator: Validator.NUMBER })\n\t.option('--effort <effort>', 'Level of CPU effort to reduce file size, 0-100', { validator: Validator.NUMBER })\n\t.option('--lossless <lossless>', 'Use lossless compression mode', { validator: Validator.BOOLEAN, default: false })\n\t.option('--near-lossless <nearLossless>', 'Use near lossless compression mode.', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: false,\n\t})\n\t.action(async ({ args, options, logger }) => {\n\t\tconst pattern = options.pattern ? micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS) : null;\n\t\tconst formats = regexFromArray([options.formats] as string[]);\n\t\tconst slots = micromatch.makeRe(String(options.slots), MICROMATCH_OPTIONS);\n\t\tconst { default: encoder } = await import('sharp');\n\t\treturn Session.create(io, logger, args.input, args.output).transform(\n\t\t\ttextureCompress({\n\t\t\t\ttargetFormat: 'webp',\n\t\t\t\tencoder,\n\t\t\t\tpattern,\n\t\t\t\tformats,\n\t\t\t\tslots,\n\t\t\t\tquality: options.quality as number,\n\t\t\t\teffort: options.effort as number,\n\t\t\t\tlossless: options.lossless as boolean,\n\t\t\t\tnearLossless: options.nearLossless as boolean,\n\t\t\t\tlimitInputPixels: options.limitInputPixels as boolean,\n\t\t\t}),\n\t\t);\n\t});\n\n// PNG\n// IMPORTANT: No defaults for quality flags, see https://github.com/donmccurdy/glTF-Transform/issues/969.\nprogram\n\t.command('png', 'PNG texture compression')\n\t.help(TEXTURE_COMPRESS_SUMMARY.replace(/{VARIANT}/g, 'PNG'))\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--pattern <pattern>', 'Pattern (glob) to match textures, by name or URI.', {\n\t\tvalidator: Validator.STRING,\n\t})\n\t.option('--formats <formats>', 'Texture formats to include', {\n\t\tvalidator: [...TEXTURE_COMPRESS_SUPPORTED_FORMATS, '*'],\n\t\tdefault: 'png',\n\t})\n\t.option('--slots <slots>', 'Texture slots to include (glob)', { validator: Validator.STRING, default: '*' })\n\t.option('--quality <quality>', 'Quality, 1-100', { validator: Validator.NUMBER })\n\t.option('--effort <effort>', 'Level of CPU effort to reduce file size, 0-100', { validator: Validator.NUMBER })\n\t.action(async ({ args, options, logger }) => {\n\t\tconst pattern = options.pattern ? micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS) : null;\n\t\tconst formats = regexFromArray([options.formats] as string[]);\n\t\tconst slots = micromatch.makeRe(String(options.slots), MICROMATCH_OPTIONS);\n\t\tconst { default: encoder } = await import('sharp');\n\t\treturn Session.create(io, logger, args.input, args.output).transform(\n\t\t\ttextureCompress({\n\t\t\t\ttargetFormat: 'png',\n\t\t\t\tencoder,\n\t\t\t\tpattern,\n\t\t\t\tformats,\n\t\t\t\tslots,\n\t\t\t\tquality: options.quality as number,\n\t\t\t\teffort: options.effort as number,\n\t\t\t\tlimitInputPixels: options.limitInputPixels as boolean,\n\t\t\t}),\n\t\t);\n\t});\n\n// JPEG\n// IMPORTANT: No defaults for quality flags, see https://github.com/donmccurdy/glTF-Transform/issues/969.\nprogram\n\t.command('jpeg', 'JPEG texture compression')\n\t.help(TEXTURE_COMPRESS_SUMMARY.replace(/{VARIANT}/g, 'JPEG'))\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--pattern <pattern>', 'Pattern (glob) to match textures, by name or URI.', {\n\t\tvalidator: Validator.STRING,\n\t})\n\t.option('--formats <formats>', 'Texture formats to include', {\n\t\tvalidator: [...TEXTURE_COMPRESS_SUPPORTED_FORMATS, '*'],\n\t\tdefault: 'jpeg',\n\t})\n\t.option('--slots <slots>', 'Texture slots to include (glob)', { validator: Validator.STRING, default: '*' })\n\t.option('--quality <quality>', 'Quality, 1-100', { validator: Validator.NUMBER })\n\t.action(async ({ args, options, logger }) => {\n\t\tconst pattern = options.pattern ? micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS) : null;\n\t\tconst formats = regexFromArray([options.formats] as string[]);\n\t\tconst slots = micromatch.makeRe(String(options.slots), MICROMATCH_OPTIONS);\n\t\tconst { default: encoder } = await import('sharp');\n\t\treturn Session.create(io, logger, args.input, args.output).transform(\n\t\t\ttextureCompress({\n\t\t\t\ttargetFormat: 'jpeg',\n\t\t\t\tencoder,\n\t\t\t\tpattern,\n\t\t\t\tformats,\n\t\t\t\tslots,\n\t\t\t\tquality: options.quality as number,\n\t\t\t\tlimitInputPixels: options.limitInputPixels as boolean,\n\t\t\t}),\n\t\t);\n\t});\n\nprogram.section('Animation', '⏯️');\n\n// RESAMPLE\nprogram\n\t.command('resample', 'Resample animations, losslessly deduplicating keyframes')\n\t.help(\n\t\t`\nResample animations, losslessly deduplicating keyframes. Exporters sometimes\nneed to \"bake\" animations, writing data for 20-30 frames per second, in order\nto correctly represent IK constraints and other animation techniques. These\nadditional keyframes are often redundant — particularly with morph targets —\nas engines can interpolate animation at 60–120 FPS even with sparse keyframes.\n\nThe resampling process removes redundant keyframes from animations using STEP\nand LINEAR interpolation. Resampling is nearly lossless, with configurable\n--tolerance, and should have no visible effect on animation playback.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--tolerance', 'Per-value tolerance to merge similar keyframes', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: 1e-4,\n\t})\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(\n\t\t\tresample({\n\t\t\t\tready: resampleReady,\n\t\t\t\tresample: resampleWASM,\n\t\t\t\t...(options as unknown as ResampleOptions),\n\t\t\t}),\n\t\t),\n\t);\n\n// SEQUENCE\nprogram\n\t.command('sequence', 'Animate node visibilities as a flipboard sequence')\n\t.help(\n\t\t`\nAnimate node visibilities as a flipboard sequence. An example workflow would\nbe to create a .glb containing one geometry for each frame of a complex\nanimation that can't be represented as TRS, skinning, or morph targets. The\nsequence function generates a new animation, playing back each mesh matching\nthe given pattern, at a specific framerate. Displaying a sequence of textures\nis also supported, but note that texture memory usage may be quite high and\nso this workflow is not a replacement for video playback.\n\t`.trim(),\n\t)\n\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.option('--name <name>', 'Name of new animation', {\n\t\tvalidator: Validator.STRING,\n\t\tdefault: '',\n\t})\n\t.option('--pattern <pattern>', 'Pattern for node names (case-insensitive glob)', {\n\t\tvalidator: Validator.STRING,\n\t\trequired: true,\n\t})\n\t.option('--fps <fps>', 'FPS (frames / second)', {\n\t\tvalidator: Validator.NUMBER,\n\t\tdefault: 10,\n\t})\n\t.option('--sort <sort>', 'Order sequence by node name', {\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t})\n\t.action(({ args, options, logger }) => {\n\t\tconst pattern = micromatch.makeRe(String(options.pattern), MICROMATCH_OPTIONS);\n\t\treturn Session.create(io, logger, args.input, args.output).transform(\n\t\t\tsequence({ ...options, pattern } as SequenceOptions),\n\t\t);\n\t});\n\n// SPARSE\nprogram\n\t.command('sparse', 'Reduces storage for zero-filled arrays')\n\t.help(\n\t\t`\nScans all Accessors in the Document, detecting whether each Accessor would\nbenefit from sparse data storage. Currently, sparse data storage is used only\nwhen many values (>= 1/3) are zeroes. Particularly for assets using morph\ntarget (\"shape key\") animation, sparse data storage may significantly reduce\nfile sizes.\n\t`.trim(),\n\t)\n\t.argument('<input>', INPUT_DESC)\n\t.argument('<output>', OUTPUT_DESC)\n\t.action(({ args, options, logger }) =>\n\t\tSession.create(io, logger, args.input, args.output).transform(sparse(options as unknown as SparseOptions)),\n\t);\n\nprogram.option('--allow-net', 'Allows reads from network requests.', {\n\tdefault: false,\n\tvalidator: Validator.BOOLEAN,\n\taction: ({ options }) => {\n\t\tif (options.allowNet) io.setAllowNetwork(true);\n\t},\n});\nprogram.option('--vertex-layout <layout>', 'Vertex buffer layout preset.', {\n\tdefault: VertexLayout.INTERLEAVED,\n\tvalidator: [VertexLayout.INTERLEAVED, VertexLayout.SEPARATE],\n\taction: ({ options }) => {\n\t\tio.setVertexLayout(options.vertexLayout as VertexLayout);\n\t},\n});\nprogram.option('--config <path>', 'Installs custom commands or extensions. (EXPERIMENTAL)', {\n\tvalidator: Validator.STRING,\n});\nprogram.option(\n\t'--limit-input-pixels',\n\t'Attempts to avoid processing very high resolution images, where memory or ' +\n\t\t'other limits may be exceeded. (EXPERIMENTAL)',\n\t{\n\t\tvalidator: Validator.BOOLEAN,\n\t\tdefault: true,\n\t\thidden: true,\n\t},\n);\nprogram.disableGlobalOption('--quiet');\nprogram.disableGlobalOption('--no-color');\n\nexport { program, programReady };\nexport * from './util.js';\nexport * from './transforms/index.js';\n"],"names":["XMPContext","dc","model3d","rdf","xmp","xmpRights","MICROMATCH_OPTIONS","nocase","contains","regexFromArray","values","pattern","map","s","join","micromatch","makeRe","spawn","_spawn","commandExists","cmd","_commandExists","catch","waitExit","_waitExit","mockSpawn","mockCommandExists","mockWaitExit","process","stdout","chunk","stderr","status","Promise","resolve","_","on","_longFormatter","Intl","NumberFormat","undefined","maximumFractionDigits","formatLong","x","format","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatParagraph","str","match","line","trim","formatHeader","title","toUpperCase","TableFormat","CLI_TABLE_MARKDOWN_CHARS","top","bottom","left","mid","right","middle","formatTable","head","rows","PRETTY","table","CLITable","push","toString","CSV","reject","stringify","err","output","MD","chars","Array","length","fill","stripAnsi","formatXMP","value","list","hasCommas","some","indexOf","JSON","underline","dim","inspect","jsonDoc","io","logger","extensionsUsed","json","extensionsRequired","console","asset","version","generator","document","readJSON","e","warn","rootPacket","getRoot","getExtension","listProperties","name","getProperty","report","inspectDoc","reportSection","scenes","meshes","materials","textures","animations","type","section","properties","formattedRecords","property","index","formatPropertyReport","header","Object","keys","p","footnotes","getFootnotes","warnings","forEach","warning","row","key","isArray","NAME","ktxfix","doc","getLogger","numChanged","texture","listTextures","getMimeType","image","getImage","ktx","read","dfd","dataFormatDescriptor","slots","listTextureSlots","colorSpace","getTextureColorSpace","colorPrimaries","KHR_DF_PRIMARIES_BT709","KHR_DF_PRIMARIES_UNSPECIFIED","getURI","getName","changed","info","setImage","write","debug","merge","options","paths","root","path","basename","FileUtils","extension","toLowerCase","includes","createTexture","fs","readFileSync","setMimeType","ImageUtils","extensionToMimeType","setURI","mergeDocuments","renameScenes","Error","rootScene","listScenes","scene","setDefaultScene","mergeScenes","child","listChildren","removeChild","addChild","dispose","transform","dedup","propertyTypes","PropertyType","TEXTURE","createUniqueURIs","listBuffers","partition","unpartition","setName","resources","total","used","resource","uri","prefix","replace","RegExp","NUM_CPUS","os","cpus","KTX_SOFTWARE_VERSION_MIN","R","G","A","TextureChannel","Mode","ETC1S","UASTC","Filter","BOX","TENT","BELL","BSPLINE","MITCHELL","LANCZOS3","LANCZOS4","LANCZOS6","LANCZOS12","BLACKMAN","KAISER","GAUSSIAN","CATMULLROM","QUADRATIC_INTERP","QUADRATIC_APPROX","QUADRATIC_MIX","GLOBAL_DEFAULTS","resizeFilter","TextureResizeFilter","filter","filterScale","jobs","cleanup","limitInputPixels","ETC1S_DEFAULTS","quality","compression","rdo","rdoThreshold","maxSelectors","maxEndpoints","UASTC_DEFAULTS","level","rdoLambda","rdoDictionarySize","rdoBlockScale","rdoStdDev","rdoMultithreading","zstd","toktx","mode","createTransform","checkKTXSoftware","batchPrefix","uuid","batchDir","tmp","dirSync","basisuExtension","createExtension","KHRTextureBasisu","setRequired","limit","pLimit","numTextures","promises","textureIndex","channels","getTextureChannelMask","textureLabel","patternRe","slotsRe","srcMimeType","find","slot","srcImage","srcExtension","mimeTypeToExtension","srcSize","getSize","srcBytes","byteLength","resize","isMultipleOfFour","encoder","instance","toFormat","dstSize","fitWithin","fitPowerOfTwo","ceilMultipleOfFour","fit","kernel","BufferUtils","toView","toBuffer","srcPath","dstPath","writeFile","params","createParams","_stdout","error","readFile","dstBytes","all","rm","recursive","usesKTX2","t","size","isNormalMap","isMatch","_options","threads","max","min","round","env","CI","DEFAULT_LANG","XMP_DEFAULTS","packet","reset","Prompt","generateQuestions","results","lang","message","choices","CREATOR","TITLE","DESCRIPTION","RELATED","CREATE_DATE","LANGUAGE","RIGHTS","PREFERRED_SURFACE","prompts","Set","_prompts","has","hint","initial","validate","input","languageTags","check","createList","createLanguageAlternative","_rights","usage","_usage","test","_isLicenseSPDX","validateSPDX","mask","d","toISOString","substring","xmpExtension","KHRXMP","packetPath","packetJSON","packetDef","validatePacket","parse","createPacket","fromJSONLD","setExtension","toJSONLD","question","assign","checkTTY","setContext","getContext","createContext","numProperties","startsWith","setProperty","Date","context","split","isTtyError","language","_object","acc","prototype","call","object","suffix","Session","constructor","_io","_logger","_input","_output","_outputFormat","_display","setLogger","Format","GLB","GLTF","create","setDisplay","display","transforms","Document","extensionName","listExtensionsUsed","tasks","task","ctx","time","performance","now","padEnd","prevLevel","getVerbosity","Verbosity","INFO","setVerbosity","WARN","Listr","renderer","registerSignalListeners","run","updateMetadata","lastReadBytes","lastWriteBytes","ext","date","HEADER","buffer","validator","validateBytes","Uint8Array","maxIssues","ignoredIssues","ignore","externalResourceFunction","dirname","decodeURIComponent","then","printCSV","printTable","issues","messages","severity","msg","customConfigPromise","createDefaultConfig","draco3d","createDecoderModule","createEncoderModule","MeshoptDecoder","ready","MeshoptEncoder","decoder","extensions","ALL_EXTENSIONS","dependencies","onProgramReady","loadConfig","cwd","validateConfig","config","EXTENSION_NAME","getConfig","default","customConfig","PAD_EMOJI","ProgramImpl","_program","description","desc","help","_name","_icon","icon","command","CommandImpl","option","global","disableGlobalOption","exec","args","program","_ctx","text","argument","action","fn","Logger","alias","Validator","NUMBER","ARRAY","BOOLEAN","STRING","_verbosity","ERROR","DEBUG","verbosity","programReady","argv","NodeIO","fetch","registerExtensions","registerDependencies","INPUT_DESC","OUTPUT_DESC","PACKAGE","URL","import","meta","url","sectionName","readAsJSON","INSTANCE_DEFAULTS","PALETTE_DEFAULTS","SIMPLIFY_DEFAULTS","ratio","lockBorder","JOIN_DEFAULTS","keepMeshes","keepNamed","opts","instanceMin","palette","paletteMin","keepAttributes","prune","pruneAttributes","flatten","joinNamed","joinMeshes","weld","simplify","simplifier","MeshoptSimplifier","simplifyError","simplifyRatio","simplifyLockBorder","resample","resampleReady","resampleWASM","keepIndices","keepLeaves","keepSolidTextures","pruneSolidTextures","sparse","textureCompress","slotsUASTC","textureSize","targetFormat","compress","draco","meshopt","meshoptLevel","quantize","pop","accessors","ACCESSOR","MATERIAL","MESH","skins","SKIN","PRUNE_DEFAULTS","inBuffer","outBuffer","gzip","fileName","inSize","outSize","center","DRACO_DEFAULTS","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","MESHOPT_DEFAULTS","quantizeWeight","QUANTIZE_DEFAULTS","String","dequantize","unweld","tangents","generateTangents","mikktspace","reorder","metalRough","blockSize","unlit","LANCZOS2","powerOfTwo","width","height","Number","isInteger","BASIS_SUMMARY","TEXTURE_COMPRESS_SUMMARY","TEXTURE_COMPRESS_SUPPORTED_FORMATS","formats","effort","lossless","nearLossless","required","sequence","allowNet","setAllowNetwork","VertexLayout","INTERLEAVED","SEPARATE","setVertexLayout","vertexLayout","hidden"],"mappings":"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"}